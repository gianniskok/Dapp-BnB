{"ast":null,"code":"'use strict';\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  async function* query(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message);\n      message.responses = (message.responses || []).map((\n      /** @type {{ ID: string, Addrs: string[] }} */\n      _ref) => {\n        let {\n          ID,\n          Addrs\n        } = _ref;\n        return {\n          id: ID,\n          addrs: (Addrs || []).map((\n          /** @type {string} **/\n          a) => new Multiaddr(a))\n        };\n      });\n      yield message;\n    }\n  }\n\n  return query;\n});","map":{"version":3,"names":["Multiaddr","require","toCamel","configure","toUrlSearchParams","module","exports","api","query","peerId","options","res","post","signal","searchParams","arg","toString","headers","message","ndjson","responses","map","ID","Addrs","id","addrs","a"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/dht/query.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.responses = (message.responses || []).map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n        id: ID,\n        addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n      }))\n      yield message\n    }\n  }\n\n  return query\n})\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,KAAjB,CAAwBC,MAAxB,EAA8C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC5C,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,WAAT,EAAsB;MACtCC,MAAM,EAAEH,OAAO,CAACG,MADsB;MAEtCC,YAAY,EAAEV,iBAAiB,CAAC;QAC9BW,GAAG,EAAEN,MAAM,CAACO,QAAP,EADyB;QAE9B,GAAGN;MAF2B,CAAD,CAFO;MAMtCO,OAAO,EAAEP,OAAO,CAACO;IANqB,CAAtB,CAAlB;;IASA,WAAW,IAAIC,OAAf,IAA0BP,GAAG,CAACQ,MAAJ,EAA1B,EAAwC;MACtCD,OAAO,GAAGhB,OAAO,CAACgB,OAAD,CAAjB;MACAA,OAAO,CAACE,SAAR,GAAoB,CAACF,OAAO,CAACE,SAAR,IAAqB,EAAtB,EAA0BC,GAA1B,CAA8B;MAAC;MAAD;QAAA,IAAgD;UAAEC,EAAF;UAAMC;QAAN,CAAhD;QAAA,OAAmE;UACnHC,EAAE,EAAEF,EAD+G;UAEnHG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkB;UAAC;UAAuBK,CAAxB,KAA8B,IAAI1B,SAAJ,CAAc0B,CAAd,CAAhD;QAF4G,CAAnE;MAAA,CAA9B,CAApB;MAIA,MAAMR,OAAN;IACD;EACF;;EAED,OAAOV,KAAP;AACD,CAzByB,CAA1B"},"metadata":{},"sourceType":"script"}