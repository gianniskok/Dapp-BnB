{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst identifierUtils = require(\"./util/identifier\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/**\n * @typedef {Object} RecordsChunks\n * @property {Record<string, number>=} byName\n * @property {Record<string, number>=} bySource\n * @property {number[]=} usedIds\n */\n\n/**\n * @typedef {Object} RecordsModules\n * @property {Record<string, number>=} byIdentifier\n * @property {Record<string, number>=} bySource\n * @property {Record<number, number>=} usedIds\n */\n\n/**\n * @typedef {Object} Records\n * @property {RecordsChunks=} chunks\n * @property {RecordsModules=} modules\n */\n\n\nclass RecordIdsPlugin {\n  /**\n   * @param {Object} options Options object\n   * @param {boolean=} options.portableIds true, when ids need to be portable\n   */\n  constructor(options) {\n    this.options = options || {};\n  }\n  /**\n   * @param {Compiler} compiler the Compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const portableIds = this.options.portableIds;\n    compiler.hooks.compilation.tap(\"RecordIdsPlugin\", compilation => {\n      compilation.hooks.recordModules.tap(\"RecordIdsPlugin\",\n      /**\n       * @param {Module[]} modules the modules array\n       * @param {Records} records the records object\n       * @returns {void}\n       */\n      (modules, records) => {\n        if (!records.modules) records.modules = {};\n        if (!records.modules.byIdentifier) records.modules.byIdentifier = {};\n        if (!records.modules.usedIds) records.modules.usedIds = {};\n\n        for (const module of modules) {\n          if (typeof module.id !== \"number\") continue;\n          const identifier = portableIds ? identifierUtils.makePathsRelative(compiler.context, module.identifier(), compilation.cache) : module.identifier();\n          records.modules.byIdentifier[identifier] = module.id;\n          records.modules.usedIds[module.id] = module.id;\n        }\n      });\n      compilation.hooks.reviveModules.tap(\"RecordIdsPlugin\",\n      /**\n       * @param {Module[]} modules the modules array\n       * @param {Records} records the records object\n       * @returns {void}\n       */\n      (modules, records) => {\n        if (!records.modules) return;\n\n        if (records.modules.byIdentifier) {\n          /** @type {Set<number>} */\n          const usedIds = new Set();\n\n          for (const module of modules) {\n            if (module.id !== null) continue;\n            const identifier = portableIds ? identifierUtils.makePathsRelative(compiler.context, module.identifier(), compilation.cache) : module.identifier();\n            const id = records.modules.byIdentifier[identifier];\n            if (id === undefined) continue;\n            if (usedIds.has(id)) continue;\n            usedIds.add(id);\n            module.id = id;\n          }\n        }\n\n        if (Array.isArray(records.modules.usedIds)) {\n          compilation.usedModuleIds = new Set(records.modules.usedIds);\n        }\n      });\n      /**\n       * @param {Module} module the module\n       * @returns {string} the (portable) identifier\n       */\n\n      const getModuleIdentifier = module => {\n        if (portableIds) {\n          return identifierUtils.makePathsRelative(compiler.context, module.identifier(), compilation.cache);\n        }\n\n        return module.identifier();\n      };\n      /**\n       * @param {Chunk} chunk the chunk\n       * @returns {string[]} sources of the chunk\n       */\n\n\n      const getChunkSources = chunk => {\n        /** @type {string[]} */\n        const sources = [];\n\n        for (const chunkGroup of chunk.groupsIterable) {\n          const index = chunkGroup.chunks.indexOf(chunk);\n\n          if (chunkGroup.name) {\n            sources.push(`${index} ${chunkGroup.name}`);\n          } else {\n            for (const origin of chunkGroup.origins) {\n              if (origin.module) {\n                if (origin.request) {\n                  sources.push(`${index} ${getModuleIdentifier(origin.module)} ${origin.request}`);\n                } else if (typeof origin.loc === \"string\") {\n                  sources.push(`${index} ${getModuleIdentifier(origin.module)} ${origin.loc}`);\n                } else if (origin.loc && typeof origin.loc === \"object\" && origin.loc.start) {\n                  sources.push(`${index} ${getModuleIdentifier(origin.module)} ${JSON.stringify(origin.loc.start)}`);\n                }\n              }\n            }\n          }\n        }\n\n        return sources;\n      };\n\n      compilation.hooks.recordChunks.tap(\"RecordIdsPlugin\",\n      /**\n       * @param {Chunk[]} chunks the chunks array\n       * @param {Records} records the records object\n       * @returns {void}\n       */\n      (chunks, records) => {\n        if (!records.chunks) records.chunks = {};\n        if (!records.chunks.byName) records.chunks.byName = {};\n        if (!records.chunks.bySource) records.chunks.bySource = {};\n        /** @type {Set<number>} */\n\n        const usedIds = new Set();\n\n        for (const chunk of chunks) {\n          if (typeof chunk.id !== \"number\") continue;\n          const name = chunk.name;\n          if (name) records.chunks.byName[name] = chunk.id;\n          const sources = getChunkSources(chunk);\n\n          for (const source of sources) {\n            records.chunks.bySource[source] = chunk.id;\n          }\n\n          usedIds.add(chunk.id);\n        }\n\n        records.chunks.usedIds = Array.from(usedIds).sort();\n      });\n      compilation.hooks.reviveChunks.tap(\"RecordIdsPlugin\",\n      /**\n       * @param {Chunk[]} chunks the chunks array\n       * @param {Records} records the records object\n       * @returns {void}\n       */\n      (chunks, records) => {\n        if (!records.chunks) return;\n        /** @type {Set<number>} */\n\n        const usedIds = new Set();\n\n        if (records.chunks.byName) {\n          for (const chunk of chunks) {\n            if (chunk.id !== null) continue;\n            if (!chunk.name) continue;\n            const id = records.chunks.byName[chunk.name];\n            if (id === undefined) continue;\n            if (usedIds.has(id)) continue;\n            usedIds.add(id);\n            chunk.id = id;\n          }\n        }\n\n        if (records.chunks.bySource) {\n          for (const chunk of chunks) {\n            const sources = getChunkSources(chunk);\n\n            for (const source of sources) {\n              const id = records.chunks.bySource[source];\n              if (id === undefined) continue;\n              if (usedIds.has(id)) continue;\n              usedIds.add(id);\n              chunk.id = id;\n              break;\n            }\n          }\n        }\n\n        if (Array.isArray(records.chunks.usedIds)) {\n          compilation.usedChunkIds = new Set(records.chunks.usedIds);\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = RecordIdsPlugin;","map":{"version":3,"names":["identifierUtils","require","RecordIdsPlugin","constructor","options","apply","compiler","portableIds","hooks","compilation","tap","recordModules","modules","records","byIdentifier","usedIds","module","id","identifier","makePathsRelative","context","cache","reviveModules","Set","undefined","has","add","Array","isArray","usedModuleIds","getModuleIdentifier","getChunkSources","chunk","sources","chunkGroup","groupsIterable","index","chunks","indexOf","name","push","origin","origins","request","loc","start","JSON","stringify","recordChunks","byName","bySource","source","from","sort","reviveChunks","usedChunkIds","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/RecordIdsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst identifierUtils = require(\"./util/identifier\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./Module\")} Module */\n\n/**\n * @typedef {Object} RecordsChunks\n * @property {Record<string, number>=} byName\n * @property {Record<string, number>=} bySource\n * @property {number[]=} usedIds\n */\n\n/**\n * @typedef {Object} RecordsModules\n * @property {Record<string, number>=} byIdentifier\n * @property {Record<string, number>=} bySource\n * @property {Record<number, number>=} usedIds\n */\n\n/**\n * @typedef {Object} Records\n * @property {RecordsChunks=} chunks\n * @property {RecordsModules=} modules\n */\n\nclass RecordIdsPlugin {\n\t/**\n\t * @param {Object} options Options object\n\t * @param {boolean=} options.portableIds true, when ids need to be portable\n\t */\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the Compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst portableIds = this.options.portableIds;\n\t\tcompiler.hooks.compilation.tap(\"RecordIdsPlugin\", compilation => {\n\t\t\tcompilation.hooks.recordModules.tap(\n\t\t\t\t\"RecordIdsPlugin\",\n\t\t\t\t/**\n\t\t\t\t * @param {Module[]} modules the modules array\n\t\t\t\t * @param {Records} records the records object\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\t(modules, records) => {\n\t\t\t\t\tif (!records.modules) records.modules = {};\n\t\t\t\t\tif (!records.modules.byIdentifier) records.modules.byIdentifier = {};\n\t\t\t\t\tif (!records.modules.usedIds) records.modules.usedIds = {};\n\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\tif (typeof module.id !== \"number\") continue;\n\t\t\t\t\t\tconst identifier = portableIds\n\t\t\t\t\t\t\t? identifierUtils.makePathsRelative(\n\t\t\t\t\t\t\t\t\tcompiler.context,\n\t\t\t\t\t\t\t\t\tmodule.identifier(),\n\t\t\t\t\t\t\t\t\tcompilation.cache\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: module.identifier();\n\t\t\t\t\t\trecords.modules.byIdentifier[identifier] = module.id;\n\t\t\t\t\t\trecords.modules.usedIds[module.id] = module.id;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tcompilation.hooks.reviveModules.tap(\n\t\t\t\t\"RecordIdsPlugin\",\n\t\t\t\t/**\n\t\t\t\t * @param {Module[]} modules the modules array\n\t\t\t\t * @param {Records} records the records object\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\t(modules, records) => {\n\t\t\t\t\tif (!records.modules) return;\n\t\t\t\t\tif (records.modules.byIdentifier) {\n\t\t\t\t\t\t/** @type {Set<number>} */\n\t\t\t\t\t\tconst usedIds = new Set();\n\t\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t\tif (module.id !== null) continue;\n\t\t\t\t\t\t\tconst identifier = portableIds\n\t\t\t\t\t\t\t\t? identifierUtils.makePathsRelative(\n\t\t\t\t\t\t\t\t\t\tcompiler.context,\n\t\t\t\t\t\t\t\t\t\tmodule.identifier(),\n\t\t\t\t\t\t\t\t\t\tcompilation.cache\n\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t: module.identifier();\n\t\t\t\t\t\t\tconst id = records.modules.byIdentifier[identifier];\n\t\t\t\t\t\t\tif (id === undefined) continue;\n\t\t\t\t\t\t\tif (usedIds.has(id)) continue;\n\t\t\t\t\t\t\tusedIds.add(id);\n\t\t\t\t\t\t\tmodule.id = id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Array.isArray(records.modules.usedIds)) {\n\t\t\t\t\t\tcompilation.usedModuleIds = new Set(records.modules.usedIds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * @param {Module} module the module\n\t\t\t * @returns {string} the (portable) identifier\n\t\t\t */\n\t\t\tconst getModuleIdentifier = module => {\n\t\t\t\tif (portableIds) {\n\t\t\t\t\treturn identifierUtils.makePathsRelative(\n\t\t\t\t\t\tcompiler.context,\n\t\t\t\t\t\tmodule.identifier(),\n\t\t\t\t\t\tcompilation.cache\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn module.identifier();\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @param {Chunk} chunk the chunk\n\t\t\t * @returns {string[]} sources of the chunk\n\t\t\t */\n\t\t\tconst getChunkSources = chunk => {\n\t\t\t\t/** @type {string[]} */\n\t\t\t\tconst sources = [];\n\t\t\t\tfor (const chunkGroup of chunk.groupsIterable) {\n\t\t\t\t\tconst index = chunkGroup.chunks.indexOf(chunk);\n\t\t\t\t\tif (chunkGroup.name) {\n\t\t\t\t\t\tsources.push(`${index} ${chunkGroup.name}`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (const origin of chunkGroup.origins) {\n\t\t\t\t\t\t\tif (origin.module) {\n\t\t\t\t\t\t\t\tif (origin.request) {\n\t\t\t\t\t\t\t\t\tsources.push(\n\t\t\t\t\t\t\t\t\t\t`${index} ${getModuleIdentifier(origin.module)} ${\n\t\t\t\t\t\t\t\t\t\t\torigin.request\n\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else if (typeof origin.loc === \"string\") {\n\t\t\t\t\t\t\t\t\tsources.push(\n\t\t\t\t\t\t\t\t\t\t`${index} ${getModuleIdentifier(origin.module)} ${\n\t\t\t\t\t\t\t\t\t\t\torigin.loc\n\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\torigin.loc &&\n\t\t\t\t\t\t\t\t\ttypeof origin.loc === \"object\" &&\n\t\t\t\t\t\t\t\t\torigin.loc.start\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tsources.push(\n\t\t\t\t\t\t\t\t\t\t`${index} ${getModuleIdentifier(\n\t\t\t\t\t\t\t\t\t\t\torigin.module\n\t\t\t\t\t\t\t\t\t\t)} ${JSON.stringify(origin.loc.start)}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn sources;\n\t\t\t};\n\n\t\t\tcompilation.hooks.recordChunks.tap(\n\t\t\t\t\"RecordIdsPlugin\",\n\t\t\t\t/**\n\t\t\t\t * @param {Chunk[]} chunks the chunks array\n\t\t\t\t * @param {Records} records the records object\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\t(chunks, records) => {\n\t\t\t\t\tif (!records.chunks) records.chunks = {};\n\t\t\t\t\tif (!records.chunks.byName) records.chunks.byName = {};\n\t\t\t\t\tif (!records.chunks.bySource) records.chunks.bySource = {};\n\t\t\t\t\t/** @type {Set<number>} */\n\t\t\t\t\tconst usedIds = new Set();\n\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\tif (typeof chunk.id !== \"number\") continue;\n\t\t\t\t\t\tconst name = chunk.name;\n\t\t\t\t\t\tif (name) records.chunks.byName[name] = chunk.id;\n\t\t\t\t\t\tconst sources = getChunkSources(chunk);\n\t\t\t\t\t\tfor (const source of sources) {\n\t\t\t\t\t\t\trecords.chunks.bySource[source] = chunk.id;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tusedIds.add(chunk.id);\n\t\t\t\t\t}\n\t\t\t\t\trecords.chunks.usedIds = Array.from(usedIds).sort();\n\t\t\t\t}\n\t\t\t);\n\t\t\tcompilation.hooks.reviveChunks.tap(\n\t\t\t\t\"RecordIdsPlugin\",\n\t\t\t\t/**\n\t\t\t\t * @param {Chunk[]} chunks the chunks array\n\t\t\t\t * @param {Records} records the records object\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\t(chunks, records) => {\n\t\t\t\t\tif (!records.chunks) return;\n\t\t\t\t\t/** @type {Set<number>} */\n\t\t\t\t\tconst usedIds = new Set();\n\t\t\t\t\tif (records.chunks.byName) {\n\t\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\t\tif (chunk.id !== null) continue;\n\t\t\t\t\t\t\tif (!chunk.name) continue;\n\t\t\t\t\t\t\tconst id = records.chunks.byName[chunk.name];\n\t\t\t\t\t\t\tif (id === undefined) continue;\n\t\t\t\t\t\t\tif (usedIds.has(id)) continue;\n\t\t\t\t\t\t\tusedIds.add(id);\n\t\t\t\t\t\t\tchunk.id = id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (records.chunks.bySource) {\n\t\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\t\tconst sources = getChunkSources(chunk);\n\t\t\t\t\t\t\tfor (const source of sources) {\n\t\t\t\t\t\t\t\tconst id = records.chunks.bySource[source];\n\t\t\t\t\t\t\t\tif (id === undefined) continue;\n\t\t\t\t\t\t\t\tif (usedIds.has(id)) continue;\n\t\t\t\t\t\t\t\tusedIds.add(id);\n\t\t\t\t\t\t\t\tchunk.id = id;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Array.isArray(records.chunks.usedIds)) {\n\t\t\t\t\t\tcompilation.usedChunkIds = new Set(records.chunks.usedIds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\nmodule.exports = RecordIdsPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}