{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nconst {\n  Tapable,\n  HookMap,\n  SyncHook,\n  SyncWaterfallHook\n} = require(\"tapable\");\n\nconst Factory = require(\"enhanced-resolve\").ResolverFactory;\n\nconst {\n  cachedCleverMerge\n} = require(\"./util/cleverMerge\");\n/** @typedef {import(\"enhanced-resolve\").Resolver} Resolver */\n\n\nconst EMTPY_RESOLVE_OPTIONS = {};\nmodule.exports = class ResolverFactory extends Tapable {\n  constructor() {\n    super();\n    this.hooks = {\n      resolveOptions: new HookMap(() => new SyncWaterfallHook([\"resolveOptions\"])),\n      resolver: new HookMap(() => new SyncHook([\"resolver\", \"resolveOptions\"]))\n    };\n\n    this._pluginCompat.tap(\"ResolverFactory\", options => {\n      let match;\n      match = /^resolve-options (.+)$/.exec(options.name);\n\n      if (match) {\n        this.hooks.resolveOptions.for(match[1]).tap(options.fn.name || \"unnamed compat plugin\", options.fn);\n        return true;\n      }\n\n      match = /^resolver (.+)$/.exec(options.name);\n\n      if (match) {\n        this.hooks.resolver.for(match[1]).tap(options.fn.name || \"unnamed compat plugin\", options.fn);\n        return true;\n      }\n    });\n\n    this.cache2 = new Map();\n  }\n\n  get(type, resolveOptions) {\n    resolveOptions = resolveOptions || EMTPY_RESOLVE_OPTIONS;\n    const ident = `${type}|${JSON.stringify(resolveOptions)}`;\n    const resolver = this.cache2.get(ident);\n    if (resolver) return resolver;\n\n    const newResolver = this._create(type, resolveOptions);\n\n    this.cache2.set(ident, newResolver);\n    return newResolver;\n  }\n\n  _create(type, resolveOptions) {\n    const originalResolveOptions = Object.assign({}, resolveOptions);\n    resolveOptions = this.hooks.resolveOptions.for(type).call(resolveOptions);\n    const resolver = Factory.createResolver(resolveOptions);\n\n    if (!resolver) {\n      throw new Error(\"No resolver created\");\n    }\n    /** @type {Map<Object, Resolver>} */\n\n\n    const childCache = new Map();\n\n    resolver.withOptions = options => {\n      const cacheEntry = childCache.get(options);\n      if (cacheEntry !== undefined) return cacheEntry;\n      const mergedOptions = cachedCleverMerge(originalResolveOptions, options);\n      const resolver = this.get(type, mergedOptions);\n      childCache.set(options, resolver);\n      return resolver;\n    };\n\n    this.hooks.resolver.for(type).call(resolver, resolveOptions);\n    return resolver;\n  }\n\n};","map":{"version":3,"names":["Tapable","HookMap","SyncHook","SyncWaterfallHook","require","Factory","ResolverFactory","cachedCleverMerge","EMTPY_RESOLVE_OPTIONS","module","exports","constructor","hooks","resolveOptions","resolver","_pluginCompat","tap","options","match","exec","name","for","fn","cache2","Map","get","type","ident","JSON","stringify","newResolver","_create","set","originalResolveOptions","Object","assign","call","createResolver","Error","childCache","withOptions","cacheEntry","undefined","mergedOptions"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/ResolverFactory.js"],"sourcesContent":["/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nconst { Tapable, HookMap, SyncHook, SyncWaterfallHook } = require(\"tapable\");\nconst Factory = require(\"enhanced-resolve\").ResolverFactory;\nconst { cachedCleverMerge } = require(\"./util/cleverMerge\");\n\n/** @typedef {import(\"enhanced-resolve\").Resolver} Resolver */\n\nconst EMTPY_RESOLVE_OPTIONS = {};\n\nmodule.exports = class ResolverFactory extends Tapable {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.hooks = {\n\t\t\tresolveOptions: new HookMap(\n\t\t\t\t() => new SyncWaterfallHook([\"resolveOptions\"])\n\t\t\t),\n\t\t\tresolver: new HookMap(() => new SyncHook([\"resolver\", \"resolveOptions\"]))\n\t\t};\n\t\tthis._pluginCompat.tap(\"ResolverFactory\", options => {\n\t\t\tlet match;\n\t\t\tmatch = /^resolve-options (.+)$/.exec(options.name);\n\t\t\tif (match) {\n\t\t\t\tthis.hooks.resolveOptions\n\t\t\t\t\t.for(match[1])\n\t\t\t\t\t.tap(options.fn.name || \"unnamed compat plugin\", options.fn);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tmatch = /^resolver (.+)$/.exec(options.name);\n\t\t\tif (match) {\n\t\t\t\tthis.hooks.resolver\n\t\t\t\t\t.for(match[1])\n\t\t\t\t\t.tap(options.fn.name || \"unnamed compat plugin\", options.fn);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tthis.cache2 = new Map();\n\t}\n\n\tget(type, resolveOptions) {\n\t\tresolveOptions = resolveOptions || EMTPY_RESOLVE_OPTIONS;\n\t\tconst ident = `${type}|${JSON.stringify(resolveOptions)}`;\n\t\tconst resolver = this.cache2.get(ident);\n\t\tif (resolver) return resolver;\n\t\tconst newResolver = this._create(type, resolveOptions);\n\t\tthis.cache2.set(ident, newResolver);\n\t\treturn newResolver;\n\t}\n\n\t_create(type, resolveOptions) {\n\t\tconst originalResolveOptions = Object.assign({}, resolveOptions);\n\t\tresolveOptions = this.hooks.resolveOptions.for(type).call(resolveOptions);\n\t\tconst resolver = Factory.createResolver(resolveOptions);\n\t\tif (!resolver) {\n\t\t\tthrow new Error(\"No resolver created\");\n\t\t}\n\t\t/** @type {Map<Object, Resolver>} */\n\t\tconst childCache = new Map();\n\t\tresolver.withOptions = options => {\n\t\t\tconst cacheEntry = childCache.get(options);\n\t\t\tif (cacheEntry !== undefined) return cacheEntry;\n\t\t\tconst mergedOptions = cachedCleverMerge(originalResolveOptions, options);\n\t\t\tconst resolver = this.get(type, mergedOptions);\n\t\t\tchildCache.set(options, resolver);\n\t\t\treturn resolver;\n\t\t};\n\t\tthis.hooks.resolver.for(type).call(resolver, resolveOptions);\n\t\treturn resolver;\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA,OAAF;EAAWC,OAAX;EAAoBC,QAApB;EAA8BC;AAA9B,IAAoDC,OAAO,CAAC,SAAD,CAAjE;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAAP,CAA4BE,eAA5C;;AACA,MAAM;EAAEC;AAAF,IAAwBH,OAAO,CAAC,oBAAD,CAArC;AAEA;;;AAEA,MAAMI,qBAAqB,GAAG,EAA9B;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMJ,eAAN,SAA8BN,OAA9B,CAAsC;EACtDW,WAAW,GAAG;IACb;IACA,KAAKC,KAAL,GAAa;MACZC,cAAc,EAAE,IAAIZ,OAAJ,CACf,MAAM,IAAIE,iBAAJ,CAAsB,CAAC,gBAAD,CAAtB,CADS,CADJ;MAIZW,QAAQ,EAAE,IAAIb,OAAJ,CAAY,MAAM,IAAIC,QAAJ,CAAa,CAAC,UAAD,EAAa,gBAAb,CAAb,CAAlB;IAJE,CAAb;;IAMA,KAAKa,aAAL,CAAmBC,GAAnB,CAAuB,iBAAvB,EAA0CC,OAAO,IAAI;MACpD,IAAIC,KAAJ;MACAA,KAAK,GAAG,yBAAyBC,IAAzB,CAA8BF,OAAO,CAACG,IAAtC,CAAR;;MACA,IAAIF,KAAJ,EAAW;QACV,KAAKN,KAAL,CAAWC,cAAX,CACEQ,GADF,CACMH,KAAK,CAAC,CAAD,CADX,EAEEF,GAFF,CAEMC,OAAO,CAACK,EAAR,CAAWF,IAAX,IAAmB,uBAFzB,EAEkDH,OAAO,CAACK,EAF1D;QAGA,OAAO,IAAP;MACA;;MACDJ,KAAK,GAAG,kBAAkBC,IAAlB,CAAuBF,OAAO,CAACG,IAA/B,CAAR;;MACA,IAAIF,KAAJ,EAAW;QACV,KAAKN,KAAL,CAAWE,QAAX,CACEO,GADF,CACMH,KAAK,CAAC,CAAD,CADX,EAEEF,GAFF,CAEMC,OAAO,CAACK,EAAR,CAAWF,IAAX,IAAmB,uBAFzB,EAEkDH,OAAO,CAACK,EAF1D;QAGA,OAAO,IAAP;MACA;IACD,CAhBD;;IAiBA,KAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;EACA;;EAEDC,GAAG,CAACC,IAAD,EAAOb,cAAP,EAAuB;IACzBA,cAAc,GAAGA,cAAc,IAAIL,qBAAnC;IACA,MAAMmB,KAAK,GAAI,GAAED,IAAK,IAAGE,IAAI,CAACC,SAAL,CAAehB,cAAf,CAA+B,EAAxD;IACA,MAAMC,QAAQ,GAAG,KAAKS,MAAL,CAAYE,GAAZ,CAAgBE,KAAhB,CAAjB;IACA,IAAIb,QAAJ,EAAc,OAAOA,QAAP;;IACd,MAAMgB,WAAW,GAAG,KAAKC,OAAL,CAAaL,IAAb,EAAmBb,cAAnB,CAApB;;IACA,KAAKU,MAAL,CAAYS,GAAZ,CAAgBL,KAAhB,EAAuBG,WAAvB;IACA,OAAOA,WAAP;EACA;;EAEDC,OAAO,CAACL,IAAD,EAAOb,cAAP,EAAuB;IAC7B,MAAMoB,sBAAsB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBtB,cAAlB,CAA/B;IACAA,cAAc,GAAG,KAAKD,KAAL,CAAWC,cAAX,CAA0BQ,GAA1B,CAA8BK,IAA9B,EAAoCU,IAApC,CAAyCvB,cAAzC,CAAjB;IACA,MAAMC,QAAQ,GAAGT,OAAO,CAACgC,cAAR,CAAuBxB,cAAvB,CAAjB;;IACA,IAAI,CAACC,QAAL,EAAe;MACd,MAAM,IAAIwB,KAAJ,CAAU,qBAAV,CAAN;IACA;IACD;;;IACA,MAAMC,UAAU,GAAG,IAAIf,GAAJ,EAAnB;;IACAV,QAAQ,CAAC0B,WAAT,GAAuBvB,OAAO,IAAI;MACjC,MAAMwB,UAAU,GAAGF,UAAU,CAACd,GAAX,CAAeR,OAAf,CAAnB;MACA,IAAIwB,UAAU,KAAKC,SAAnB,EAA8B,OAAOD,UAAP;MAC9B,MAAME,aAAa,GAAGpC,iBAAiB,CAAC0B,sBAAD,EAAyBhB,OAAzB,CAAvC;MACA,MAAMH,QAAQ,GAAG,KAAKW,GAAL,CAASC,IAAT,EAAeiB,aAAf,CAAjB;MACAJ,UAAU,CAACP,GAAX,CAAef,OAAf,EAAwBH,QAAxB;MACA,OAAOA,QAAP;IACA,CAPD;;IAQA,KAAKF,KAAL,CAAWE,QAAX,CAAoBO,GAApB,CAAwBK,IAAxB,EAA8BU,IAA9B,CAAmCtB,QAAnC,EAA6CD,cAA7C;IACA,OAAOC,QAAP;EACA;;AA1DqD,CAAvD"},"metadata":{},"sourceType":"script"}