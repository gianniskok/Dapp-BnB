{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  Value\n} = require('./response-types');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"get\"]}\n   */\n  async function get(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Value) {\n        return uint8ArrayFromString(message.Extra, 'base64pad');\n      }\n    }\n\n    throw new Error('not found');\n  }\n\n  return get;\n});","map":{"version":3,"names":["configure","require","toUrlSearchParams","Value","fromString","uint8ArrayFromString","toString","uint8ArrayToString","module","exports","api","get","key","options","res","post","signal","searchParams","arg","Uint8Array","headers","message","ndjson","Type","Extra","Error"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/dht/get.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Value } = require('./response-types')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"get\"]}\n   */\n  async function get (key, options = {}) {\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Value) {\n        return uint8ArrayFromString(message.Extra, 'base64pad')\n      }\n    }\n\n    throw new Error('not found')\n  }\n\n  return get\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;EAAEE;AAAF,IAAYF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAM;EAAEG,UAAU,EAAEC;AAAd,IAAuCJ,OAAO,CAAC,yBAAD,CAApD;;AACA,MAAM;EAAEK,QAAQ,EAAEC;AAAZ,IAAmCN,OAAO,CAAC,uBAAD,CAAhD;AAEA;AACA;AACA;AACA;;;AAEAO,MAAM,CAACC,OAAP,GAAiBT,SAAS,CAACU,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,GAAf,CAAoBC,GAApB,EAAuC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACrC,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,SAAT,EAAoB;MACpCC,MAAM,EAAEH,OAAO,CAACG,MADoB;MAEpCC,YAAY,EAAEf,iBAAiB,CAAC;QAC9BgB,GAAG,EAAEN,GAAG,YAAYO,UAAf,GAA4BZ,kBAAkB,CAACK,GAAD,CAA9C,GAAsDA,GAD7B;QAE9B,GAAGC;MAF2B,CAAD,CAFK;MAMpCO,OAAO,EAAEP,OAAO,CAACO;IANmB,CAApB,CAAlB;;IASA,WAAW,MAAMC,OAAjB,IAA4BP,GAAG,CAACQ,MAAJ,EAA5B,EAA0C;MACxC,IAAID,OAAO,CAACE,IAAR,KAAiBpB,KAArB,EAA4B;QAC1B,OAAOE,oBAAoB,CAACgB,OAAO,CAACG,KAAT,EAAgB,WAAhB,CAA3B;MACD;IACF;;IAED,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAN;EACD;;EAED,OAAOd,GAAP;AACD,CAxByB,CAA1B"},"metadata":{},"sourceType":"script"}