{"ast":null,"code":"import { keccak_256 } from \"js-sha3\";\nimport { removeHexPrefix, addHexPrefix } from \"@walletconnect/encoding\";\nimport { convertUtf8ToHex, convertNumberToHex, convertUtf8ToBuffer } from \"./encoding\";\nimport { sanitizeHex, removeHexLeadingZeros } from \"./misc\";\nimport { isEmptyArray, isHexString, isEmptyString } from \"./validators\";\nexport function toChecksumAddress(address) {\n  address = removeHexPrefix(address.toLowerCase());\n  const hash = removeHexPrefix(keccak_256(convertUtf8ToBuffer(address)));\n  let checksum = \"\";\n\n  for (let i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) > 7) {\n      checksum += address[i].toUpperCase();\n    } else {\n      checksum += address[i];\n    }\n  }\n\n  return addHexPrefix(checksum);\n}\nexport const isValidAddress = address => {\n  if (!address) {\n    return false;\n  } else if (address.toLowerCase().substring(0, 2) !== \"0x\") {\n    return false;\n  } else if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    return false;\n  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n    return true;\n  } else {\n    return address === toChecksumAddress(address);\n  }\n};\nexport function parsePersonalSign(params) {\n  if (!isEmptyArray(params) && !isHexString(params[0])) {\n    params[0] = convertUtf8ToHex(params[0]);\n  }\n\n  return params;\n}\nexport function parseTransactionData(txData) {\n  if (typeof txData.type !== \"undefined\" && txData.type !== \"0\") return txData;\n\n  if (typeof txData.from === \"undefined\" || !isValidAddress(txData.from)) {\n    throw new Error(`Transaction object must include a valid 'from' value.`);\n  }\n\n  function parseHexValues(value) {\n    let result = value;\n\n    if (typeof value === \"number\" || typeof value === \"string\" && !isEmptyString(value)) {\n      if (!isHexString(value)) {\n        result = convertNumberToHex(value);\n      } else if (typeof value === \"string\") {\n        result = sanitizeHex(value);\n      }\n    }\n\n    if (typeof result === \"string\") {\n      result = removeHexLeadingZeros(result);\n    }\n\n    return result;\n  }\n\n  const txDataRPC = {\n    from: sanitizeHex(txData.from),\n    to: typeof txData.to === \"undefined\" ? undefined : sanitizeHex(txData.to),\n    gasPrice: typeof txData.gasPrice === \"undefined\" ? \"\" : parseHexValues(txData.gasPrice),\n    gas: typeof txData.gas === \"undefined\" ? typeof txData.gasLimit === \"undefined\" ? \"\" : parseHexValues(txData.gasLimit) : parseHexValues(txData.gas),\n    value: typeof txData.value === \"undefined\" ? \"\" : parseHexValues(txData.value),\n    nonce: typeof txData.nonce === \"undefined\" ? \"\" : parseHexValues(txData.nonce),\n    data: typeof txData.data === \"undefined\" ? \"\" : sanitizeHex(txData.data) || \"0x\"\n  };\n  const prunable = [\"gasPrice\", \"gas\", \"value\", \"nonce\"];\n  Object.keys(txDataRPC).forEach(key => {\n    if ((typeof txDataRPC[key] === \"undefined\" || typeof txDataRPC[key] === \"string\" && !txDataRPC[key].trim().length) && prunable.includes(key)) {\n      delete txDataRPC[key];\n    }\n  });\n  return txDataRPC;\n}","map":{"version":3,"mappings":"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","names":["keccak_256","removeHexPrefix","addHexPrefix","convertUtf8ToHex","convertNumberToHex","convertUtf8ToBuffer","sanitizeHex","removeHexLeadingZeros","isEmptyArray","isHexString","isEmptyString","toChecksumAddress","address","toLowerCase","hash","checksum","i","length","parseInt","toUpperCase","isValidAddress","substring","test","parsePersonalSign","params","parseTransactionData","txData","type","from","Error","parseHexValues","value","result","txDataRPC","to","undefined","gasPrice","gas","gasLimit","nonce","data","prunable","Object","keys","forEach","key","trim","includes"],"sourceRoot":"","sources":["../../src/ethereum.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}