{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function* ls(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path');\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    });\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry));\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result));\n      }\n    }\n  }\n\n  return ls;\n});\n/**\n * @param {*} entry\n */\n\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash);\n  }\n\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}","map":{"version":3,"names":["CID","require","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","ls","path","options","Error","res","post","signal","searchParams","arg","asCID","long","stream","headers","result","ndjson","entry","Entries","toCoreInterface","hash","cid","parse","type"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/files/ls.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,sCAAD,CAAnC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,EAAjB,CAAqBC,IAArB,EAAyC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IACvC,IAAI,CAACD,IAAL,EAAW;MACT,MAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;IACD;;IAED,MAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,UAAT,EAAqB;MACrCC,MAAM,EAAEJ,OAAO,CAACI,MADqB;MAErCC,YAAY,EAAEX,iBAAiB,CAAC;QAC9BY,GAAG,EAAEhB,GAAG,CAACiB,KAAJ,CAAUR,IAAV,IAAmB,SAAQA,IAAK,EAAhC,GAAoCA,IADX;QAE9B;QACAS,IAAI,EAAE,IAHwB;QAI9B,GAAGR,OAJ2B;QAK9BS,MAAM,EAAE;MALsB,CAAD,CAFM;MASrCC,OAAO,EAAEV,OAAO,CAACU;IAToB,CAArB,CAAlB;;IAYA,WAAW,MAAMC,MAAjB,IAA2BT,GAAG,CAACU,MAAJ,EAA3B,EAAyC;MACvC;MACA,IAAI,aAAaD,MAAjB,EAAyB;QACvB,KAAK,MAAME,KAAX,IAAoBF,MAAM,CAACG,OAAP,IAAkB,EAAtC,EAA0C;UACxC,MAAMC,eAAe,CAACvB,mBAAmB,CAACqB,KAAD,CAApB,CAArB;QACD;MACF,CAJD,MAIO;QACL,MAAME,eAAe,CAACvB,mBAAmB,CAACmB,MAAD,CAApB,CAArB;MACD;IACF;EACF;;EACD,OAAOb,EAAP;AACD,CAjCyB,CAA1B;AAmCA;AACA;AACA;;AACA,SAASiB,eAAT,CAA0BF,KAA1B,EAAiC;EAC/B,IAAIA,KAAK,CAACG,IAAV,EAAgB;IACdH,KAAK,CAACI,GAAN,GAAY3B,GAAG,CAAC4B,KAAJ,CAAUL,KAAK,CAACG,IAAhB,CAAZ;EACD;;EAED,OAAOH,KAAK,CAACG,IAAb;EAEAH,KAAK,CAACM,IAAN,GAAaN,KAAK,CAACM,IAAN,KAAe,CAAf,GAAmB,WAAnB,GAAiC,MAA9C;EAEA,OAAON,KAAP;AACD"},"metadata":{},"sourceType":"script"}