{"ast":null,"code":"/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.URI = global.URI || {});\n})(this, function (exports) {\n  'use strict';\n\n  function merge() {\n    for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {\n      sets[_key] = arguments[_key];\n    }\n\n    if (sets.length > 1) {\n      sets[0] = sets[0].slice(0, -1);\n      var xl = sets.length - 1;\n\n      for (var x = 1; x < xl; ++x) {\n        sets[x] = sets[x].slice(1, -1);\n      }\n\n      sets[xl] = sets[xl].slice(1);\n      return sets.join('');\n    } else {\n      return sets[0];\n    }\n  }\n\n  function subexp(str) {\n    return \"(?:\" + str + \")\";\n  }\n\n  function typeOf(o) {\n    return o === undefined ? \"undefined\" : o === null ? \"null\" : Object.prototype.toString.call(o).split(\" \").pop().split(\"]\").shift().toLowerCase();\n  }\n\n  function toUpperCase(str) {\n    return str.toUpperCase();\n  }\n\n  function toArray(obj) {\n    return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== \"number\" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];\n  }\n\n  function assign(target, source) {\n    var obj = target;\n\n    if (source) {\n      for (var key in source) {\n        obj[key] = source[key];\n      }\n    }\n\n    return obj;\n  }\n\n  function buildExps(isIRI) {\n    var ALPHA$$ = \"[A-Za-z]\",\n        CR$ = \"[\\\\x0D]\",\n        DIGIT$$ = \"[0-9]\",\n        DQUOTE$$ = \"[\\\\x22]\",\n        HEXDIG$$ = merge(DIGIT$$, \"[A-Fa-f]\"),\n        //case-insensitive\n    LF$$ = \"[\\\\x0A]\",\n        SP$$ = \"[\\\\x20]\",\n        PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)),\n        //expanded\n    GEN_DELIMS$$ = \"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\",\n        SUB_DELIMS$$ = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\",\n        RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),\n        UCSCHAR$$ = isIRI ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\",\n        //subset, excludes bidi control characters\n    IPRIVATE$$ = isIRI ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\",\n        //subset\n    UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, \"[\\\\-\\\\.\\\\_\\\\~]\", UCSCHAR$$),\n        SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\") + \"*\"),\n        USERINFO$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\")) + \"*\"),\n        DEC_OCTET$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"[1-9]\" + DIGIT$$) + \"|\" + DIGIT$$),\n        DEC_OCTET_RELAXED$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"0?[1-9]\" + DIGIT$$) + \"|0?0?\" + DIGIT$$),\n        //relaxed parsing rules\n    IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$),\n        H16$ = subexp(HEXDIG$$ + \"{1,4}\"),\n        LS32$ = subexp(subexp(H16$ + \"\\\\:\" + H16$) + \"|\" + IPV4ADDRESS$),\n        IPV6ADDRESS1$ = subexp(subexp(H16$ + \"\\\\:\") + \"{6}\" + LS32$),\n        //                           6( h16 \":\" ) ls32\n    IPV6ADDRESS2$ = subexp(\"\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{5}\" + LS32$),\n        //                      \"::\" 5( h16 \":\" ) ls32\n    IPV6ADDRESS3$ = subexp(subexp(H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{4}\" + LS32$),\n        //[               h16 ] \"::\" 4( h16 \":\" ) ls32\n    IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,1}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{3}\" + LS32$),\n        //[ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n    IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,2}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{2}\" + LS32$),\n        //[ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n    IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,3}\" + H16$) + \"?\\\\:\\\\:\" + H16$ + \"\\\\:\" + LS32$),\n        //[ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n    IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,4}\" + H16$) + \"?\\\\:\\\\:\" + LS32$),\n        //[ *4( h16 \":\" ) h16 ] \"::\"              ls32\n    IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,5}\" + H16$) + \"?\\\\:\\\\:\" + H16$),\n        //[ *5( h16 \":\" ) h16 ] \"::\"              h16\n    IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,6}\" + H16$) + \"?\\\\:\\\\:\"),\n        //[ *6( h16 \":\" ) h16 ] \"::\"\n    IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join(\"|\")),\n        ZONEID$ = subexp(subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$) + \"+\"),\n        //RFC 6874\n    IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + \"\\\\%25\" + ZONEID$),\n        //RFC 6874\n    IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + ZONEID$),\n        //RFC 6874, with relaxed parsing rules\n    IPVFUTURE$ = subexp(\"[vV]\" + HEXDIG$$ + \"+\\\\.\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\") + \"+\"),\n        IP_LITERAL$ = subexp(\"\\\\[\" + subexp(IPV6ADDRZ_RELAXED$ + \"|\" + IPV6ADDRESS$ + \"|\" + IPVFUTURE$) + \"\\\\]\"),\n        //RFC 6874\n    REG_NAME$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$)) + \"*\"),\n        HOST$ = subexp(IP_LITERAL$ + \"|\" + IPV4ADDRESS$ + \"(?!\" + REG_NAME$ + \")\" + \"|\" + REG_NAME$),\n        PORT$ = subexp(DIGIT$$ + \"*\"),\n        AUTHORITY$ = subexp(subexp(USERINFO$ + \"@\") + \"?\" + HOST$ + subexp(\"\\\\:\" + PORT$) + \"?\"),\n        PCHAR$ = subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@]\")),\n        SEGMENT$ = subexp(PCHAR$ + \"*\"),\n        SEGMENT_NZ$ = subexp(PCHAR$ + \"+\"),\n        SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\@]\")) + \"+\"),\n        PATH_ABEMPTY$ = subexp(subexp(\"\\\\/\" + SEGMENT$) + \"*\"),\n        PATH_ABSOLUTE$ = subexp(\"\\\\/\" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + \"?\"),\n        //simplified\n    PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),\n        //simplified\n    PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),\n        //simplified\n    PATH_EMPTY$ = \"(?!\" + PCHAR$ + \")\",\n        PATH$ = subexp(PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n        QUERY$ = subexp(subexp(PCHAR$ + \"|\" + merge(\"[\\\\/\\\\?]\", IPRIVATE$$)) + \"*\"),\n        FRAGMENT$ = subexp(subexp(PCHAR$ + \"|[\\\\/\\\\?]\") + \"*\"),\n        HIER_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n        URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n        RELATIVE_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$),\n        RELATIVE$ = subexp(RELATIVE_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n        URI_REFERENCE$ = subexp(URI$ + \"|\" + RELATIVE$),\n        ABSOLUTE_URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\"),\n        GENERIC_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n        RELATIVE_REF$ = \"^(){0}\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n        ABSOLUTE_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?$\",\n        SAMEDOC_REF$ = \"^\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n        AUTHORITY_REF$ = \"^\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?$\";\n    return {\n      NOT_SCHEME: new RegExp(merge(\"[^]\", ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\"), \"g\"),\n      NOT_USERINFO: new RegExp(merge(\"[^\\\\%\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n      NOT_HOST: new RegExp(merge(\"[^\\\\%\\\\[\\\\]\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n      NOT_PATH: new RegExp(merge(\"[^\\\\%\\\\/\\\\:\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n      NOT_PATH_NOSCHEME: new RegExp(merge(\"[^\\\\%\\\\/\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n      NOT_QUERY: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\", IPRIVATE$$), \"g\"),\n      NOT_FRAGMENT: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\n      ESCAPE: new RegExp(merge(\"[^]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n      UNRESERVED: new RegExp(UNRESERVED$$, \"g\"),\n      OTHER_CHARS: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, RESERVED$$), \"g\"),\n      PCT_ENCODED: new RegExp(PCT_ENCODED$, \"g\"),\n      IPV4ADDRESS: new RegExp(\"^(\" + IPV4ADDRESS$ + \")$\"),\n      IPV6ADDRESS: new RegExp(\"^\\\\[?(\" + IPV6ADDRESS$ + \")\" + subexp(subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + \"(\" + ZONEID$ + \")\") + \"?\\\\]?$\") //RFC 6874, with relaxed parsing rules\n\n    };\n  }\n\n  var URI_PROTOCOL = buildExps(false);\n  var IRI_PROTOCOL = buildExps(true);\n\n  var slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  var toConsumableArray = function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  };\n  /** Highest positive signed 32-bit float value */\n\n\n  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n  /** Bootstring parameters */\n\n  var base = 36;\n  var tMin = 1;\n  var tMax = 26;\n  var skew = 38;\n  var damp = 700;\n  var initialBias = 72;\n  var initialN = 128; // 0x80\n\n  var delimiter = '-'; // '\\x2D'\n\n  /** Regular expressions */\n\n  var regexPunycode = /^xn--/;\n  var regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\n\n  var regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n  /** Error messages */\n\n  var errors = {\n    'overflow': 'Overflow: input needs wider integers to process',\n    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n    'invalid-input': 'Invalid input'\n  };\n  /** Convenience shortcuts */\n\n  var baseMinusTMin = base - tMin;\n  var floor = Math.floor;\n  var stringFromCharCode = String.fromCharCode;\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A generic error utility function.\n   * @private\n   * @param {String} type The error type.\n   * @returns {Error} Throws a `RangeError` with the applicable error message.\n   */\n\n  function error$1(type) {\n    throw new RangeError(errors[type]);\n  }\n  /**\n   * A generic `Array#map` utility function.\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} callback The function that gets called for every array\n   * item.\n   * @returns {Array} A new array of values returned by the callback function.\n   */\n\n\n  function map(array, fn) {\n    var result = [];\n    var length = array.length;\n\n    while (length--) {\n      result[length] = fn(array[length]);\n    }\n\n    return result;\n  }\n  /**\n   * A simple `Array#map`-like wrapper to work with domain name strings or email\n   * addresses.\n   * @private\n   * @param {String} domain The domain name or email address.\n   * @param {Function} callback The function that gets called for every\n   * character.\n   * @returns {Array} A new string of characters returned by the callback\n   * function.\n   */\n\n\n  function mapDomain(string, fn) {\n    var parts = string.split('@');\n    var result = '';\n\n    if (parts.length > 1) {\n      // In email addresses, only the domain name should be punycoded. Leave\n      // the local part (i.e. everything up to `@`) intact.\n      result = parts[0] + '@';\n      string = parts[1];\n    } // Avoid `split(regex)` for IE8 compatibility. See #17.\n\n\n    string = string.replace(regexSeparators, '\\x2E');\n    var labels = string.split('.');\n    var encoded = map(labels, fn).join('.');\n    return result + encoded;\n  }\n  /**\n   * Creates an array containing the numeric code points of each Unicode\n   * character in the string. While JavaScript uses UCS-2 internally,\n   * this function will convert a pair of surrogate halves (each of which\n   * UCS-2 exposes as separate characters) into a single code point,\n   * matching UTF-16.\n   * @see `punycode.ucs2.encode`\n   * @see <https://mathiasbynens.be/notes/javascript-encoding>\n   * @memberOf punycode.ucs2\n   * @name decode\n   * @param {String} string The Unicode input string (UCS-2).\n   * @returns {Array} The new array of code points.\n   */\n\n\n  function ucs2decode(string) {\n    var output = [];\n    var counter = 0;\n    var length = string.length;\n\n    while (counter < length) {\n      var value = string.charCodeAt(counter++);\n\n      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n        // It's a high surrogate, and there is a next character.\n        var extra = string.charCodeAt(counter++);\n\n        if ((extra & 0xFC00) == 0xDC00) {\n          // Low surrogate.\n          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n        } else {\n          // It's an unmatched surrogate; only append this code unit, in case the\n          // next code unit is the high surrogate of a surrogate pair.\n          output.push(value);\n          counter--;\n        }\n      } else {\n        output.push(value);\n      }\n    }\n\n    return output;\n  }\n  /**\n   * Creates a string based on an array of numeric code points.\n   * @see `punycode.ucs2.decode`\n   * @memberOf punycode.ucs2\n   * @name encode\n   * @param {Array} codePoints The array of numeric code points.\n   * @returns {String} The new Unicode string (UCS-2).\n   */\n\n\n  var ucs2encode = function ucs2encode(array) {\n    return String.fromCodePoint.apply(String, toConsumableArray(array));\n  };\n  /**\n   * Converts a basic code point into a digit/integer.\n   * @see `digitToBasic()`\n   * @private\n   * @param {Number} codePoint The basic numeric code point value.\n   * @returns {Number} The numeric value of a basic code point (for use in\n   * representing integers) in the range `0` to `base - 1`, or `base` if\n   * the code point does not represent a value.\n   */\n\n\n  var basicToDigit = function basicToDigit(codePoint) {\n    if (codePoint - 0x30 < 0x0A) {\n      return codePoint - 0x16;\n    }\n\n    if (codePoint - 0x41 < 0x1A) {\n      return codePoint - 0x41;\n    }\n\n    if (codePoint - 0x61 < 0x1A) {\n      return codePoint - 0x61;\n    }\n\n    return base;\n  };\n  /**\n   * Converts a digit/integer into a basic code point.\n   * @see `basicToDigit()`\n   * @private\n   * @param {Number} digit The numeric value of a basic code point.\n   * @returns {Number} The basic code point whose value (when used for\n   * representing integers) is `digit`, which needs to be in the range\n   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n   * used; else, the lowercase form is used. The behavior is undefined\n   * if `flag` is non-zero and `digit` has no uppercase form.\n   */\n\n\n  var digitToBasic = function digitToBasic(digit, flag) {\n    //  0..25 map to ASCII a..z or A..Z\n    // 26..35 map to ASCII 0..9\n    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n  };\n  /**\n   * Bias adaptation function as per section 3.4 of RFC 3492.\n   * https://tools.ietf.org/html/rfc3492#section-3.4\n   * @private\n   */\n\n\n  var adapt = function adapt(delta, numPoints, firstTime) {\n    var k = 0;\n    delta = firstTime ? floor(delta / damp) : delta >> 1;\n    delta += floor(delta / numPoints);\n\n    for (;\n    /* no initialization */\n    delta > baseMinusTMin * tMax >> 1; k += base) {\n      delta = floor(delta / baseMinusTMin);\n    }\n\n    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n  };\n  /**\n   * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n   * symbols.\n   * @memberOf punycode\n   * @param {String} input The Punycode string of ASCII-only symbols.\n   * @returns {String} The resulting string of Unicode symbols.\n   */\n\n\n  var decode = function decode(input) {\n    // Don't use UCS-2.\n    var output = [];\n    var inputLength = input.length;\n    var i = 0;\n    var n = initialN;\n    var bias = initialBias; // Handle the basic code points: let `basic` be the number of input code\n    // points before the last delimiter, or `0` if there is none, then copy\n    // the first basic code points to the output.\n\n    var basic = input.lastIndexOf(delimiter);\n\n    if (basic < 0) {\n      basic = 0;\n    }\n\n    for (var j = 0; j < basic; ++j) {\n      // if it's not a basic code point\n      if (input.charCodeAt(j) >= 0x80) {\n        error$1('not-basic');\n      }\n\n      output.push(input.charCodeAt(j));\n    } // Main decoding loop: start just after the last delimiter if any basic code\n    // points were copied; start at the beginning otherwise.\n\n\n    for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;)\n    /* no final expression */\n    {\n      // `index` is the index of the next character to be consumed.\n      // Decode a generalized variable-length integer into `delta`,\n      // which gets added to `i`. The overflow checking is easier\n      // if we increase `i` as we go, then subtract off its starting\n      // value at the end to obtain `delta`.\n      var oldi = i;\n\n      for (var w = 1, k = base;;\n      /* no condition */\n      k += base) {\n        if (index >= inputLength) {\n          error$1('invalid-input');\n        }\n\n        var digit = basicToDigit(input.charCodeAt(index++));\n\n        if (digit >= base || digit > floor((maxInt - i) / w)) {\n          error$1('overflow');\n        }\n\n        i += digit * w;\n        var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n        if (digit < t) {\n          break;\n        }\n\n        var baseMinusT = base - t;\n\n        if (w > floor(maxInt / baseMinusT)) {\n          error$1('overflow');\n        }\n\n        w *= baseMinusT;\n      }\n\n      var out = output.length + 1;\n      bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,\n      // incrementing `n` each time, so we'll fix that now:\n\n      if (floor(i / out) > maxInt - n) {\n        error$1('overflow');\n      }\n\n      n += floor(i / out);\n      i %= out; // Insert `n` at position `i` of the output.\n\n      output.splice(i++, 0, n);\n    }\n\n    return String.fromCodePoint.apply(String, output);\n  };\n  /**\n   * Converts a string of Unicode symbols (e.g. a domain name label) to a\n   * Punycode string of ASCII-only symbols.\n   * @memberOf punycode\n   * @param {String} input The string of Unicode symbols.\n   * @returns {String} The resulting Punycode string of ASCII-only symbols.\n   */\n\n\n  var encode = function encode(input) {\n    var output = []; // Convert the input in UCS-2 to an array of Unicode code points.\n\n    input = ucs2decode(input); // Cache the length.\n\n    var inputLength = input.length; // Initialize the state.\n\n    var n = initialN;\n    var delta = 0;\n    var bias = initialBias; // Handle the basic code points.\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _currentValue2 = _step.value;\n\n        if (_currentValue2 < 0x80) {\n          output.push(stringFromCharCode(_currentValue2));\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var basicLength = output.length;\n    var handledCPCount = basicLength; // `handledCPCount` is the number of code points that have been handled;\n    // `basicLength` is the number of basic code points.\n    // Finish the basic string with a delimiter unless it's empty.\n\n    if (basicLength) {\n      output.push(delimiter);\n    } // Main encoding loop:\n\n\n    while (handledCPCount < inputLength) {\n      // All non-basic code points < n have been handled already. Find the next\n      // larger one:\n      var m = maxInt;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var currentValue = _step2.value;\n\n          if (currentValue >= n && currentValue < m) {\n            m = currentValue;\n          }\n        } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n        // but guard against overflow.\n\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var handledCPCountPlusOne = handledCPCount + 1;\n\n      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n        error$1('overflow');\n      }\n\n      delta += (m - n) * handledCPCountPlusOne;\n      n = m;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _currentValue = _step3.value;\n\n          if (_currentValue < n && ++delta > maxInt) {\n            error$1('overflow');\n          }\n\n          if (_currentValue == n) {\n            // Represent delta as a generalized variable-length integer.\n            var q = delta;\n\n            for (var k = base;;\n            /* no condition */\n            k += base) {\n              var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n              if (q < t) {\n                break;\n              }\n\n              var qMinusT = q - t;\n              var baseMinusT = base - t;\n              output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n              q = floor(qMinusT / baseMinusT);\n            }\n\n            output.push(stringFromCharCode(digitToBasic(q, 0)));\n            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n            delta = 0;\n            ++handledCPCount;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      ++delta;\n      ++n;\n    }\n\n    return output.join('');\n  };\n  /**\n   * Converts a Punycode string representing a domain name or an email address\n   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n   * it doesn't matter if you call it on a string that has already been\n   * converted to Unicode.\n   * @memberOf punycode\n   * @param {String} input The Punycoded domain name or email address to\n   * convert to Unicode.\n   * @returns {String} The Unicode representation of the given Punycode\n   * string.\n   */\n\n\n  var toUnicode = function toUnicode(input) {\n    return mapDomain(input, function (string) {\n      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n    });\n  };\n  /**\n   * Converts a Unicode string representing a domain name or an email address to\n   * Punycode. Only the non-ASCII parts of the domain name will be converted,\n   * i.e. it doesn't matter if you call it with a domain that's already in\n   * ASCII.\n   * @memberOf punycode\n   * @param {String} input The domain name or email address to convert, as a\n   * Unicode string.\n   * @returns {String} The Punycode representation of the given domain name or\n   * email address.\n   */\n\n\n  var toASCII = function toASCII(input) {\n    return mapDomain(input, function (string) {\n      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;\n    });\n  };\n  /*--------------------------------------------------------------------------*/\n\n  /** Define the public API */\n\n\n  var punycode = {\n    /**\n     * A string representing the current Punycode.js version number.\n     * @memberOf punycode\n     * @type String\n     */\n    'version': '2.1.0',\n\n    /**\n     * An object of methods to convert from JavaScript's internal character\n     * representation (UCS-2) to Unicode code points, and back.\n     * @see <https://mathiasbynens.be/notes/javascript-encoding>\n     * @memberOf punycode\n     * @type Object\n     */\n    'ucs2': {\n      'decode': ucs2decode,\n      'encode': ucs2encode\n    },\n    'decode': decode,\n    'encode': encode,\n    'toASCII': toASCII,\n    'toUnicode': toUnicode\n  };\n  /**\n   * URI.js\n   *\n   * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.\n   * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n   * @see http://github.com/garycourt/uri-js\n   */\n\n  /**\n   * Copyright 2011 Gary Court. All rights reserved.\n   *\n   * Redistribution and use in source and binary forms, with or without modification, are\n   * permitted provided that the following conditions are met:\n   *\n   *    1. Redistributions of source code must retain the above copyright notice, this list of\n   *       conditions and the following disclaimer.\n   *\n   *    2. Redistributions in binary form must reproduce the above copyright notice, this list\n   *       of conditions and the following disclaimer in the documentation and/or other materials\n   *       provided with the distribution.\n   *\n   * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED\n   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n   * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR\n   * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n   * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n   * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   *\n   * The views and conclusions contained in the software and documentation are those of the\n   * authors and should not be interpreted as representing official policies, either expressed\n   * or implied, of Gary Court.\n   */\n\n  var SCHEMES = {};\n\n  function pctEncChar(chr) {\n    var c = chr.charCodeAt(0);\n    var e = void 0;\n    if (c < 16) e = \"%0\" + c.toString(16).toUpperCase();else if (c < 128) e = \"%\" + c.toString(16).toUpperCase();else if (c < 2048) e = \"%\" + (c >> 6 | 192).toString(16).toUpperCase() + \"%\" + (c & 63 | 128).toString(16).toUpperCase();else e = \"%\" + (c >> 12 | 224).toString(16).toUpperCase() + \"%\" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + \"%\" + (c & 63 | 128).toString(16).toUpperCase();\n    return e;\n  }\n\n  function pctDecChars(str) {\n    var newStr = \"\";\n    var i = 0;\n    var il = str.length;\n\n    while (i < il) {\n      var c = parseInt(str.substr(i + 1, 2), 16);\n\n      if (c < 128) {\n        newStr += String.fromCharCode(c);\n        i += 3;\n      } else if (c >= 194 && c < 224) {\n        if (il - i >= 6) {\n          var c2 = parseInt(str.substr(i + 4, 2), 16);\n          newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);\n        } else {\n          newStr += str.substr(i, 6);\n        }\n\n        i += 6;\n      } else if (c >= 224) {\n        if (il - i >= 9) {\n          var _c = parseInt(str.substr(i + 4, 2), 16);\n\n          var c3 = parseInt(str.substr(i + 7, 2), 16);\n          newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);\n        } else {\n          newStr += str.substr(i, 9);\n        }\n\n        i += 9;\n      } else {\n        newStr += str.substr(i, 3);\n        i += 3;\n      }\n    }\n\n    return newStr;\n  }\n\n  function _normalizeComponentEncoding(components, protocol) {\n    function decodeUnreserved(str) {\n      var decStr = pctDecChars(str);\n      return !decStr.match(protocol.UNRESERVED) ? str : decStr;\n    }\n\n    if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, \"\");\n    if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    return components;\n  }\n\n  function _stripLeadingZeros(str) {\n    return str.replace(/^0*(.*)/, \"$1\") || \"0\";\n  }\n\n  function _normalizeIPv4(host, protocol) {\n    var matches = host.match(protocol.IPV4ADDRESS) || [];\n\n    var _matches = slicedToArray(matches, 2),\n        address = _matches[1];\n\n    if (address) {\n      return address.split(\".\").map(_stripLeadingZeros).join(\".\");\n    } else {\n      return host;\n    }\n  }\n\n  function _normalizeIPv6(host, protocol) {\n    var matches = host.match(protocol.IPV6ADDRESS) || [];\n\n    var _matches2 = slicedToArray(matches, 3),\n        address = _matches2[1],\n        zone = _matches2[2];\n\n    if (address) {\n      var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),\n          _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),\n          last = _address$toLowerCase$2[0],\n          first = _address$toLowerCase$2[1];\n\n      var firstFields = first ? first.split(\":\").map(_stripLeadingZeros) : [];\n      var lastFields = last.split(\":\").map(_stripLeadingZeros);\n      var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);\n      var fieldCount = isLastFieldIPv4Address ? 7 : 8;\n      var lastFieldsStart = lastFields.length - fieldCount;\n      var fields = Array(fieldCount);\n\n      for (var x = 0; x < fieldCount; ++x) {\n        fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';\n      }\n\n      if (isLastFieldIPv4Address) {\n        fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);\n      }\n\n      var allZeroFields = fields.reduce(function (acc, field, index) {\n        if (!field || field === \"0\") {\n          var lastLongest = acc[acc.length - 1];\n\n          if (lastLongest && lastLongest.index + lastLongest.length === index) {\n            lastLongest.length++;\n          } else {\n            acc.push({\n              index: index,\n              length: 1\n            });\n          }\n        }\n\n        return acc;\n      }, []);\n      var longestZeroFields = allZeroFields.sort(function (a, b) {\n        return b.length - a.length;\n      })[0];\n      var newHost = void 0;\n\n      if (longestZeroFields && longestZeroFields.length > 1) {\n        var newFirst = fields.slice(0, longestZeroFields.index);\n        var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);\n        newHost = newFirst.join(\":\") + \"::\" + newLast.join(\":\");\n      } else {\n        newHost = fields.join(\":\");\n      }\n\n      if (zone) {\n        newHost += \"%\" + zone;\n      }\n\n      return newHost;\n    } else {\n      return host;\n    }\n  }\n\n  var URI_PARSE = /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:([^\\/?#@]*)@)?(\\[[^\\/?#\\]]+\\]|[^\\/?#:]*)(?:\\:(\\d*))?))?([^?#]*)(?:\\?([^#]*))?(?:#((?:.|\\n|\\r)*))?/i;\n  var NO_MATCH_IS_UNDEFINED = \"\".match(/(){0}/)[1] === undefined;\n\n  function parse(uriString) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var components = {};\n    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;\n    if (options.reference === \"suffix\") uriString = (options.scheme ? options.scheme + \":\" : \"\") + \"//\" + uriString;\n    var matches = uriString.match(URI_PARSE);\n\n    if (matches) {\n      if (NO_MATCH_IS_UNDEFINED) {\n        //store each component\n        components.scheme = matches[1];\n        components.userinfo = matches[3];\n        components.host = matches[4];\n        components.port = parseInt(matches[5], 10);\n        components.path = matches[6] || \"\";\n        components.query = matches[7];\n        components.fragment = matches[8]; //fix port number\n\n        if (isNaN(components.port)) {\n          components.port = matches[5];\n        }\n      } else {\n        //IE FIX for improper RegExp matching\n        //store each component\n        components.scheme = matches[1] || undefined;\n        components.userinfo = uriString.indexOf(\"@\") !== -1 ? matches[3] : undefined;\n        components.host = uriString.indexOf(\"//\") !== -1 ? matches[4] : undefined;\n        components.port = parseInt(matches[5], 10);\n        components.path = matches[6] || \"\";\n        components.query = uriString.indexOf(\"?\") !== -1 ? matches[7] : undefined;\n        components.fragment = uriString.indexOf(\"#\") !== -1 ? matches[8] : undefined; //fix port number\n\n        if (isNaN(components.port)) {\n          components.port = uriString.match(/\\/\\/(?:.|\\n)*\\:(?:\\/|\\?|\\#|$)/) ? matches[4] : undefined;\n        }\n      }\n\n      if (components.host) {\n        //normalize IP hosts\n        components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);\n      } //determine reference type\n\n\n      if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {\n        components.reference = \"same-document\";\n      } else if (components.scheme === undefined) {\n        components.reference = \"relative\";\n      } else if (components.fragment === undefined) {\n        components.reference = \"absolute\";\n      } else {\n        components.reference = \"uri\";\n      } //check for reference errors\n\n\n      if (options.reference && options.reference !== \"suffix\" && options.reference !== components.reference) {\n        components.error = components.error || \"URI is not a \" + options.reference + \" reference.\";\n      } //find scheme handler\n\n\n      var schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()]; //check if scheme can't handle IRIs\n\n      if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n        //if host component is a domain name\n        if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {\n          //convert Unicode IDN -> ASCII IDN\n          try {\n            components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());\n          } catch (e) {\n            components.error = components.error || \"Host's domain name can not be converted to ASCII via punycode: \" + e;\n          }\n        } //convert IRI -> URI\n\n\n        _normalizeComponentEncoding(components, URI_PROTOCOL);\n      } else {\n        //normalize encodings\n        _normalizeComponentEncoding(components, protocol);\n      } //perform scheme specific parsing\n\n\n      if (schemeHandler && schemeHandler.parse) {\n        schemeHandler.parse(components, options);\n      }\n    } else {\n      components.error = components.error || \"URI can not be parsed.\";\n    }\n\n    return components;\n  }\n\n  function _recomposeAuthority(components, options) {\n    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;\n    var uriTokens = [];\n\n    if (components.userinfo !== undefined) {\n      uriTokens.push(components.userinfo);\n      uriTokens.push(\"@\");\n    }\n\n    if (components.host !== undefined) {\n      //normalize IP hosts, add brackets and escape zone separator for IPv6\n      uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {\n        return \"[\" + $1 + ($2 ? \"%25\" + $2 : \"\") + \"]\";\n      }));\n    }\n\n    if (typeof components.port === \"number\" || typeof components.port === \"string\") {\n      uriTokens.push(\":\");\n      uriTokens.push(String(components.port));\n    }\n\n    return uriTokens.length ? uriTokens.join(\"\") : undefined;\n  }\n\n  var RDS1 = /^\\.\\.?\\//;\n  var RDS2 = /^\\/\\.(\\/|$)/;\n  var RDS3 = /^\\/\\.\\.(\\/|$)/;\n  var RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/;\n\n  function removeDotSegments(input) {\n    var output = [];\n\n    while (input.length) {\n      if (input.match(RDS1)) {\n        input = input.replace(RDS1, \"\");\n      } else if (input.match(RDS2)) {\n        input = input.replace(RDS2, \"/\");\n      } else if (input.match(RDS3)) {\n        input = input.replace(RDS3, \"/\");\n        output.pop();\n      } else if (input === \".\" || input === \"..\") {\n        input = \"\";\n      } else {\n        var im = input.match(RDS5);\n\n        if (im) {\n          var s = im[0];\n          input = input.slice(s.length);\n          output.push(s);\n        } else {\n          throw new Error(\"Unexpected dot segment condition\");\n        }\n      }\n    }\n\n    return output.join(\"\");\n  }\n\n  function serialize(components) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;\n    var uriTokens = []; //find scheme handler\n\n    var schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()]; //perform scheme specific serialization\n\n    if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);\n\n    if (components.host) {\n      //if host component is an IPv6 address\n      if (protocol.IPV6ADDRESS.test(components.host)) {} //TODO: normalize IPv6 address as per RFC 5952\n      //if host component is a domain name\n      else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {\n        //convert IDN via punycode\n        try {\n          components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);\n        } catch (e) {\n          components.error = components.error || \"Host's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n        }\n      }\n    } //normalize encoding\n\n\n    _normalizeComponentEncoding(components, protocol);\n\n    if (options.reference !== \"suffix\" && components.scheme) {\n      uriTokens.push(components.scheme);\n      uriTokens.push(\":\");\n    }\n\n    var authority = _recomposeAuthority(components, options);\n\n    if (authority !== undefined) {\n      if (options.reference !== \"suffix\") {\n        uriTokens.push(\"//\");\n      }\n\n      uriTokens.push(authority);\n\n      if (components.path && components.path.charAt(0) !== \"/\") {\n        uriTokens.push(\"/\");\n      }\n    }\n\n    if (components.path !== undefined) {\n      var s = components.path;\n\n      if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n        s = removeDotSegments(s);\n      }\n\n      if (authority === undefined) {\n        s = s.replace(/^\\/\\//, \"/%2F\"); //don't allow the path to start with \"//\"\n      }\n\n      uriTokens.push(s);\n    }\n\n    if (components.query !== undefined) {\n      uriTokens.push(\"?\");\n      uriTokens.push(components.query);\n    }\n\n    if (components.fragment !== undefined) {\n      uriTokens.push(\"#\");\n      uriTokens.push(components.fragment);\n    }\n\n    return uriTokens.join(\"\"); //merge tokens into a string\n  }\n\n  function resolveComponents(base, relative) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var skipNormalization = arguments[3];\n    var target = {};\n\n    if (!skipNormalization) {\n      base = parse(serialize(base, options), options); //normalize base components\n\n      relative = parse(serialize(relative, options), options); //normalize relative components\n    }\n\n    options = options || {};\n\n    if (!options.tolerant && relative.scheme) {\n      target.scheme = relative.scheme; //target.authority = relative.authority;\n\n      target.userinfo = relative.userinfo;\n      target.host = relative.host;\n      target.port = relative.port;\n      target.path = removeDotSegments(relative.path || \"\");\n      target.query = relative.query;\n    } else {\n      if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n        //target.authority = relative.authority;\n        target.userinfo = relative.userinfo;\n        target.host = relative.host;\n        target.port = relative.port;\n        target.path = removeDotSegments(relative.path || \"\");\n        target.query = relative.query;\n      } else {\n        if (!relative.path) {\n          target.path = base.path;\n\n          if (relative.query !== undefined) {\n            target.query = relative.query;\n          } else {\n            target.query = base.query;\n          }\n        } else {\n          if (relative.path.charAt(0) === \"/\") {\n            target.path = removeDotSegments(relative.path);\n          } else {\n            if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n              target.path = \"/\" + relative.path;\n            } else if (!base.path) {\n              target.path = relative.path;\n            } else {\n              target.path = base.path.slice(0, base.path.lastIndexOf(\"/\") + 1) + relative.path;\n            }\n\n            target.path = removeDotSegments(target.path);\n          }\n\n          target.query = relative.query;\n        } //target.authority = base.authority;\n\n\n        target.userinfo = base.userinfo;\n        target.host = base.host;\n        target.port = base.port;\n      }\n\n      target.scheme = base.scheme;\n    }\n\n    target.fragment = relative.fragment;\n    return target;\n  }\n\n  function resolve(baseURI, relativeURI, options) {\n    var schemelessOptions = assign({\n      scheme: 'null'\n    }, options);\n    return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);\n  }\n\n  function normalize(uri, options) {\n    if (typeof uri === \"string\") {\n      uri = serialize(parse(uri, options), options);\n    } else if (typeOf(uri) === \"object\") {\n      uri = parse(serialize(uri, options), options);\n    }\n\n    return uri;\n  }\n\n  function equal(uriA, uriB, options) {\n    if (typeof uriA === \"string\") {\n      uriA = serialize(parse(uriA, options), options);\n    } else if (typeOf(uriA) === \"object\") {\n      uriA = serialize(uriA, options);\n    }\n\n    if (typeof uriB === \"string\") {\n      uriB = serialize(parse(uriB, options), options);\n    } else if (typeOf(uriB) === \"object\") {\n      uriB = serialize(uriB, options);\n    }\n\n    return uriA === uriB;\n  }\n\n  function escapeComponent(str, options) {\n    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);\n  }\n\n  function unescapeComponent(str, options) {\n    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);\n  }\n\n  var handler = {\n    scheme: \"http\",\n    domainHost: true,\n    parse: function parse(components, options) {\n      //report missing host\n      if (!components.host) {\n        components.error = components.error || \"HTTP URIs must have a host.\";\n      }\n\n      return components;\n    },\n    serialize: function serialize(components, options) {\n      var secure = String(components.scheme).toLowerCase() === \"https\"; //normalize the default port\n\n      if (components.port === (secure ? 443 : 80) || components.port === \"\") {\n        components.port = undefined;\n      } //normalize the empty path\n\n\n      if (!components.path) {\n        components.path = \"/\";\n      } //NOTE: We do not parse query strings for HTTP URIs\n      //as WWW Form Url Encoded query strings are part of the HTML4+ spec,\n      //and not the HTTP spec.\n\n\n      return components;\n    }\n  };\n  var handler$1 = {\n    scheme: \"https\",\n    domainHost: handler.domainHost,\n    parse: handler.parse,\n    serialize: handler.serialize\n  };\n\n  function isSecure(wsComponents) {\n    return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === \"wss\";\n  } //RFC 6455\n\n\n  var handler$2 = {\n    scheme: \"ws\",\n    domainHost: true,\n    parse: function parse(components, options) {\n      var wsComponents = components; //indicate if the secure flag is set\n\n      wsComponents.secure = isSecure(wsComponents); //construct resouce name\n\n      wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');\n      wsComponents.path = undefined;\n      wsComponents.query = undefined;\n      return wsComponents;\n    },\n    serialize: function serialize(wsComponents, options) {\n      //normalize the default port\n      if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === \"\") {\n        wsComponents.port = undefined;\n      } //ensure scheme matches secure flag\n\n\n      if (typeof wsComponents.secure === 'boolean') {\n        wsComponents.scheme = wsComponents.secure ? 'wss' : 'ws';\n        wsComponents.secure = undefined;\n      } //reconstruct path from resource name\n\n\n      if (wsComponents.resourceName) {\n        var _wsComponents$resourc = wsComponents.resourceName.split('?'),\n            _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2),\n            path = _wsComponents$resourc2[0],\n            query = _wsComponents$resourc2[1];\n\n        wsComponents.path = path && path !== '/' ? path : undefined;\n        wsComponents.query = query;\n        wsComponents.resourceName = undefined;\n      } //forbid fragment component\n\n\n      wsComponents.fragment = undefined;\n      return wsComponents;\n    }\n  };\n  var handler$3 = {\n    scheme: \"wss\",\n    domainHost: handler$2.domainHost,\n    parse: handler$2.parse,\n    serialize: handler$2.serialize\n  };\n  var O = {};\n  var isIRI = true; //RFC 3986\n\n  var UNRESERVED$$ = \"[A-Za-z0-9\\\\-\\\\.\\\\_\\\\~\" + (isIRI ? \"\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF\" : \"\") + \"]\";\n  var HEXDIG$$ = \"[0-9A-Fa-f]\"; //case-insensitive\n\n  var PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)); //expanded\n  //RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =\n  //const ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\#\\\\$\\\\%\\\\&\\\\'\\\\*\\\\+\\\\-\\\\/\\\\=\\\\?\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n  //const WSP$$ = \"[\\\\x20\\\\x09]\";\n  //const OBS_QTEXT$$ = \"[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F]\";  //(%d1-8 / %d11-12 / %d14-31 / %d127)\n  //const QTEXT$$ = merge(\"[\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E]\", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext\n  //const VCHAR$$ = \"[\\\\x21-\\\\x7E]\";\n  //const WSP$$ = \"[\\\\x20\\\\x09]\";\n  //const OBS_QP$ = subexp(\"\\\\\\\\\" + merge(\"[\\\\x00\\\\x0D\\\\x0A]\", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext\n  //const FWS$ = subexp(subexp(WSP$$ + \"*\" + \"\\\\x0D\\\\x0A\") + \"?\" + WSP$$ + \"+\");\n  //const QUOTED_PAIR$ = subexp(subexp(\"\\\\\\\\\" + subexp(VCHAR$$ + \"|\" + WSP$$)) + \"|\" + OBS_QP$);\n  //const QUOTED_STRING$ = subexp('\\\\\"' + subexp(FWS$ + \"?\" + QCONTENT$) + \"*\" + FWS$ + \"?\" + '\\\\\"');\n\n  var ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\$\\\\%\\\\'\\\\*\\\\+\\\\-\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n  var QTEXT$$ = \"[\\\\!\\\\$\\\\%\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.0-9\\\\<\\\\>A-Z\\\\x5E-\\\\x7E]\";\n  var VCHAR$$ = merge(QTEXT$$, \"[\\\\\\\"\\\\\\\\]\");\n  var SOME_DELIMS$$ = \"[\\\\!\\\\$\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\:\\\\@]\";\n  var UNRESERVED = new RegExp(UNRESERVED$$, \"g\");\n  var PCT_ENCODED = new RegExp(PCT_ENCODED$, \"g\");\n  var NOT_LOCAL_PART = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", '[\\\\\"]', VCHAR$$), \"g\");\n  var NOT_HFNAME = new RegExp(merge(\"[^]\", UNRESERVED$$, SOME_DELIMS$$), \"g\");\n  var NOT_HFVALUE = NOT_HFNAME;\n\n  function decodeUnreserved(str) {\n    var decStr = pctDecChars(str);\n    return !decStr.match(UNRESERVED) ? str : decStr;\n  }\n\n  var handler$4 = {\n    scheme: \"mailto\",\n    parse: function parse$$1(components, options) {\n      var mailtoComponents = components;\n      var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(\",\") : [];\n      mailtoComponents.path = undefined;\n\n      if (mailtoComponents.query) {\n        var unknownHeaders = false;\n        var headers = {};\n        var hfields = mailtoComponents.query.split(\"&\");\n\n        for (var x = 0, xl = hfields.length; x < xl; ++x) {\n          var hfield = hfields[x].split(\"=\");\n\n          switch (hfield[0]) {\n            case \"to\":\n              var toAddrs = hfield[1].split(\",\");\n\n              for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {\n                to.push(toAddrs[_x]);\n              }\n\n              break;\n\n            case \"subject\":\n              mailtoComponents.subject = unescapeComponent(hfield[1], options);\n              break;\n\n            case \"body\":\n              mailtoComponents.body = unescapeComponent(hfield[1], options);\n              break;\n\n            default:\n              unknownHeaders = true;\n              headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);\n              break;\n          }\n        }\n\n        if (unknownHeaders) mailtoComponents.headers = headers;\n      }\n\n      mailtoComponents.query = undefined;\n\n      for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {\n        var addr = to[_x2].split(\"@\");\n\n        addr[0] = unescapeComponent(addr[0]);\n\n        if (!options.unicodeSupport) {\n          //convert Unicode IDN -> ASCII IDN\n          try {\n            addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());\n          } catch (e) {\n            mailtoComponents.error = mailtoComponents.error || \"Email address's domain name can not be converted to ASCII via punycode: \" + e;\n          }\n        } else {\n          addr[1] = unescapeComponent(addr[1], options).toLowerCase();\n        }\n\n        to[_x2] = addr.join(\"@\");\n      }\n\n      return mailtoComponents;\n    },\n    serialize: function serialize$$1(mailtoComponents, options) {\n      var components = mailtoComponents;\n      var to = toArray(mailtoComponents.to);\n\n      if (to) {\n        for (var x = 0, xl = to.length; x < xl; ++x) {\n          var toAddr = String(to[x]);\n          var atIdx = toAddr.lastIndexOf(\"@\");\n          var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);\n          var domain = toAddr.slice(atIdx + 1); //convert IDN via punycode\n\n          try {\n            domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);\n          } catch (e) {\n            components.error = components.error || \"Email address's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n          }\n\n          to[x] = localPart + \"@\" + domain;\n        }\n\n        components.path = to.join(\",\");\n      }\n\n      var headers = mailtoComponents.headers = mailtoComponents.headers || {};\n      if (mailtoComponents.subject) headers[\"subject\"] = mailtoComponents.subject;\n      if (mailtoComponents.body) headers[\"body\"] = mailtoComponents.body;\n      var fields = [];\n\n      for (var name in headers) {\n        if (headers[name] !== O[name]) {\n          fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + \"=\" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));\n        }\n      }\n\n      if (fields.length) {\n        components.query = fields.join(\"&\");\n      }\n\n      return components;\n    }\n  };\n  var URN_PARSE = /^([^\\:]+)\\:(.*)/; //RFC 2141\n\n  var handler$5 = {\n    scheme: \"urn\",\n    parse: function parse$$1(components, options) {\n      var matches = components.path && components.path.match(URN_PARSE);\n      var urnComponents = components;\n\n      if (matches) {\n        var scheme = options.scheme || urnComponents.scheme || \"urn\";\n        var nid = matches[1].toLowerCase();\n        var nss = matches[2];\n        var urnScheme = scheme + \":\" + (options.nid || nid);\n        var schemeHandler = SCHEMES[urnScheme];\n        urnComponents.nid = nid;\n        urnComponents.nss = nss;\n        urnComponents.path = undefined;\n\n        if (schemeHandler) {\n          urnComponents = schemeHandler.parse(urnComponents, options);\n        }\n      } else {\n        urnComponents.error = urnComponents.error || \"URN can not be parsed.\";\n      }\n\n      return urnComponents;\n    },\n    serialize: function serialize$$1(urnComponents, options) {\n      var scheme = options.scheme || urnComponents.scheme || \"urn\";\n      var nid = urnComponents.nid;\n      var urnScheme = scheme + \":\" + (options.nid || nid);\n      var schemeHandler = SCHEMES[urnScheme];\n\n      if (schemeHandler) {\n        urnComponents = schemeHandler.serialize(urnComponents, options);\n      }\n\n      var uriComponents = urnComponents;\n      var nss = urnComponents.nss;\n      uriComponents.path = (nid || options.nid) + \":\" + nss;\n      return uriComponents;\n    }\n  };\n  var UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/; //RFC 4122\n\n  var handler$6 = {\n    scheme: \"urn:uuid\",\n    parse: function parse(urnComponents, options) {\n      var uuidComponents = urnComponents;\n      uuidComponents.uuid = uuidComponents.nss;\n      uuidComponents.nss = undefined;\n\n      if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\n        uuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n      }\n\n      return uuidComponents;\n    },\n    serialize: function serialize(uuidComponents, options) {\n      var urnComponents = uuidComponents; //normalize UUID\n\n      urnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n      return urnComponents;\n    }\n  };\n  SCHEMES[handler.scheme] = handler;\n  SCHEMES[handler$1.scheme] = handler$1;\n  SCHEMES[handler$2.scheme] = handler$2;\n  SCHEMES[handler$3.scheme] = handler$3;\n  SCHEMES[handler$4.scheme] = handler$4;\n  SCHEMES[handler$5.scheme] = handler$5;\n  SCHEMES[handler$6.scheme] = handler$6;\n  exports.SCHEMES = SCHEMES;\n  exports.pctEncChar = pctEncChar;\n  exports.pctDecChars = pctDecChars;\n  exports.parse = parse;\n  exports.removeDotSegments = removeDotSegments;\n  exports.serialize = serialize;\n  exports.resolveComponents = resolveComponents;\n  exports.resolve = resolve;\n  exports.normalize = normalize;\n  exports.equal = equal;\n  exports.escapeComponent = escapeComponent;\n  exports.unescapeComponent = unescapeComponent;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"mappings":"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","names":["sets","length","slice","xl","x","join","str","o","undefined","Object","prototype","toString","call","split","pop","shift","toLowerCase","toUpperCase","obj","Array","setInterval","target","source","key","isIRI","ALPHA$$","CR$","DIGIT$$","DQUOTE$$","HEXDIG$$","merge","SP$$","PCT_ENCODED$","subexp","SUB_DELIMS$$","RESERVED$$","GEN_DELIMS$$","UCSCHAR$$","SCHEME$","USERINFO$","UNRESERVED$$","DEC_OCTET$","DEC_OCTET_RELAXED$","H16$","LS32$","IPV4ADDRESS$","IPV6ADDRESS1$","IPV6ADDRESS2$","IPV6ADDRESS3$","IPV6ADDRESS4$","IPV6ADDRESS5$","IPV6ADDRESS6$","IPV6ADDRESS7$","IPV6ADDRESS8$","IPV6ADDRESS9$","ZONEID$","IPV6ADDRESS$","IP_LITERAL$","IPV6ADDRZ_RELAXED$","IPVFUTURE$","HOST$","REG_NAME$","PORT$","AUTHORITY$","PCHAR$","SEGMENT$","SEGMENT_NZ$","SEGMENT_NZ_NC$","PATH_ABEMPTY$","PATH_ABSOLUTE$","PATH$","PATH_NOSCHEME$","PATH_ROOTLESS$","PATH_EMPTY$","QUERY$","IPRIVATE$$","FRAGMENT$","HIER_PART$","URI$","RELATIVE_PART$","RELATIVE$","URI_REFERENCE$","ABSOLUTE_URI$","GENERIC_REF$","RELATIVE_REF$","ABSOLUTE_REF$","SAMEDOC_REF$","AUTHORITY_REF$","RegExp","buildExps","maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","baseMinusTMin","floor","Math","stringFromCharCode","String","fromCharCode","error","type","RangeError","map","array","fn","result","mapDomain","string","parts","replace","labels","encoded","ucs2decode","output","counter","value","charCodeAt","extra","push","ucs2encode","fromCodePoint","basicToDigit","codePoint","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","decode","input","inputLength","i","n","bias","basic","lastIndexOf","j","index","oldi","w","t","baseMinusT","out","splice","encode","_step","currentValue","basicLength","handledCPCount","m","_step2","handledCPCountPlusOne","_step3","q","qMinusT","toUnicode","test","toASCII","punycode","SCHEMES","chr","c","e","newStr","il","parseInt","substr","c2","c3","components","protocol","decodeUnreserved","decStr","pctDecChars","match","UNRESERVED","scheme","PCT_ENCODED","NOT_SCHEME","userinfo","NOT_USERINFO","pctEncChar","host","NOT_HOST","path","NOT_PATH","NOT_PATH_NOSCHEME","query","NOT_QUERY","fragment","NOT_FRAGMENT","matches","IPV4ADDRESS","address","_stripLeadingZeros","IPV6ADDRESS","zone","reverse","last","first","firstFields","lastFields","isLastFieldIPv4Address","fieldCount","lastFieldsStart","fields","_normalizeIPv4","allZeroFields","reduce","acc","field","lastLongest","longestZeroFields","sort","a","b","newHost","newFirst","newLast","URI_PARSE","NO_MATCH_IS_UNDEFINED","uriString","options","iri","IRI_PROTOCOL","URI_PROTOCOL","reference","port","isNaN","indexOf","_normalizeIPv6","schemeHandler","unicodeSupport","domainHost","parse","uriTokens","_","$1","$2","RDS1","RDS2","RDS3","RDS5","im","s","Error","serialize","authority","_recomposeAuthority","charAt","absolutePath","removeDotSegments","relative","skipNormalization","tolerant","baseURI","relativeURI","schemelessOptions","assign","resolveComponents","uri","typeOf","uriA","uriB","ESCAPE","handler","secure","http","wsComponents","isSecure","resourceName","ws","O","ATEXT$$","QTEXT$$","VCHAR$$","SOME_DELIMS$$","NOT_LOCAL_PART","NOT_HFNAME","NOT_HFVALUE","mailtoComponents","to","unknownHeaders","headers","hfields","hfield","toAddrs","subject","unescapeComponent","body","addr","toArray","toAddr","atIdx","localPart","domain","name","URN_PARSE","urnComponents","nid","nss","urnScheme","uriComponents","UUID","uuidComponents","uuid","https","wss","mailto","urn"],"sources":["../../src/util.ts","../../src/regexps-uri.ts","../../src/regexps-iri.ts","../../node_modules/punycode/punycode.es6.js","../../src/uri.ts","../../src/schemes/http.ts","../../src/schemes/https.ts","../../src/schemes/ws.ts","../../src/schemes/wss.ts","../../src/schemes/mailto.ts","../../src/schemes/urn.ts","../../src/schemes/urn-uuid.ts","../../src/index.ts"],"sourcesContent":["export function merge(...sets:Array<string>):string {\n\tif (sets.length > 1) {\n\t\tsets[0] = sets[0].slice(0, -1);\n\t\tconst xl = sets.length - 1;\n\t\tfor (let x = 1; x < xl; ++x) {\n\t\t\tsets[x] = sets[x].slice(1, -1);\n\t\t}\n\t\tsets[xl] = sets[xl].slice(1);\n\t\treturn sets.join('');\n\t} else {\n\t\treturn sets[0];\n\t}\n}\n\nexport function subexp(str:string):string {\n\treturn \"(?:\" + str + \")\";\n}\n\nexport function typeOf(o:any):string {\n\treturn o === undefined ? \"undefined\" : (o === null ? \"null\" : Object.prototype.toString.call(o).split(\" \").pop().split(\"]\").shift().toLowerCase());\n}\n\nexport function toUpperCase(str:string):string {\n\treturn str.toUpperCase();\n}\n\nexport function toArray(obj:any):Array<any> {\n\treturn obj !== undefined && obj !== null ? (obj instanceof Array ? obj : (typeof obj.length !== \"number\" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj))) : [];\n}\n\n\nexport function assign(target: object, source: any): any {\n\tconst obj = target as any;\n\tif (source) {\n\t\tfor (const key in source) {\n\t\t\tobj[key] = source[key];\n\t\t}\n\t}\n\treturn obj;\n}","import { URIRegExps } from \"./uri\";\nimport { merge, subexp } from \"./util\";\n\nexport function buildExps(isIRI:boolean):URIRegExps {\n\tconst\n\t\tALPHA$$ = \"[A-Za-z]\",\n\t\tCR$ = \"[\\\\x0D]\",\n\t\tDIGIT$$ = \"[0-9]\",\n\t\tDQUOTE$$ = \"[\\\\x22]\",\n\t\tHEXDIG$$ = merge(DIGIT$$, \"[A-Fa-f]\"),  //case-insensitive\n\t\tLF$$ = \"[\\\\x0A]\",\n\t\tSP$$ = \"[\\\\x20]\",\n\t\tPCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)),  //expanded\n\t\tGEN_DELIMS$$ = \"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\",\n\t\tSUB_DELIMS$$ = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\",\n\t\tRESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),\n\t\tUCSCHAR$$ = isIRI ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\",  //subset, excludes bidi control characters\n\t\tIPRIVATE$$ = isIRI ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\",  //subset\n\t\tUNRESERVED$$ = merge(ALPHA$$, DIGIT$$, \"[\\\\-\\\\.\\\\_\\\\~]\", UCSCHAR$$),\n\t\tSCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\") + \"*\"),\n\t\tUSERINFO$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\")) + \"*\"),\n\t\tDEC_OCTET$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"[1-9]\" + DIGIT$$) + \"|\" + DIGIT$$),\n\t\tDEC_OCTET_RELAXED$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"0?[1-9]\" + DIGIT$$) + \"|0?0?\" + DIGIT$$),  //relaxed parsing rules\n\t\tIPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$),\n\t\tH16$ = subexp(HEXDIG$$ + \"{1,4}\"),\n\t\tLS32$ = subexp(subexp(H16$ + \"\\\\:\" + H16$) + \"|\" + IPV4ADDRESS$),\n\t\tIPV6ADDRESS1$ = subexp(                                                            subexp(H16$ + \"\\\\:\") + \"{6}\" + LS32$), //                           6( h16 \":\" ) ls32\n\t\tIPV6ADDRESS2$ = subexp(                                                 \"\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{5}\" + LS32$), //                      \"::\" 5( h16 \":\" ) ls32\n\t\tIPV6ADDRESS3$ = subexp(subexp(                                 H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{4}\" + LS32$), //[               h16 ] \"::\" 4( h16 \":\" ) ls32\n\t\tIPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,1}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{3}\" + LS32$), //[ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n\t\tIPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,2}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{2}\" + LS32$), //[ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n\t\tIPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,3}\" + H16$) + \"?\\\\:\\\\:\" +        H16$ + \"\\\\:\"          + LS32$), //[ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n\t\tIPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,4}\" + H16$) + \"?\\\\:\\\\:\"                                + LS32$), //[ *4( h16 \":\" ) h16 ] \"::\"              ls32\n\t\tIPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,5}\" + H16$) + \"?\\\\:\\\\:\"                                + H16$ ), //[ *5( h16 \":\" ) h16 ] \"::\"              h16\n\t\tIPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,6}\" + H16$) + \"?\\\\:\\\\:\"                                       ), //[ *6( h16 \":\" ) h16 ] \"::\"\n\t\tIPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join(\"|\")),\n\t\tZONEID$ = subexp(subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$) + \"+\"),  //RFC 6874\n\t\tIPV6ADDRZ$ = subexp(IPV6ADDRESS$ + \"\\\\%25\" + ZONEID$),  //RFC 6874\n\t\tIPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + ZONEID$),  //RFC 6874, with relaxed parsing rules\n\t\tIPVFUTURE$ = subexp(\"[vV]\" + HEXDIG$$ + \"+\\\\.\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\") + \"+\"),\n\t\tIP_LITERAL$ = subexp(\"\\\\[\" + subexp(IPV6ADDRZ_RELAXED$ + \"|\" + IPV6ADDRESS$ + \"|\" + IPVFUTURE$) + \"\\\\]\"),  //RFC 6874\n\t\tREG_NAME$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$)) + \"*\"),\n\t\tHOST$ = subexp(IP_LITERAL$ + \"|\" + IPV4ADDRESS$ + \"(?!\" + REG_NAME$ + \")\" + \"|\" + REG_NAME$),\n\t\tPORT$ = subexp(DIGIT$$ + \"*\"),\n\t\tAUTHORITY$ = subexp(subexp(USERINFO$ + \"@\") + \"?\" + HOST$ + subexp(\"\\\\:\" + PORT$) + \"?\"),\n\t\tPCHAR$ = subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@]\")),\n\t\tSEGMENT$ = subexp(PCHAR$ + \"*\"),\n\t\tSEGMENT_NZ$ = subexp(PCHAR$ + \"+\"),\n\t\tSEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\@]\")) + \"+\"),\n\t\tPATH_ABEMPTY$ = subexp(subexp(\"\\\\/\" + SEGMENT$) + \"*\"),\n\t\tPATH_ABSOLUTE$ = subexp(\"\\\\/\" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + \"?\"),  //simplified\n\t\tPATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),  //simplified\n\t\tPATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),  //simplified\n\t\tPATH_EMPTY$ = \"(?!\" + PCHAR$ + \")\",\n\t\tPATH$ = subexp(PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n\t\tQUERY$ = subexp(subexp(PCHAR$ + \"|\" + merge(\"[\\\\/\\\\?]\", IPRIVATE$$)) + \"*\"),\n\t\tFRAGMENT$ = subexp(subexp(PCHAR$ + \"|[\\\\/\\\\?]\") + \"*\"),\n\t\tHIER_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n\t\tURI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n\t\tRELATIVE_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$),\n\t\tRELATIVE$ = subexp(RELATIVE_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n\t\tURI_REFERENCE$ = subexp(URI$ + \"|\" + RELATIVE$),\n\t\tABSOLUTE_URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\"),\n\n\t\tGENERIC_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tRELATIVE_REF$ = \"^(){0}\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tABSOLUTE_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?$\",\n\t\tSAMEDOC_REF$ = \"^\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tAUTHORITY_REF$ = \"^\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?$\"\n\t;\n\n\treturn {\n\t\tNOT_SCHEME : new RegExp(merge(\"[^]\", ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\"), \"g\"),\n\t\tNOT_USERINFO : new RegExp(merge(\"[^\\\\%\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_HOST : new RegExp(merge(\"[^\\\\%\\\\[\\\\]\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_PATH : new RegExp(merge(\"[^\\\\%\\\\/\\\\:\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_PATH_NOSCHEME : new RegExp(merge(\"[^\\\\%\\\\/\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_QUERY : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\", IPRIVATE$$), \"g\"),\n\t\tNOT_FRAGMENT : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\n\t\tESCAPE : new RegExp(merge(\"[^]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tUNRESERVED : new RegExp(UNRESERVED$$, \"g\"),\n\t\tOTHER_CHARS : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, RESERVED$$), \"g\"),\n\t\tPCT_ENCODED : new RegExp(PCT_ENCODED$, \"g\"),\n\t\tIPV4ADDRESS : new RegExp(\"^(\" + IPV4ADDRESS$ + \")$\"),\n\t\tIPV6ADDRESS : new RegExp(\"^\\\\[?(\" + IPV6ADDRESS$ + \")\" + subexp(subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + \"(\" + ZONEID$ + \")\") + \"?\\\\]?$\")  //RFC 6874, with relaxed parsing rules\n\t};\n}\n\nexport default buildExps(false);\n","import { URIRegExps } from \"./uri\";\nimport { buildExps } from \"./regexps-uri\";\n\nexport default buildExps(true);\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport default punycode;\n","/**\n * URI.js\n *\n * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/uri-js\n */\n\n/**\n * Copyright 2011 Gary Court. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice, this list of\n *       conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above copyright notice, this list\n *       of conditions and the following disclaimer in the documentation and/or other materials\n *       provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation are those of the\n * authors and should not be interpreted as representing official policies, either expressed\n * or implied, of Gary Court.\n */\n\nimport URI_PROTOCOL from \"./regexps-uri\";\nimport IRI_PROTOCOL from \"./regexps-iri\";\nimport punycode from \"punycode\";\nimport { toUpperCase, typeOf, assign } from \"./util\";\n\nexport interface URIComponents {\n\tscheme?:string;\n\tuserinfo?:string;\n\thost?:string;\n\tport?:number|string;\n\tpath?:string;\n\tquery?:string;\n\tfragment?:string;\n\treference?:string;\n\terror?:string;\n}\n\nexport interface URIOptions {\n\tscheme?:string;\n\treference?:string;\n\ttolerant?:boolean;\n\tabsolutePath?:boolean;\n\tiri?:boolean;\n\tunicodeSupport?:boolean;\n\tdomainHost?:boolean;\n}\n\nexport interface URISchemeHandler<Components extends URIComponents = URIComponents, Options extends URIOptions = URIOptions, ParentComponents extends URIComponents = URIComponents> {\n\tscheme:string;\n\tparse(components:ParentComponents, options:Options):Components;\n\tserialize(components:Components, options:Options):ParentComponents;\n\tunicodeSupport?:boolean;\n\tdomainHost?:boolean;\n\tabsolutePath?:boolean;\n}\n\nexport interface URIRegExps {\n\tNOT_SCHEME : RegExp,\n\tNOT_USERINFO : RegExp,\n\tNOT_HOST : RegExp,\n\tNOT_PATH : RegExp,\n\tNOT_PATH_NOSCHEME : RegExp,\n\tNOT_QUERY : RegExp,\n\tNOT_FRAGMENT : RegExp,\n\tESCAPE : RegExp,\n\tUNRESERVED : RegExp,\n\tOTHER_CHARS : RegExp,\n\tPCT_ENCODED : RegExp,\n\tIPV4ADDRESS : RegExp,\n\tIPV6ADDRESS : RegExp,\n}\n\nexport const SCHEMES:{[scheme:string]:URISchemeHandler} = {};\n\nexport function pctEncChar(chr:string):string {\n\tconst c = chr.charCodeAt(0);\n\tlet e:string;\n\n\tif (c < 16) e = \"%0\" + c.toString(16).toUpperCase();\n\telse if (c < 128) e = \"%\" + c.toString(16).toUpperCase();\n\telse if (c < 2048) e = \"%\" + ((c >> 6) | 192).toString(16).toUpperCase() + \"%\" + ((c & 63) | 128).toString(16).toUpperCase();\n\telse e = \"%\" + ((c >> 12) | 224).toString(16).toUpperCase() + \"%\" + (((c >> 6) & 63) | 128).toString(16).toUpperCase() + \"%\" + ((c & 63) | 128).toString(16).toUpperCase();\n\n\treturn e;\n}\n\nexport function pctDecChars(str:string):string {\n\tlet newStr = \"\";\n\tlet i = 0;\n\tconst il = str.length;\n\n\twhile (i < il) {\n\t\tconst c = parseInt(str.substr(i + 1, 2), 16);\n\n\t\tif (c < 128) {\n\t\t\tnewStr += String.fromCharCode(c);\n\t\t\ti += 3;\n\t\t}\n\t\telse if (c >= 194 && c < 224) {\n\t\t\tif ((il - i) >= 6) {\n\t\t\t\tconst c2 = parseInt(str.substr(i + 4, 2), 16);\n\t\t\t\tnewStr += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n\t\t\t} else {\n\t\t\t\tnewStr += str.substr(i, 6);\n\t\t\t}\n\t\t\ti += 6;\n\t\t}\n\t\telse if (c >= 224) {\n\t\t\tif ((il - i) >= 9) {\n\t\t\t\tconst c2 = parseInt(str.substr(i + 4, 2), 16);\n\t\t\t\tconst c3 = parseInt(str.substr(i + 7, 2), 16);\n\t\t\t\tnewStr += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\t\t\t} else {\n\t\t\t\tnewStr += str.substr(i, 9);\n\t\t\t}\n\t\t\ti += 9;\n\t\t}\n\t\telse {\n\t\t\tnewStr += str.substr(i, 3);\n\t\t\ti += 3;\n\t\t}\n\t}\n\n\treturn newStr;\n}\n\nfunction _normalizeComponentEncoding(components:URIComponents, protocol:URIRegExps) {\n\tfunction decodeUnreserved(str:string):string {\n\t\tconst decStr = pctDecChars(str);\n\t\treturn (!decStr.match(protocol.UNRESERVED) ? str : decStr);\n\t}\n\n\tif (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, \"\");\n\tif (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace((components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME), pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\n\treturn components;\n};\n\nfunction _stripLeadingZeros(str:string):string {\n\treturn str.replace(/^0*(.*)/, \"$1\") || \"0\";\n}\n\nfunction _normalizeIPv4(host:string, protocol:URIRegExps):string {\n\tconst matches = host.match(protocol.IPV4ADDRESS) || [];\n\tconst [, address] = matches;\n\t\n\tif (address) {\n\t\treturn address.split(\".\").map(_stripLeadingZeros).join(\".\");\n\t} else {\n\t\treturn host;\n\t}\n}\n\nfunction _normalizeIPv6(host:string, protocol:URIRegExps):string {\n\tconst matches = host.match(protocol.IPV6ADDRESS) || [];\n\tconst [, address, zone] = matches;\n\n\tif (address) {\n\t\tconst [last, first] = address.toLowerCase().split('::').reverse();\n\t\tconst firstFields = first ? first.split(\":\").map(_stripLeadingZeros) : [];\n\t\tconst lastFields = last.split(\":\").map(_stripLeadingZeros);\n\t\tconst isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);\n\t\tconst fieldCount = isLastFieldIPv4Address ? 7 : 8;\n\t\tconst lastFieldsStart = lastFields.length - fieldCount;\n\t\tconst fields = Array<string>(fieldCount);\n\n\t\tfor (let x = 0; x < fieldCount; ++x) {\n\t\t\tfields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';\n\t\t}\n\n\t\tif (isLastFieldIPv4Address) {\n\t\t\tfields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);\n\t\t}\n\n\t\tconst allZeroFields = fields.reduce<Array<{index:number,length:number}>>((acc, field, index) => {\n\t\t\tif (!field || field === \"0\") {\n\t\t\t\tconst lastLongest = acc[acc.length - 1];\n\t\t\t\tif (lastLongest && lastLongest.index + lastLongest.length === index) {\n\t\t\t\t\tlastLongest.length++;\n\t\t\t\t} else {\n\t\t\t\t\tacc.push({ index, length : 1 });\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, []);\n\n\t\tconst longestZeroFields = allZeroFields.sort((a, b) => b.length - a.length)[0];\n\n\t\tlet newHost:string;\n\t\tif (longestZeroFields && longestZeroFields.length > 1) {\n\t\t\tconst newFirst = fields.slice(0, longestZeroFields.index) ;\n\t\t\tconst newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);\n\t\t\tnewHost = newFirst.join(\":\") + \"::\" + newLast.join(\":\");\n\t\t} else {\n\t\t\tnewHost = fields.join(\":\");\n\t\t}\n\n\t\tif (zone) {\n\t\t\tnewHost += \"%\" + zone;\n\t\t}\n\n\t\treturn newHost;\n\t} else {\n\t\treturn host;\n\t}\n}\n\nconst URI_PARSE = /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:([^\\/?#@]*)@)?(\\[[^\\/?#\\]]+\\]|[^\\/?#:]*)(?:\\:(\\d*))?))?([^?#]*)(?:\\?([^#]*))?(?:#((?:.|\\n|\\r)*))?/i;\nconst NO_MATCH_IS_UNDEFINED = (<RegExpMatchArray>(\"\").match(/(){0}/))[1] === undefined;\n\nexport function parse(uriString:string, options:URIOptions = {}):URIComponents {\n\tconst components:URIComponents = {};\n\tconst protocol = (options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL);\n\n\tif (options.reference === \"suffix\") uriString = (options.scheme ? options.scheme + \":\" : \"\") + \"//\" + uriString;\n\n\tconst matches = uriString.match(URI_PARSE);\n\n\tif (matches) {\n\t\tif (NO_MATCH_IS_UNDEFINED) {\n\t\t\t//store each component\n\t\t\tcomponents.scheme = matches[1];\n\t\t\tcomponents.userinfo = matches[3];\n\t\t\tcomponents.host = matches[4];\n\t\t\tcomponents.port = parseInt(matches[5], 10);\n\t\t\tcomponents.path = matches[6] || \"\";\n\t\t\tcomponents.query = matches[7];\n\t\t\tcomponents.fragment = matches[8];\n\n\t\t\t//fix port number\n\t\t\tif (isNaN(components.port)) {\n\t\t\t\tcomponents.port = matches[5];\n\t\t\t}\n\t\t} else {  //IE FIX for improper RegExp matching\n\t\t\t//store each component\n\t\t\tcomponents.scheme = matches[1] || undefined;\n\t\t\tcomponents.userinfo = (uriString.indexOf(\"@\") !== -1 ? matches[3] : undefined);\n\t\t\tcomponents.host = (uriString.indexOf(\"//\") !== -1 ? matches[4] : undefined);\n\t\t\tcomponents.port = parseInt(matches[5], 10);\n\t\t\tcomponents.path = matches[6] || \"\";\n\t\t\tcomponents.query = (uriString.indexOf(\"?\") !== -1 ? matches[7] : undefined);\n\t\t\tcomponents.fragment = (uriString.indexOf(\"#\") !== -1 ? matches[8] : undefined);\n\n\t\t\t//fix port number\n\t\t\tif (isNaN(components.port)) {\n\t\t\t\tcomponents.port = (uriString.match(/\\/\\/(?:.|\\n)*\\:(?:\\/|\\?|\\#|$)/) ? matches[4] : undefined);\n\t\t\t}\n\t\t}\n\n\t\tif (components.host) {\n\t\t\t//normalize IP hosts\n\t\t\tcomponents.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);\n\t\t}\n\n\t\t//determine reference type\n\t\tif (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {\n\t\t\tcomponents.reference = \"same-document\";\n\t\t} else if (components.scheme === undefined) {\n\t\t\tcomponents.reference = \"relative\";\n\t\t} else if (components.fragment === undefined) {\n\t\t\tcomponents.reference = \"absolute\";\n\t\t} else {\n\t\t\tcomponents.reference = \"uri\";\n\t\t}\n\n\t\t//check for reference errors\n\t\tif (options.reference && options.reference !== \"suffix\" && options.reference !== components.reference) {\n\t\t\tcomponents.error = components.error || \"URI is not a \" + options.reference + \" reference.\";\n\t\t}\n\n\t\t//find scheme handler\n\t\tconst schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n\n\t\t//check if scheme can't handle IRIs\n\t\tif (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n\t\t\t//if host component is a domain name\n\t\t\tif (components.host && (options.domainHost || (schemeHandler && schemeHandler.domainHost))) {\n\t\t\t\t//convert Unicode IDN -> ASCII IDN\n\t\t\t\ttry {\n\t\t\t\t\tcomponents.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcomponents.error = components.error || \"Host's domain name can not be converted to ASCII via punycode: \" + e;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//convert IRI -> URI\n\t\t\t_normalizeComponentEncoding(components, URI_PROTOCOL);\n\t\t} else {\n\t\t\t//normalize encodings\n\t\t\t_normalizeComponentEncoding(components, protocol);\n\t\t}\n\n\t\t//perform scheme specific parsing\n\t\tif (schemeHandler && schemeHandler.parse) {\n\t\t\tschemeHandler.parse(components, options);\n\t\t}\n\t} else {\n\t\tcomponents.error = components.error || \"URI can not be parsed.\";\n\t}\n\n\treturn components;\n};\n\nfunction _recomposeAuthority(components:URIComponents, options:URIOptions):string|undefined {\n\tconst protocol = (options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL);\n\tconst uriTokens:Array<string> = [];\n\n\tif (components.userinfo !== undefined) {\n\t\turiTokens.push(components.userinfo);\n\t\turiTokens.push(\"@\");\n\t}\n\n\tif (components.host !== undefined) {\n\t\t//normalize IP hosts, add brackets and escape zone separator for IPv6\n\t\turiTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, (_, $1, $2) => \"[\" + $1 + ($2 ? \"%25\" + $2 : \"\") + \"]\"));\n\t}\n\n\tif (typeof components.port === \"number\" || typeof components.port === \"string\") {\n\t\turiTokens.push(\":\");\n\t\turiTokens.push(String(components.port));\n\t}\n\n\treturn uriTokens.length ? uriTokens.join(\"\") : undefined;\n};\n\nconst RDS1 = /^\\.\\.?\\//;\nconst RDS2 = /^\\/\\.(\\/|$)/;\nconst RDS3 = /^\\/\\.\\.(\\/|$)/;\nconst RDS4 = /^\\.\\.?$/;\nconst RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/;\n\nexport function removeDotSegments(input:string):string {\n\tconst output:Array<string> = [];\n\n\twhile (input.length) {\n\t\tif (input.match(RDS1)) {\n\t\t\tinput = input.replace(RDS1, \"\");\n\t\t} else if (input.match(RDS2)) {\n\t\t\tinput = input.replace(RDS2, \"/\");\n\t\t} else if (input.match(RDS3)) {\n\t\t\tinput = input.replace(RDS3, \"/\");\n\t\t\toutput.pop();\n\t\t} else if (input === \".\" || input === \"..\") {\n\t\t\tinput = \"\";\n\t\t} else {\n\t\t\tconst im = input.match(RDS5);\n\t\t\tif (im) {\n\t\t\t\tconst s = im[0];\n\t\t\t\tinput = input.slice(s.length);\n\t\t\t\toutput.push(s);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unexpected dot segment condition\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn output.join(\"\");\n};\n\nexport function serialize(components:URIComponents, options:URIOptions = {}):string {\n\tconst protocol = (options.iri ? IRI_PROTOCOL : URI_PROTOCOL);\n\tconst uriTokens:Array<string> = [];\n\n\t//find scheme handler\n\tconst schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n\n\t//perform scheme specific serialization\n\tif (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);\n\n\tif (components.host) {\n\t\t//if host component is an IPv6 address\n\t\tif (protocol.IPV6ADDRESS.test(components.host)) {\n\t\t\t//TODO: normalize IPv6 address as per RFC 5952\n\t\t}\n\n\t\t//if host component is a domain name\n\t\telse if (options.domainHost || (schemeHandler && schemeHandler.domainHost)) {\n\t\t\t//convert IDN via punycode\n\t\t\ttry {\n\t\t\t\tcomponents.host = (!options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host));\n\t\t\t} catch (e) {\n\t\t\t\tcomponents.error = components.error || \"Host's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n\t\t\t}\n\t\t}\n\t}\n\n\t//normalize encoding\n\t_normalizeComponentEncoding(components, protocol);\n\n\tif (options.reference !== \"suffix\" && components.scheme) {\n\t\turiTokens.push(components.scheme);\n\t\turiTokens.push(\":\");\n\t}\n\n\tconst authority = _recomposeAuthority(components, options);\n\tif (authority !== undefined) {\n\t\tif (options.reference !== \"suffix\") {\n\t\t\turiTokens.push(\"//\");\n\t\t}\n\n\t\turiTokens.push(authority);\n\n\t\tif (components.path && components.path.charAt(0) !== \"/\") {\n\t\t\turiTokens.push(\"/\");\n\t\t}\n\t}\n\n\tif (components.path !== undefined) {\n\t\tlet s = components.path;\n\n\t\tif (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n\t\t\ts = removeDotSegments(s);\n\t\t}\n\n\t\tif (authority === undefined) {\n\t\t\ts = s.replace(/^\\/\\//, \"/%2F\");  //don't allow the path to start with \"//\"\n\t\t}\n\n\t\turiTokens.push(s);\n\t}\n\n\tif (components.query !== undefined) {\n\t\turiTokens.push(\"?\");\n\t\turiTokens.push(components.query);\n\t}\n\n\tif (components.fragment !== undefined) {\n\t\turiTokens.push(\"#\");\n\t\turiTokens.push(components.fragment);\n\t}\n\n\treturn uriTokens.join(\"\");  //merge tokens into a string\n};\n\nexport function resolveComponents(base:URIComponents, relative:URIComponents, options:URIOptions = {}, skipNormalization?:boolean):URIComponents {\n\tconst target:URIComponents = {};\n\n\tif (!skipNormalization) {\n\t\tbase = parse(serialize(base, options), options);  //normalize base components\n\t\trelative = parse(serialize(relative, options), options);  //normalize relative components\n\t}\n\toptions = options || {};\n\n\tif (!options.tolerant && relative.scheme) {\n\t\ttarget.scheme = relative.scheme;\n\t\t//target.authority = relative.authority;\n\t\ttarget.userinfo = relative.userinfo;\n\t\ttarget.host = relative.host;\n\t\ttarget.port = relative.port;\n\t\ttarget.path = removeDotSegments(relative.path || \"\");\n\t\ttarget.query = relative.query;\n\t} else {\n\t\tif (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n\t\t\t//target.authority = relative.authority;\n\t\t\ttarget.userinfo = relative.userinfo;\n\t\t\ttarget.host = relative.host;\n\t\t\ttarget.port = relative.port;\n\t\t\ttarget.path = removeDotSegments(relative.path || \"\");\n\t\t\ttarget.query = relative.query;\n\t\t} else {\n\t\t\tif (!relative.path) {\n\t\t\t\ttarget.path = base.path;\n\t\t\t\tif (relative.query !== undefined) {\n\t\t\t\t\ttarget.query = relative.query;\n\t\t\t\t} else {\n\t\t\t\t\ttarget.query = base.query;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (relative.path.charAt(0) === \"/\") {\n\t\t\t\t\ttarget.path = removeDotSegments(relative.path);\n\t\t\t\t} else {\n\t\t\t\t\tif ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n\t\t\t\t\t\ttarget.path = \"/\" + relative.path;\n\t\t\t\t\t} else if (!base.path) {\n\t\t\t\t\t\ttarget.path = relative.path;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget.path = base.path.slice(0, base.path.lastIndexOf(\"/\") + 1) + relative.path;\n\t\t\t\t\t}\n\t\t\t\t\ttarget.path = removeDotSegments(target.path);\n\t\t\t\t}\n\t\t\t\ttarget.query = relative.query;\n\t\t\t}\n\t\t\t//target.authority = base.authority;\n\t\t\ttarget.userinfo = base.userinfo;\n\t\t\ttarget.host = base.host;\n\t\t\ttarget.port = base.port;\n\t\t}\n\t\ttarget.scheme = base.scheme;\n\t}\n\n\ttarget.fragment = relative.fragment;\n\n\treturn target;\n};\n\nexport function resolve(baseURI:string, relativeURI:string, options?:URIOptions):string {\n\tconst schemelessOptions = assign({ scheme : 'null' }, options);\n\treturn serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);\n};\n\nexport function normalize(uri:string, options?:URIOptions):string;\nexport function normalize(uri:URIComponents, options?:URIOptions):URIComponents;\nexport function normalize(uri:any, options?:URIOptions):any {\n\tif (typeof uri === \"string\") {\n\t\turi = serialize(parse(uri, options), options);\n\t} else if (typeOf(uri) === \"object\") {\n\t\turi = parse(serialize(<URIComponents>uri, options), options);\n\t}\n\n\treturn uri;\n};\n\nexport function equal(uriA:string, uriB:string, options?: URIOptions):boolean;\nexport function equal(uriA:URIComponents, uriB:URIComponents, options?:URIOptions):boolean;\nexport function equal(uriA:any, uriB:any, options?:URIOptions):boolean {\n\tif (typeof uriA === \"string\") {\n\t\turiA = serialize(parse(uriA, options), options);\n\t} else if (typeOf(uriA) === \"object\") {\n\t\turiA = serialize(<URIComponents>uriA, options);\n\t}\n\n\tif (typeof uriB === \"string\") {\n\t\turiB = serialize(parse(uriB, options), options);\n\t} else if (typeOf(uriB) === \"object\") {\n\t\turiB = serialize(<URIComponents>uriB, options);\n\t}\n\n\treturn uriA === uriB;\n};\n\nexport function escapeComponent(str:string, options?:URIOptions):string {\n\treturn str && str.toString().replace((!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE), pctEncChar);\n};\n\nexport function unescapeComponent(str:string, options?:URIOptions):string {\n\treturn str && str.toString().replace((!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED), pctDecChars);\n};\n","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"http\",\n\n\tdomainHost : true,\n\n\tparse : function (components:URIComponents, options:URIOptions):URIComponents {\n\t\t//report missing host\n\t\tif (!components.host) {\n\t\t\tcomponents.error = components.error || \"HTTP URIs must have a host.\";\n\t\t}\n\n\t\treturn components;\n\t},\n\n\tserialize : function (components:URIComponents, options:URIOptions):URIComponents {\n\t\tconst secure = String(components.scheme).toLowerCase() === \"https\";\n\n\t\t//normalize the default port\n\t\tif (components.port === (secure ? 443 : 80) || components.port === \"\") {\n\t\t\tcomponents.port = undefined;\n\t\t}\n\t\t\n\t\t//normalize the empty path\n\t\tif (!components.path) {\n\t\t\tcomponents.path = \"/\";\n\t\t}\n\n\t\t//NOTE: We do not parse query strings for HTTP URIs\n\t\t//as WWW Form Url Encoded query strings are part of the HTML4+ spec,\n\t\t//and not the HTTP spec.\n\n\t\treturn components;\n\t}\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport http from \"./http\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"https\",\n\tdomainHost : http.domainHost,\n\tparse : http.parse,\n\tserialize : http.serialize\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\n\nexport interface WSComponents extends URIComponents {\n\tresourceName?: string;\n\tsecure?: boolean;\n}\n\nfunction isSecure(wsComponents:WSComponents):boolean {\n\treturn typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === \"wss\";\n}\n\n//RFC 6455\nconst handler:URISchemeHandler = {\n\tscheme : \"ws\",\n\n\tdomainHost : true,\n\n\tparse : function (components:URIComponents, options:URIOptions):WSComponents {\n\t\tconst wsComponents = components as WSComponents;\n\n\t\t//indicate if the secure flag is set\n\t\twsComponents.secure = isSecure(wsComponents);\n\n\t\t//construct resouce name\n\t\twsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');\n\t\twsComponents.path = undefined;\n\t\twsComponents.query = undefined;\n\n\t\treturn wsComponents;\n\t},\n\n\tserialize : function (wsComponents:WSComponents, options:URIOptions):URIComponents {\n\t\t//normalize the default port\n\t\tif (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === \"\") {\n\t\t\twsComponents.port = undefined;\n\t\t}\n\n\t\t//ensure scheme matches secure flag\n\t\tif (typeof wsComponents.secure === 'boolean') {\n\t\t\twsComponents.scheme = (wsComponents.secure ? 'wss' : 'ws');\n\t\t\twsComponents.secure = undefined;\n\t\t}\n\n\t\t//reconstruct path from resource name\n\t\tif (wsComponents.resourceName) {\n\t\t\tconst [path, query] = wsComponents.resourceName.split('?');\n\t\t\twsComponents.path = (path && path !== '/' ? path : undefined);\n\t\t\twsComponents.query = query;\n\t\t\twsComponents.resourceName = undefined;\n\t\t}\n\n\t\t//forbid fragment component\n\t\twsComponents.fragment = undefined;\n\n\t\treturn wsComponents;\n\t}\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport ws from \"./ws\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"wss\",\n\tdomainHost : ws.domainHost,\n\tparse : ws.parse,\n\tserialize : ws.serialize\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { pctEncChar, pctDecChars, unescapeComponent } from \"../uri\";\nimport punycode from \"punycode\";\nimport { merge, subexp, toUpperCase, toArray } from \"../util\";\n\nexport interface MailtoHeaders {\n\t[hfname:string]:string\n}\n\nexport interface MailtoComponents extends URIComponents {\n\tto:Array<string>,\n\theaders?:MailtoHeaders,\n\tsubject?:string,\n\tbody?:string\n}\n\nconst O:MailtoHeaders = {};\nconst isIRI = true;\n\n//RFC 3986\nconst UNRESERVED$$ = \"[A-Za-z0-9\\\\-\\\\.\\\\_\\\\~\" + (isIRI ? \"\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF\" : \"\") + \"]\";\nconst HEXDIG$$ = \"[0-9A-Fa-f]\";  //case-insensitive\nconst PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$));  //expanded\n\n//RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =\n//const ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\#\\\\$\\\\%\\\\&\\\\'\\\\*\\\\+\\\\-\\\\/\\\\=\\\\?\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QTEXT$$ = \"[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F]\";  //(%d1-8 / %d11-12 / %d14-31 / %d127)\n//const QTEXT$$ = merge(\"[\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E]\", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext\n//const VCHAR$$ = \"[\\\\x21-\\\\x7E]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QP$ = subexp(\"\\\\\\\\\" + merge(\"[\\\\x00\\\\x0D\\\\x0A]\", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext\n//const FWS$ = subexp(subexp(WSP$$ + \"*\" + \"\\\\x0D\\\\x0A\") + \"?\" + WSP$$ + \"+\");\n//const QUOTED_PAIR$ = subexp(subexp(\"\\\\\\\\\" + subexp(VCHAR$$ + \"|\" + WSP$$)) + \"|\" + OBS_QP$);\n//const QUOTED_STRING$ = subexp('\\\\\"' + subexp(FWS$ + \"?\" + QCONTENT$) + \"*\" + FWS$ + \"?\" + '\\\\\"');\nconst ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\$\\\\%\\\\'\\\\*\\\\+\\\\-\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\nconst QTEXT$$ = \"[\\\\!\\\\$\\\\%\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.0-9\\\\<\\\\>A-Z\\\\x5E-\\\\x7E]\";\nconst VCHAR$$ = merge(QTEXT$$, \"[\\\\\\\"\\\\\\\\]\");\nconst DOT_ATOM_TEXT$ = subexp(ATEXT$$ + \"+\" + subexp(\"\\\\.\" + ATEXT$$ + \"+\") + \"*\");\nconst QUOTED_PAIR$ = subexp(\"\\\\\\\\\" + VCHAR$$);\nconst QCONTENT$ = subexp(QTEXT$$ + \"|\" + QUOTED_PAIR$);\nconst QUOTED_STRING$ = subexp('\\\\\"' + QCONTENT$ + \"*\" + '\\\\\"');\n\n//RFC 6068\nconst DTEXT_NO_OBS$$ = \"[\\\\x21-\\\\x5A\\\\x5E-\\\\x7E]\";  //%d33-90 / %d94-126\nconst SOME_DELIMS$$ = \"[\\\\!\\\\$\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\:\\\\@]\";\nconst QCHAR$ = subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$ + \"|\" + SOME_DELIMS$$);\nconst DOMAIN$ = subexp(DOT_ATOM_TEXT$ + \"|\" + \"\\\\[\" + DTEXT_NO_OBS$$ + \"*\" + \"\\\\]\");\nconst LOCAL_PART$ = subexp(DOT_ATOM_TEXT$ + \"|\" + QUOTED_STRING$);\nconst ADDR_SPEC$ = subexp(LOCAL_PART$ + \"\\\\@\" + DOMAIN$);\nconst TO$ = subexp(ADDR_SPEC$ + subexp(\"\\\\,\" + ADDR_SPEC$) + \"*\");\nconst HFNAME$ = subexp(QCHAR$ + \"*\");\nconst HFVALUE$ = HFNAME$;\nconst HFIELD$ = subexp(HFNAME$ + \"\\\\=\" + HFVALUE$);\nconst HFIELDS2$ = subexp(HFIELD$ + subexp(\"\\\\&\" + HFIELD$) + \"*\");\nconst HFIELDS$ = subexp(\"\\\\?\" + HFIELDS2$);\nconst MAILTO_URI = new RegExp(\"^mailto\\\\:\" + TO$ + \"?\" + HFIELDS$ + \"?$\");\n\nconst UNRESERVED = new RegExp(UNRESERVED$$, \"g\");\nconst PCT_ENCODED = new RegExp(PCT_ENCODED$, \"g\");\nconst NOT_LOCAL_PART = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", '[\\\\\"]', VCHAR$$), \"g\");\nconst NOT_DOMAIN = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", \"[\\\\[]\", DTEXT_NO_OBS$$, \"[\\\\]]\"), \"g\");\nconst NOT_HFNAME = new RegExp(merge(\"[^]\", UNRESERVED$$, SOME_DELIMS$$), \"g\");\nconst NOT_HFVALUE = NOT_HFNAME;\nconst TO = new RegExp(\"^\" + TO$ + \"$\");\nconst HFIELDS = new RegExp(\"^\" + HFIELDS2$ + \"$\");\n\nfunction decodeUnreserved(str:string):string {\n\tconst decStr = pctDecChars(str);\n\treturn (!decStr.match(UNRESERVED) ? str : decStr);\n}\n\nconst handler:URISchemeHandler<MailtoComponents> =  {\n\tscheme : \"mailto\",\n\n\tparse : function (components:URIComponents, options:URIOptions):MailtoComponents {\n\t\tconst mailtoComponents = components as MailtoComponents;\n\t\tconst to = mailtoComponents.to = (mailtoComponents.path ? mailtoComponents.path.split(\",\") : []);\n\t\tmailtoComponents.path = undefined;\n\n\t\tif (mailtoComponents.query) {\n\t\t\tlet unknownHeaders = false\n\t\t\tconst headers:MailtoHeaders = {};\n\t\t\tconst hfields = mailtoComponents.query.split(\"&\");\n\n\t\t\tfor (let x = 0, xl = hfields.length; x < xl; ++x) {\n\t\t\t\tconst hfield = hfields[x].split(\"=\");\n\n\t\t\t\tswitch (hfield[0]) {\n\t\t\t\t\tcase \"to\":\n\t\t\t\t\t\tconst toAddrs = hfield[1].split(\",\");\n\t\t\t\t\t\tfor (let x = 0, xl = toAddrs.length; x < xl; ++x) {\n\t\t\t\t\t\t\tto.push(toAddrs[x]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"subject\":\n\t\t\t\t\t\tmailtoComponents.subject = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"body\":\n\t\t\t\t\t\tmailtoComponents.body = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tunknownHeaders = true;\n\t\t\t\t\t\theaders[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (unknownHeaders) mailtoComponents.headers = headers;\n\t\t}\n\n\t\tmailtoComponents.query = undefined;\n\n\t\tfor (let x = 0, xl = to.length; x < xl; ++x) {\n\t\t\tconst addr = to[x].split(\"@\");\n\n\t\t\taddr[0] = unescapeComponent(addr[0]);\n\n\t\t\tif (!options.unicodeSupport) {\n\t\t\t\t//convert Unicode IDN -> ASCII IDN\n\t\t\t\ttry {\n\t\t\t\t\taddr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tmailtoComponents.error = mailtoComponents.error || \"Email address's domain name can not be converted to ASCII via punycode: \" + e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taddr[1] = unescapeComponent(addr[1], options).toLowerCase();\n\t\t\t}\n\n\t\t\tto[x] = addr.join(\"@\");\n\t\t}\n\n\t\treturn mailtoComponents;\n\t},\n\n\tserialize : function (mailtoComponents:MailtoComponents, options:URIOptions):URIComponents {\n\t\tconst components = mailtoComponents as URIComponents;\n\t\tconst to = toArray(mailtoComponents.to);\n\t\tif (to) {\n\t\t\tfor (let x = 0, xl = to.length; x < xl; ++x) {\n\t\t\t\tconst toAddr = String(to[x]);\n\t\t\t\tconst atIdx = toAddr.lastIndexOf(\"@\");\n\t\t\t\tconst localPart = (toAddr.slice(0, atIdx)).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);\n\t\t\t\tlet domain = toAddr.slice(atIdx + 1);\n\n\t\t\t\t//convert IDN via punycode\n\t\t\t\ttry {\n\t\t\t\t\tdomain = (!options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcomponents.error = components.error || \"Email address's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n\t\t\t\t}\n\n\t\t\t\tto[x] = localPart + \"@\" + domain;\n\t\t\t}\n\n\t\t\tcomponents.path = to.join(\",\");\n\t\t}\n\n\t\tconst headers = mailtoComponents.headers = mailtoComponents.headers || {};\n\n\t\tif (mailtoComponents.subject) headers[\"subject\"] = mailtoComponents.subject;\n\t\tif (mailtoComponents.body) headers[\"body\"] = mailtoComponents.body;\n\n\t\tconst fields = [];\n\t\tfor (const name in headers) {\n\t\t\tif (headers[name] !== O[name]) {\n\t\t\t\tfields.push(\n\t\t\t\t\tname.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) +\n\t\t\t\t\t\"=\" +\n\t\t\t\t\theaders[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (fields.length) {\n\t\t\tcomponents.query = fields.join(\"&\");\n\t\t}\n\n\t\treturn components;\n\t}\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { pctEncChar, SCHEMES } from \"../uri\";\n\nexport interface URNComponents extends URIComponents {\n\tnid?:string;\n\tnss?:string;\n}\n\nexport interface URNOptions extends URIOptions {\n\tnid?:string;\n}\n\nconst NID$ = \"(?:[0-9A-Za-z][0-9A-Za-z\\\\-]{1,31})\";\nconst PCT_ENCODED$ = \"(?:\\\\%[0-9A-Fa-f]{2})\";\nconst TRANS$$ = \"[0-9A-Za-z\\\\(\\\\)\\\\+\\\\,\\\\-\\\\.\\\\:\\\\=\\\\@\\\\;\\\\$\\\\_\\\\!\\\\*\\\\'\\\\/\\\\?\\\\#]\";\nconst NSS$ = \"(?:(?:\" + PCT_ENCODED$ + \"|\" + TRANS$$ + \")+)\";\nconst URN_SCHEME = new RegExp(\"^urn\\\\:(\" + NID$ + \")$\");\nconst URN_PATH = new RegExp(\"^(\" + NID$ + \")\\\\:(\" + NSS$ + \")$\");\nconst URN_PARSE = /^([^\\:]+)\\:(.*)/;\nconst URN_EXCLUDED = /[\\x00-\\x20\\\\\\\"\\&\\<\\>\\[\\]\\^\\`\\{\\|\\}\\~\\x7F-\\xFF]/g;\n\n//RFC 2141\nconst handler:URISchemeHandler<URNComponents,URNOptions> = {\n\tscheme : \"urn\",\n\n\tparse : function (components:URIComponents, options:URNOptions):URNComponents {\n\t\tconst matches = components.path && components.path.match(URN_PARSE);\n\t\tlet urnComponents = components as URNComponents;\n\n\t\tif (matches) {\n\t\t\tconst scheme = options.scheme || urnComponents.scheme || \"urn\";\n\t\t\tconst nid = matches[1].toLowerCase();\n\t\t\tconst nss = matches[2];\n\t\t\tconst urnScheme = `${scheme}:${options.nid || nid}`;\n\t\t\tconst schemeHandler = SCHEMES[urnScheme];\n\n\t\t\turnComponents.nid = nid;\n\t\t\turnComponents.nss = nss;\n\t\t\turnComponents.path = undefined;\n\n\t\t\tif (schemeHandler) {\n\t\t\t\turnComponents = schemeHandler.parse(urnComponents, options) as URNComponents;\n\t\t\t}\n\t\t} else {\n\t\t\turnComponents.error = urnComponents.error || \"URN can not be parsed.\";\n\t\t}\n\n\t\treturn urnComponents;\n\t},\n\n\tserialize : function (urnComponents:URNComponents, options:URNOptions):URIComponents {\n\t\tconst scheme = options.scheme || urnComponents.scheme || \"urn\";\n\t\tconst nid = urnComponents.nid;\n\t\tconst urnScheme = `${scheme}:${options.nid || nid}`;\n\t\tconst schemeHandler = SCHEMES[urnScheme];\n\n\t\tif (schemeHandler) {\n\t\t\turnComponents = schemeHandler.serialize(urnComponents, options) as URNComponents;\n\t\t}\n\n\t\tconst uriComponents = urnComponents as URIComponents;\n\t\tconst nss = urnComponents.nss;\n\t\turiComponents.path = `${nid || options.nid}:${nss}`;\n\n\t\treturn uriComponents;\n\t},\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { URNComponents } from \"./urn\";\nimport { SCHEMES } from \"../uri\";\n\nexport interface UUIDComponents extends URNComponents {\n\tuuid?: string;\n}\n\nconst UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/;\nconst UUID_PARSE = /^[0-9A-Fa-f\\-]{36}/;\n\n//RFC 4122\nconst handler:URISchemeHandler<UUIDComponents, URIOptions, URNComponents> = {\n\tscheme : \"urn:uuid\",\n\n\tparse : function (urnComponents:URNComponents, options:URIOptions):UUIDComponents {\n\t\tconst uuidComponents = urnComponents as UUIDComponents;\n\t\tuuidComponents.uuid = uuidComponents.nss;\n\t\tuuidComponents.nss = undefined;\n\n\t\tif (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\n\t\t\tuuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n\t\t}\n\n\t\treturn uuidComponents;\n\t},\n\n\tserialize : function (uuidComponents:UUIDComponents, options:URIOptions):URNComponents {\n\t\tconst urnComponents = uuidComponents as URNComponents;\n\t\t//normalize UUID\n\t\turnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n\t\treturn urnComponents;\n\t},\n};\n\nexport default handler;","import { SCHEMES } from \"./uri\";\n\nimport http from \"./schemes/http\";\nSCHEMES[http.scheme] = http;\n\nimport https from \"./schemes/https\";\nSCHEMES[https.scheme] = https;\n\nimport ws from \"./schemes/ws\";\nSCHEMES[ws.scheme] = ws;\n\nimport wss from \"./schemes/wss\";\nSCHEMES[wss.scheme] = wss;\n\nimport mailto from \"./schemes/mailto\";\nSCHEMES[mailto.scheme] = mailto;\n\nimport urn from \"./schemes/urn\";\nSCHEMES[urn.scheme] = urn;\n\nimport uuid from \"./schemes/urn-uuid\";\nSCHEMES[uuid.scheme] = uuid;\n\nexport * from \"./uri\";\n"]},"metadata":{},"sourceType":"script"}