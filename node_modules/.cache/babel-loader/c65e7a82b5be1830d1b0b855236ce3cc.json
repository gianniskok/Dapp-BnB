{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst Client = require('../../lib/core');\n\nconst Service = require('./service');\n\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../../types').Options} Options\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n\nclass Remote {\n  /**\n   * @param {Options} options\n   */\n  constructor(options) {\n    this.client = new Client(options);\n    /** @readonly */\n\n    this.service = new Service(options);\n  }\n\n}\n/**\n * @type {RemotePiningAPI[\"add\"]}\n */\n\n\nRemote.prototype.add = async function add(cid, _ref) {\n  let {\n    timeout,\n    signal,\n    headers,\n    ...query\n  } = _ref;\n  const response = await this.client.post('pin/remote/add', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeAddParams({\n      cid,\n      ...query\n    })\n  });\n  return decodePin(await response.json());\n};\n/**\n * @type {RemotePiningAPI[\"ls\"]}\n */\n\n\nRemote.prototype.ls = async function* ls(_ref2) {\n  let {\n    timeout,\n    signal,\n    headers,\n    ...query\n  } = _ref2;\n  const response = await this.client.post('pin/remote/ls', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery(query)\n  });\n\n  for await (const pin of response.ndjson()) {\n    yield decodePin(pin);\n  }\n};\n/**\n * @type {RemotePiningAPI[\"rm\"]}\n */\n\n\nRemote.prototype.rm = async function rm(_ref3) {\n  let {\n    timeout,\n    signal,\n    headers,\n    ...query\n  } = _ref3;\n  await this.client.post('pin/remote/rm', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery({ ...query,\n      all: false\n    })\n  });\n};\n/**\n * @type {RemotePiningAPI[\"rmAll\"]}\n */\n\n\nRemote.prototype.rmAll = async function (_ref4) {\n  let {\n    timeout,\n    signal,\n    headers,\n    ...query\n  } = _ref4;\n  await this.client.post('pin/remote/rm', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery({ ...query,\n      all: true\n    })\n  });\n};\n/**\n * @param {Object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\n\n\nconst decodePin = _ref5 => {\n  let {\n    Name: name,\n    Status: status,\n    Cid: cid\n  } = _ref5;\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  };\n};\n/**\n * @param {any} service\n * @returns {string}\n */\n\n\nconst encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\n/**\n * @param {any} cid\n * @returns {string}\n */\n\n\nconst encodeCID = cid => {\n  if (CID.asCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`);\n  }\n};\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\n\n\nconst encodeQuery = _ref6 => {\n  let {\n    service,\n    cid,\n    name,\n    status,\n    all\n  } = _ref6;\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n\n  return query;\n};\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\n\n\nconst encodeAddParams = _ref7 => {\n  let {\n    cid,\n    service,\n    background,\n    name,\n    origins\n  } = _ref7;\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n\n  return params;\n};\n\nmodule.exports = Remote;","map":{"version":3,"names":["CID","require","Client","Service","toUrlSearchParams","Remote","constructor","options","client","service","prototype","add","cid","timeout","signal","headers","query","response","post","searchParams","encodeAddParams","decodePin","json","ls","encodeQuery","pin","ndjson","rm","all","rmAll","Name","name","Status","status","Cid","parse","encodeService","TypeError","encodeCID","asCID","toString","force","undefined","value","append","background","origins","params","arg","origin","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/pin/remote/index.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst Client = require('../../lib/core')\nconst Service = require('./service')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../../types').Options} Options\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\nclass Remote {\n  /**\n   * @param {Options} options\n   */\n  constructor (options) {\n    this.client = new Client(options)\n    /** @readonly */\n    this.service = new Service(options)\n  }\n}\n\n/**\n * @type {RemotePiningAPI[\"add\"]}\n */\nRemote.prototype.add = async function add (cid, { timeout, signal, headers, ...query }) {\n  const response = await this.client.post('pin/remote/add', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeAddParams({ cid, ...query })\n  })\n\n  return decodePin(await response.json())\n}\n\n/**\n * @type {RemotePiningAPI[\"ls\"]}\n */\nRemote.prototype.ls = async function * ls ({ timeout, signal, headers, ...query }) {\n  const response = await this.client.post('pin/remote/ls', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery(query)\n  })\n\n  for await (const pin of response.ndjson()) {\n    yield decodePin(pin)\n  }\n}\n\n/**\n * @type {RemotePiningAPI[\"rm\"]}\n */\nRemote.prototype.rm = async function rm ({ timeout, signal, headers, ...query }) {\n  await this.client.post('pin/remote/rm', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery({\n      ...query,\n      all: false\n    })\n  })\n}\n\n/**\n * @type {RemotePiningAPI[\"rmAll\"]}\n */\nRemote.prototype.rmAll = async function ({ timeout, signal, headers, ...query }) {\n  await this.client.post('pin/remote/rm', {\n    timeout,\n    signal,\n    headers,\n    searchParams: encodeQuery({\n      ...query,\n      all: true\n    })\n  })\n}\n\n/**\n * @param {Object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\nconst decodePin = ({ Name: name, Status: status, Cid: cid }) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nconst encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nconst encodeCID = (cid) => {\n  if (CID.asCID(cid)) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`)\n  }\n}\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nconst encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nconst encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n\nmodule.exports = Remote\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}