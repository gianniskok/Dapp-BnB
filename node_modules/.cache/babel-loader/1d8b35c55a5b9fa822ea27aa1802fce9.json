{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  async function publish(topic, data) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const searchParams = toUrlSearchParams({\n      arg: topic,\n      ...options\n    }); // allow aborting requests on body errors\n\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('pubsub/pub', {\n      signal,\n      searchParams,\n      ...(await multipartRequest(data, controller, options.headers))\n    });\n    await res.text();\n  }\n\n  return publish;\n});","map":{"version":3,"names":["configure","require","toUrlSearchParams","multipartRequest","abortSignal","AbortController","module","exports","api","publish","topic","data","options","searchParams","arg","controller","signal","res","post","headers","text"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/pubsub/publish.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const searchParams = toUrlSearchParams({\n      arg: topic,\n      ...options\n    })\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('pubsub/pub', {\n      signal,\n      searchParams,\n      ...(\n        await multipartRequest(data, controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return publish\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAM;EAAEI;AAAF,IAAsBJ,OAAO,CAAC,yBAAD,CAAnC;AAEA;AACA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBP,SAAS,CAACQ,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,OAAf,CAAwBC,KAAxB,EAA+BC,IAA/B,EAAmD;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACjD,MAAMC,YAAY,GAAGX,iBAAiB,CAAC;MACrCY,GAAG,EAAEJ,KADgC;MAErC,GAAGE;IAFkC,CAAD,CAAtC,CADiD,CAMjD;;IACA,MAAMG,UAAU,GAAG,IAAIV,eAAJ,EAAnB;IACA,MAAMW,MAAM,GAAGZ,WAAW,CAACW,UAAU,CAACC,MAAZ,EAAoBJ,OAAO,CAACI,MAA5B,CAA1B;IAEA,MAAMC,GAAG,GAAG,MAAMT,GAAG,CAACU,IAAJ,CAAS,YAAT,EAAuB;MACvCF,MADuC;MAEvCH,YAFuC;MAGvC,IACE,MAAMV,gBAAgB,CAACQ,IAAD,EAAOI,UAAP,EAAmBH,OAAO,CAACO,OAA3B,CADxB;IAHuC,CAAvB,CAAlB;IAQA,MAAMF,GAAG,CAACG,IAAJ,EAAN;EACD;;EACD,OAAOX,OAAP;AACD,CAzByB,CAA1B"},"metadata":{},"sourceType":"script"}