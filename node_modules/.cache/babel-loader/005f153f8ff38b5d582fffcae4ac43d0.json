{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst resolve = require('../lib/resolve');\n\nconst first = require('it-first');\n\nconst last = require('it-last');\n\nconst errCode = require('err-code');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('../types').Options} options\n */\n\n\nmodule.exports = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = require('../block/get')(opts);\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n\n\n    const get = async function (cid) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (options.path) {\n        const entry = options.localResolve ? await first(resolve(cid, options.path, codecs, getBlock, options)) : await last(resolve(cid, options.path, codecs, getBlock, options));\n        /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */\n\n        const result = entry;\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n        }\n\n        return result;\n      }\n\n      const codec = await codecs.getCodec(cid.code);\n      const block = await getBlock(cid, options);\n      const node = codec.decode(block);\n      return {\n        value: node,\n        remainderPath: ''\n      };\n    };\n\n    return get;\n  });\n  return fn(options);\n};","map":{"version":3,"names":["configure","require","resolve","first","last","errCode","module","exports","codecs","options","fn","api","opts","getBlock","get","cid","path","entry","localResolve","result","Error","codec","getCodec","code","block","node","decode","value","remainderPath"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/dag/get.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst resolve = require('../lib/resolve')\nconst first = require('it-first')\nconst last = require('it-last')\nconst errCode = require('err-code')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {import('../types').Options} options\n */\nmodule.exports = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = require('../block/get')(opts)\n\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n    const get = async (cid, options = {}) => {\n      if (options.path) {\n        const entry = options.localResolve\n          ? await first(resolve(cid, options.path, codecs, getBlock, options))\n          : await last(resolve(cid, options.path, codecs, getBlock, options))\n        /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */\n        const result = (entry)\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n        }\n\n        return result\n      }\n\n      const codec = await codecs.getCodec(cid.code)\n      const block = await getBlock(cid, options)\n      const node = codec.decode(block)\n\n      return {\n        value: node,\n        remainderPath: ''\n      }\n    }\n\n    return get\n  })\n\n  return fn(options)\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,SAAD,CAApB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,UAAD,CAAvB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,CAACC,MAAD,EAASC,OAAT,KAAqB;EACpC,MAAMC,EAAE,GAAGV,SAAS,CAAC,CAACW,GAAD,EAAMC,IAAN,KAAe;IAClC,MAAMC,QAAQ,GAAGZ,OAAO,CAAC,cAAD,CAAP,CAAwBW,IAAxB,CAAjB;IAEA;AACJ;AACA;;;IACI,MAAME,GAAG,GAAG,gBAAOC,GAAP,EAA6B;MAAA,IAAjBN,OAAiB,uEAAP,EAAO;;MACvC,IAAIA,OAAO,CAACO,IAAZ,EAAkB;QAChB,MAAMC,KAAK,GAAGR,OAAO,CAACS,YAAR,GACV,MAAMf,KAAK,CAACD,OAAO,CAACa,GAAD,EAAMN,OAAO,CAACO,IAAd,EAAoBR,MAApB,EAA4BK,QAA5B,EAAsCJ,OAAtC,CAAR,CADD,GAEV,MAAML,IAAI,CAACF,OAAO,CAACa,GAAD,EAAMN,OAAO,CAACO,IAAd,EAAoBR,MAApB,EAA4BK,QAA5B,EAAsCJ,OAAtC,CAAR,CAFd;QAGA;;QACA,MAAMU,MAAM,GAAIF,KAAhB;;QAEA,IAAI,CAACE,MAAL,EAAa;UACX,MAAMd,OAAO,CAAC,IAAIe,KAAJ,CAAU,WAAV,CAAD,EAAyB,eAAzB,CAAb;QACD;;QAED,OAAOD,MAAP;MACD;;MAED,MAAME,KAAK,GAAG,MAAMb,MAAM,CAACc,QAAP,CAAgBP,GAAG,CAACQ,IAApB,CAApB;MACA,MAAMC,KAAK,GAAG,MAAMX,QAAQ,CAACE,GAAD,EAAMN,OAAN,CAA5B;MACA,MAAMgB,IAAI,GAAGJ,KAAK,CAACK,MAAN,CAAaF,KAAb,CAAb;MAEA,OAAO;QACLG,KAAK,EAAEF,IADF;QAELG,aAAa,EAAE;MAFV,CAAP;IAID,CAvBD;;IAyBA,OAAOd,GAAP;EACD,CAhCmB,CAApB;EAkCA,OAAOJ,EAAE,CAACD,OAAD,CAAT;AACD,CApCD"},"metadata":{},"sourceType":"script"}