{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst toCamel = require('./lib/object-to-camel');\n\nconst configure = require('./lib/configure');\n\nconst multipartRequest = require('./lib/multipart-request');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n\nconst abortSignal = require('./lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  async function* addAll(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const {\n      headers,\n      body,\n      total,\n      parts\n    } = await multipartRequest(source, controller, options.headers); // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function' // @ts-ignore tsc picks up the node codepath\n    ? createProgressHandler(total, parts, options.progress) : [undefined, undefined];\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    });\n\n    for await (let file of res.ndjson()) {\n      file = toCamel(file);\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file);\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name);\n      }\n    }\n  }\n\n  return addAll;\n});\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\n\nconst createProgressHandler = (total, parts, progress) => parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined];\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\n\n\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0;\n  const count = parts.length;\n  return _ref => {\n    let {\n      loaded,\n      total\n    } = _ref;\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size);\n\n    while (index < count) {\n      const {\n        start,\n        end,\n        name\n      } = parts[index]; // If within current part range report progress and break the loop\n\n      if (position < end) {\n        progress(position - start, name);\n        break; // If passed current part range report final byte for the chunk and\n        // move to next one.\n      } else {\n        progress(end - start, name);\n        index += 1;\n      }\n    }\n  };\n};\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\n\n\nfunction toCoreInterface(_ref2) {\n  let {\n    name,\n    hash,\n    size,\n    mode,\n    mtime,\n    mtimeNsecs\n  } = _ref2;\n\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  };\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n\n  return output;\n}","map":{"version":3,"names":["CID","require","toCamel","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","module","exports","api","addAll","source","options","controller","signal","headers","body","total","parts","progressFn","onUploadProgress","progress","createProgressHandler","undefined","res","post","searchParams","Boolean","file","ndjson","hash","toCoreInterface","bytes","name","createOnUploadProgress","size","index","count","length","loaded","position","Math","floor","start","end","mode","mtime","mtimeNsecs","output","path","cid","parse","parseInt","secs","nsecs"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/add-all.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamel = require('./lib/object-to-camel')\nconst configure = require('./lib/configure')\nconst multipartRequest = require('./lib/multipart-request')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst abortSignal = require('./lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nmodule.exports = configure((api) => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body, total, parts } =\n      await multipartRequest(source, controller, options.headers)\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n      // @ts-ignore tsc picks up the node codepath\n      ? createProgressHandler(total, parts, options.progress)\n      : [undefined, undefined]\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    })\n\n    for await (let file of res.ndjson()) {\n      file = toCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) =>\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}