{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst createHash = require(\"./util/createHash\");\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../schemas/plugins/HashedModuleIdsPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/HashedModuleIdsPlugin\").HashedModuleIdsPluginOptions} HashedModuleIdsPluginOptions */\n\n\nclass HashedModuleIdsPlugin {\n  /**\n   * @param {HashedModuleIdsPluginOptions=} options options object\n   */\n  constructor(options) {\n    if (!options) options = {};\n    validateOptions(schema, options, \"Hashed Module Ids Plugin\");\n    /** @type {HashedModuleIdsPluginOptions} */\n\n    this.options = Object.assign({\n      context: null,\n      hashFunction: \"md4\",\n      hashDigest: \"base64\",\n      hashDigestLength: 4\n    }, options);\n  }\n\n  apply(compiler) {\n    const options = this.options;\n    compiler.hooks.compilation.tap(\"HashedModuleIdsPlugin\", compilation => {\n      const usedIds = new Set();\n      compilation.hooks.beforeModuleIds.tap(\"HashedModuleIdsPlugin\", modules => {\n        for (const module of modules) {\n          if (module.id === null && module.libIdent) {\n            const id = module.libIdent({\n              context: this.options.context || compiler.options.context\n            });\n            const hash = createHash(options.hashFunction);\n            hash.update(id);\n            const hashId =\n            /** @type {string} */\n            hash.digest(options.hashDigest);\n            let len = options.hashDigestLength;\n\n            while (usedIds.has(hashId.substr(0, len))) len++;\n\n            module.id = hashId.substr(0, len);\n            usedIds.add(module.id);\n          }\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = HashedModuleIdsPlugin;","map":{"version":3,"names":["createHash","require","validateOptions","schema","HashedModuleIdsPlugin","constructor","options","Object","assign","context","hashFunction","hashDigest","hashDigestLength","apply","compiler","hooks","compilation","tap","usedIds","Set","beforeModuleIds","modules","module","id","libIdent","hash","update","hashId","digest","len","has","substr","add","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/HashedModuleIdsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\nconst createHash = require(\"./util/createHash\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/HashedModuleIdsPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/HashedModuleIdsPlugin\").HashedModuleIdsPluginOptions} HashedModuleIdsPluginOptions */\n\nclass HashedModuleIdsPlugin {\n\t/**\n\t * @param {HashedModuleIdsPluginOptions=} options options object\n\t */\n\tconstructor(options) {\n\t\tif (!options) options = {};\n\n\t\tvalidateOptions(schema, options, \"Hashed Module Ids Plugin\");\n\n\t\t/** @type {HashedModuleIdsPluginOptions} */\n\t\tthis.options = Object.assign(\n\t\t\t{\n\t\t\t\tcontext: null,\n\t\t\t\thashFunction: \"md4\",\n\t\t\t\thashDigest: \"base64\",\n\t\t\t\thashDigestLength: 4\n\t\t\t},\n\t\t\toptions\n\t\t);\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tcompiler.hooks.compilation.tap(\"HashedModuleIdsPlugin\", compilation => {\n\t\t\tconst usedIds = new Set();\n\t\t\tcompilation.hooks.beforeModuleIds.tap(\n\t\t\t\t\"HashedModuleIdsPlugin\",\n\t\t\t\tmodules => {\n\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\tif (module.id === null && module.libIdent) {\n\t\t\t\t\t\t\tconst id = module.libIdent({\n\t\t\t\t\t\t\t\tcontext: this.options.context || compiler.options.context\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tconst hash = createHash(options.hashFunction);\n\t\t\t\t\t\t\thash.update(id);\n\t\t\t\t\t\t\tconst hashId = /** @type {string} */ (hash.digest(\n\t\t\t\t\t\t\t\toptions.hashDigest\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\tlet len = options.hashDigestLength;\n\t\t\t\t\t\t\twhile (usedIds.has(hashId.substr(0, len))) len++;\n\t\t\t\t\t\t\tmodule.id = hashId.substr(0, len);\n\t\t\t\t\t\t\tusedIds.add(module.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = HashedModuleIdsPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA,MAAMA,UAAU,GAAGC,OAAO,CAAC,mBAAD,CAA1B;;AAEA,MAAMC,eAAe,GAAGD,OAAO,CAAC,cAAD,CAA/B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,+CAAD,CAAtB;AAEA;;;AAEA,MAAMG,qBAAN,CAA4B;EAC3B;AACD;AACA;EACCC,WAAW,CAACC,OAAD,EAAU;IACpB,IAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;IAEdJ,eAAe,CAACC,MAAD,EAASG,OAAT,EAAkB,0BAAlB,CAAf;IAEA;;IACA,KAAKA,OAAL,GAAeC,MAAM,CAACC,MAAP,CACd;MACCC,OAAO,EAAE,IADV;MAECC,YAAY,EAAE,KAFf;MAGCC,UAAU,EAAE,QAHb;MAICC,gBAAgB,EAAE;IAJnB,CADc,EAOdN,OAPc,CAAf;EASA;;EAEDO,KAAK,CAACC,QAAD,EAAW;IACf,MAAMR,OAAO,GAAG,KAAKA,OAArB;IACAQ,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,uBAA/B,EAAwDD,WAAW,IAAI;MACtE,MAAME,OAAO,GAAG,IAAIC,GAAJ,EAAhB;MACAH,WAAW,CAACD,KAAZ,CAAkBK,eAAlB,CAAkCH,GAAlC,CACC,uBADD,EAECI,OAAO,IAAI;QACV,KAAK,MAAMC,MAAX,IAAqBD,OAArB,EAA8B;UAC7B,IAAIC,MAAM,CAACC,EAAP,KAAc,IAAd,IAAsBD,MAAM,CAACE,QAAjC,EAA2C;YAC1C,MAAMD,EAAE,GAAGD,MAAM,CAACE,QAAP,CAAgB;cAC1Bf,OAAO,EAAE,KAAKH,OAAL,CAAaG,OAAb,IAAwBK,QAAQ,CAACR,OAAT,CAAiBG;YADxB,CAAhB,CAAX;YAGA,MAAMgB,IAAI,GAAGzB,UAAU,CAACM,OAAO,CAACI,YAAT,CAAvB;YACAe,IAAI,CAACC,MAAL,CAAYH,EAAZ;YACA,MAAMI,MAAM;YAAG;YAAuBF,IAAI,CAACG,MAAL,CACrCtB,OAAO,CAACK,UAD6B,CAAtC;YAGA,IAAIkB,GAAG,GAAGvB,OAAO,CAACM,gBAAlB;;YACA,OAAOM,OAAO,CAACY,GAAR,CAAYH,MAAM,CAACI,MAAP,CAAc,CAAd,EAAiBF,GAAjB,CAAZ,CAAP,EAA2CA,GAAG;;YAC9CP,MAAM,CAACC,EAAP,GAAYI,MAAM,CAACI,MAAP,CAAc,CAAd,EAAiBF,GAAjB,CAAZ;YACAX,OAAO,CAACc,GAAR,CAAYV,MAAM,CAACC,EAAnB;UACA;QACD;MACD,CAnBF;IAqBA,CAvBD;EAwBA;;AA/C0B;;AAkD5BD,MAAM,CAACW,OAAP,GAAiB7B,qBAAjB"},"metadata":{},"sourceType":"script"}