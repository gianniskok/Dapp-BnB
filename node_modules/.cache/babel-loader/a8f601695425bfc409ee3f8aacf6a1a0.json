{"ast":null,"code":"function sleep() {\n  let msec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n  return new Promise(resolve => setTimeout(resolve, msec));\n}\n/**\n * @typedef {import(\"../main\").Transaction} Transaction\n */\n\n/**\n * @typedef {import(\"../main\").EncodedTransaction} EncodedTransaction\n */\n\n/**\n * @description Preparate transactions before send it to the bridge.\n * This method changes all ArrayBuffer to base64.\n * @param {Transaction|EncodedTransaction} transaction Transaction provided by the user\n * @returns {any} Return the same input\n */\n\n\nfunction prepareTxn(transaction) {\n  if (transaction.constructor === Uint8Array) return Buffer.from(transaction).toString(\"base64\");else if (typeof transaction === \"string\") return transaction;\n  const txn = Object.assign({}, transaction);\n  if (txn.note && txn.note.constructor === Uint8Array) txn.note = Buffer.from(txn.note).toString(\"base64\");\n  if (txn.assetMetadataHash && txn.assetMetadataHash.constructor === Uint8Array) txn.assetMetadataHash = Buffer.from(txn.assetMetadataHash).toString(\"base64\");\n  if (txn.group && txn.group.constructor === Uint8Array) txn.group = Buffer.from(txn.group).toString(\"base64\");\n  if (txn.type === \"appl\" && txn.appApprovalProgram && txn.appApprovalProgram.constructor === Uint8Array) txn.appApprovalProgram = Buffer.from(txn.appApprovalProgram).toString(\"base64\");\n  if (txn.type === \"appl\" && txn.appClearProgram && txn.appClearProgram.constructor === Uint8Array) txn.appClearProgram = Buffer.from(txn.appClearProgram).toString(\"base64\");\n  if (txn.type === \"appl\" && txn.appArgs && txn.appArgs.length > 0) for (let i = 0; i < txn.appArgs.length; i++) if (txn.appArgs[i].constructor === Uint8Array) txn.appArgs[i] = Buffer.from(txn.appArgs[i]).toString(\"base64\");\n  return txn;\n}\n\nmodule.exports = {\n  sleep,\n  prepareTxn\n};","map":{"version":3,"names":["sleep","msec","Promise","resolve","setTimeout","prepareTxn","transaction","constructor","Uint8Array","Buffer","from","toString","txn","Object","assign","note","assetMetadataHash","group","type","appApprovalProgram","appClearProgram","appArgs","length","i","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/@randlabs/myalgo-connect/lib/utils/utils.js"],"sourcesContent":["\nfunction sleep(msec = 200) {\n\treturn new Promise(resolve => setTimeout(resolve, msec));\n}\n\n/**\n * @typedef {import(\"../main\").Transaction} Transaction\n */\n\n/**\n * @typedef {import(\"../main\").EncodedTransaction} EncodedTransaction\n */\n\n/**\n * @description Preparate transactions before send it to the bridge.\n * This method changes all ArrayBuffer to base64.\n * @param {Transaction|EncodedTransaction} transaction Transaction provided by the user\n * @returns {any} Return the same input\n */\nfunction prepareTxn(transaction) {\n\n\tif (transaction.constructor === Uint8Array)\n\t\treturn Buffer.from(transaction).toString(\"base64\");\n\telse if (typeof transaction === \"string\")\n\t\treturn transaction;\n\n\tconst txn = Object.assign({}, transaction);\n\n\tif (txn.note && txn.note.constructor === Uint8Array)\n\t\ttxn.note = Buffer.from(txn.note).toString(\"base64\");\n\n\tif (txn.assetMetadataHash && txn.assetMetadataHash.constructor === Uint8Array)\n\t\ttxn.assetMetadataHash = Buffer.from(txn.assetMetadataHash).toString(\"base64\");\n\n\tif (txn.group && txn.group.constructor === Uint8Array)\n\t\ttxn.group = Buffer.from(txn.group).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appApprovalProgram && txn.appApprovalProgram.constructor === Uint8Array)\n\t\ttxn.appApprovalProgram = Buffer.from(txn.appApprovalProgram).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appClearProgram && txn.appClearProgram.constructor === Uint8Array)\n\t\ttxn.appClearProgram = Buffer.from(txn.appClearProgram).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appArgs && txn.appArgs.length > 0)\n\t\tfor (let i = 0; i < txn.appArgs.length; i++)\n\t\t\tif (txn.appArgs[i].constructor === Uint8Array)\n\t\t\t\ttxn.appArgs[i] = Buffer.from(txn.appArgs[i]).toString(\"base64\");\n\n\treturn txn;\n}\n\nmodule.exports = {\n\tsleep,\n\tprepareTxn,\n};\n"],"mappings":"AACA,SAASA,KAAT,GAA2B;EAAA,IAAZC,IAAY,uEAAL,GAAK;EAC1B,OAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,IAAV,CAAjC,CAAP;AACA;AAED;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,UAAT,CAAoBC,WAApB,EAAiC;EAEhC,IAAIA,WAAW,CAACC,WAAZ,KAA4BC,UAAhC,EACC,OAAOC,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBK,QAAzB,CAAkC,QAAlC,CAAP,CADD,KAEK,IAAI,OAAOL,WAAP,KAAuB,QAA3B,EACJ,OAAOA,WAAP;EAED,MAAMM,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,WAAlB,CAAZ;EAEA,IAAIM,GAAG,CAACG,IAAJ,IAAYH,GAAG,CAACG,IAAJ,CAASR,WAAT,KAAyBC,UAAzC,EACCI,GAAG,CAACG,IAAJ,GAAWN,MAAM,CAACC,IAAP,CAAYE,GAAG,CAACG,IAAhB,EAAsBJ,QAAtB,CAA+B,QAA/B,CAAX;EAED,IAAIC,GAAG,CAACI,iBAAJ,IAAyBJ,GAAG,CAACI,iBAAJ,CAAsBT,WAAtB,KAAsCC,UAAnE,EACCI,GAAG,CAACI,iBAAJ,GAAwBP,MAAM,CAACC,IAAP,CAAYE,GAAG,CAACI,iBAAhB,EAAmCL,QAAnC,CAA4C,QAA5C,CAAxB;EAED,IAAIC,GAAG,CAACK,KAAJ,IAAaL,GAAG,CAACK,KAAJ,CAAUV,WAAV,KAA0BC,UAA3C,EACCI,GAAG,CAACK,KAAJ,GAAYR,MAAM,CAACC,IAAP,CAAYE,GAAG,CAACK,KAAhB,EAAuBN,QAAvB,CAAgC,QAAhC,CAAZ;EAED,IAAIC,GAAG,CAACM,IAAJ,KAAa,MAAb,IAAuBN,GAAG,CAACO,kBAA3B,IAAiDP,GAAG,CAACO,kBAAJ,CAAuBZ,WAAvB,KAAuCC,UAA5F,EACCI,GAAG,CAACO,kBAAJ,GAAyBV,MAAM,CAACC,IAAP,CAAYE,GAAG,CAACO,kBAAhB,EAAoCR,QAApC,CAA6C,QAA7C,CAAzB;EAED,IAAIC,GAAG,CAACM,IAAJ,KAAa,MAAb,IAAuBN,GAAG,CAACQ,eAA3B,IAA8CR,GAAG,CAACQ,eAAJ,CAAoBb,WAApB,KAAoCC,UAAtF,EACCI,GAAG,CAACQ,eAAJ,GAAsBX,MAAM,CAACC,IAAP,CAAYE,GAAG,CAACQ,eAAhB,EAAiCT,QAAjC,CAA0C,QAA1C,CAAtB;EAED,IAAIC,GAAG,CAACM,IAAJ,KAAa,MAAb,IAAuBN,GAAG,CAACS,OAA3B,IAAsCT,GAAG,CAACS,OAAJ,CAAYC,MAAZ,GAAqB,CAA/D,EACC,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,GAAG,CAACS,OAAJ,CAAYC,MAAhC,EAAwCC,CAAC,EAAzC,EACC,IAAIX,GAAG,CAACS,OAAJ,CAAYE,CAAZ,EAAehB,WAAf,KAA+BC,UAAnC,EACCI,GAAG,CAACS,OAAJ,CAAYE,CAAZ,IAAiBd,MAAM,CAACC,IAAP,CAAYE,GAAG,CAACS,OAAJ,CAAYE,CAAZ,CAAZ,EAA4BZ,QAA5B,CAAqC,QAArC,CAAjB;EAEH,OAAOC,GAAP;AACA;;AAEDY,MAAM,CAACC,OAAP,GAAiB;EAChBzB,KADgB;EAEhBK;AAFgB,CAAjB"},"metadata":{},"sourceType":"script"}