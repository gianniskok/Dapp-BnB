{"ast":null,"code":"'use strict';\n\nconst convert = require('./convert');\n\nconst protocols = require('./protocols-table');\n\nconst varint = require('varint');\n\nconst {\n  concat: uint8ArrayConcat\n} = require('uint8arrays/concat');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string'); // export codec\n\n\nmodule.exports = {\n  stringToStringTuples,\n  stringTuplesToString,\n  tuplesToStringTuples,\n  stringTuplesToTuples,\n  bytesToTuples,\n  tuplesToBytes,\n  bytesToString,\n  stringToBytes,\n  fromString,\n  fromBytes,\n  validateBytes,\n  isValidBytes,\n  cleanPath,\n  ParseError,\n  protoFromTuple,\n  sizeForAddr\n}; // string -> [[str name, str addr]... ]\n\n/**\n * @param {string} str\n */\n\nfunction stringToStringTuples(str) {\n  const tuples = [];\n  const parts = str.split('/').slice(1); // skip first empty elem\n\n  if (parts.length === 1 && parts[0] === '') {\n    return [];\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p];\n    const proto = protocols(part);\n\n    if (proto.size === 0) {\n      tuples.push([part]);\n      continue;\n    }\n\n    p++; // advance addr part\n\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str);\n    } // if it's a path proto, take the rest\n\n\n    if (proto.path) {\n      tuples.push([part, // TODO: should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      cleanPath(parts.slice(p).join('/'))]);\n      break;\n    }\n\n    tuples.push([part, parts[p]]);\n  }\n\n  return tuples;\n} // [[str name, str addr]... ] -> string\n\n/**\n * @param {[number, string?][]} tuples\n */\n\n\nfunction stringTuplesToString(tuples) {\n  /** @type {Array<string | undefined>} */\n  const parts = [];\n  tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    parts.push(proto.name);\n\n    if (tup.length > 1) {\n      parts.push(tup[1]);\n    }\n\n    return null;\n  });\n  return cleanPath(parts.join('/'));\n} // [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n\n/**\n * @param {Array<string[] | string >} tuples\n * @returns {[number , Uint8Array?][]}\n */\n\n\nfunction stringTuplesToTuples(tuples) {\n  return tuples.map(tup => {\n    if (!Array.isArray(tup)) {\n      tup = [tup];\n    }\n\n    const proto = protoFromTuple(tup);\n\n    if (tup.length > 1) {\n      return [proto.code, convert.toBytes(proto.code, tup[1])];\n    }\n\n    return [proto.code];\n  });\n}\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n *\n * @param {Array<[number, Uint8Array?]>} tuples\n * @returns {Array<[number, string?]>}\n */\n\n\nfunction tuplesToStringTuples(tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n\n    if (tup[1]) {\n      return [proto.code, convert.toString(proto.code, tup[1])];\n    }\n\n    return [proto.code];\n  });\n} // [[int code, Uint8Array ]... ] -> Uint8Array\n\n/**\n * @param {[number, Uint8Array?][]} tuples\n */\n\n\nfunction tuplesToBytes(tuples) {\n  return fromBytes(uint8ArrayConcat(tuples.map((\n  /** @type {any[]} */\n  tup) => {\n    const proto = protoFromTuple(tup);\n    let buf = Uint8Array.from(varint.encode(proto.code));\n\n    if (tup.length > 1) {\n      buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n    }\n\n    return buf;\n  })));\n}\n/**\n * @param {import(\"./types\").Protocol} p\n * @param {Uint8Array | number[]} addr\n */\n\n\nfunction sizeForAddr(p, addr) {\n  if (p.size > 0) {\n    return p.size / 8;\n  } else if (p.size === 0) {\n    return 0;\n  } else {\n    const size = varint.decode(addr);\n    return size + varint.decode.bytes;\n  }\n}\n/**\n *\n * @param {Uint8Array} buf\n * @returns {Array<[number, Uint8Array?]>}\n */\n\n\nfunction bytesToTuples(buf) {\n  /** @type {Array<[number, Uint8Array?]>} */\n  const tuples = [];\n  let i = 0;\n\n  while (i < buf.length) {\n    const code = varint.decode(buf, i);\n    const n = varint.decode.bytes;\n    const p = protocols(code);\n    const size = sizeForAddr(p, buf.slice(i + n));\n\n    if (size === 0) {\n      tuples.push([code]);\n      i += n;\n      continue;\n    }\n\n    const addr = buf.slice(i + n, i + n + size);\n    i += size + n;\n\n    if (i > buf.length) {\n      // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n    } // ok, tuple seems good.\n\n\n    tuples.push([code, addr]);\n  }\n\n  return tuples;\n} // Uint8Array -> String\n\n/**\n * @param {Uint8Array} buf\n */\n\n\nfunction bytesToString(buf) {\n  const a = bytesToTuples(buf);\n  const b = tuplesToStringTuples(a);\n  return stringTuplesToString(b);\n} // String -> Uint8Array\n\n/**\n * @param {string} str\n */\n\n\nfunction stringToBytes(str) {\n  str = cleanPath(str);\n  const a = stringToStringTuples(str);\n  const b = stringTuplesToTuples(a);\n  return tuplesToBytes(b);\n} // String -> Uint8Array\n\n/**\n * @param {string} str\n */\n\n\nfunction fromString(str) {\n  return stringToBytes(str);\n} // Uint8Array -> Uint8Array\n\n/**\n * @param {Uint8Array} buf\n */\n\n\nfunction fromBytes(buf) {\n  const err = validateBytes(buf);\n  if (err) throw err;\n  return Uint8Array.from(buf); // copy\n}\n/**\n * @param {Uint8Array} buf\n */\n\n\nfunction validateBytes(buf) {\n  try {\n    bytesToTuples(buf); // try to parse. will throw if breaks\n  } catch (err) {\n    return err;\n  }\n}\n/**\n * @param {Uint8Array} buf\n */\n\n\nfunction isValidBytes(buf) {\n  return validateBytes(buf) === undefined;\n}\n/**\n * @param {string} str\n */\n\n\nfunction cleanPath(str) {\n  return '/' + str.trim().split('/').filter((\n  /** @type {any} */\n  a) => a).join('/');\n}\n/**\n * @param {string} str\n */\n\n\nfunction ParseError(str) {\n  return new Error('Error parsing address: ' + str);\n}\n/**\n * @param {any[]} tup\n */\n\n\nfunction protoFromTuple(tup) {\n  const proto = protocols(tup[0]);\n  return proto;\n}","map":{"version":3,"names":["convert","require","protocols","varint","concat","uint8ArrayConcat","toString","uint8ArrayToString","module","exports","stringToStringTuples","stringTuplesToString","tuplesToStringTuples","stringTuplesToTuples","bytesToTuples","tuplesToBytes","bytesToString","stringToBytes","fromString","fromBytes","validateBytes","isValidBytes","cleanPath","ParseError","protoFromTuple","sizeForAddr","str","tuples","parts","split","slice","length","p","part","proto","size","push","path","join","map","tup","name","Array","isArray","code","toBytes","buf","Uint8Array","from","encode","addr","decode","bytes","i","n","a","b","err","undefined","trim","filter","Error"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/multiaddr/src/codec.js"],"sourcesContent":["'use strict'\n\nconst convert = require('./convert')\nconst protocols = require('./protocols-table')\nconst varint = require('varint')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\n// export codec\nmodule.exports = {\n  stringToStringTuples,\n  stringTuplesToString,\n\n  tuplesToStringTuples,\n  stringTuplesToTuples,\n\n  bytesToTuples,\n  tuplesToBytes,\n\n  bytesToString,\n  stringToBytes,\n\n  fromString,\n  fromBytes,\n  validateBytes,\n  isValidBytes,\n  cleanPath,\n\n  ParseError,\n  protoFromTuple,\n\n  sizeForAddr\n}\n\n// string -> [[str name, str addr]... ]\n/**\n * @param {string} str\n */\nfunction stringToStringTuples (str) {\n  const tuples = []\n  const parts = str.split('/').slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = protocols(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path) {\n      tuples.push([\n        part,\n        // TODO: should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join('/'))\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n// [[str name, str addr]... ] -> string\n/**\n * @param {[number, string?][]} tuples\n */\nfunction stringTuplesToString (tuples) {\n  /** @type {Array<string | undefined>} */\n  const parts = []\n  tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1) {\n      parts.push(tup[1])\n    }\n    return null\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n// [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n/**\n * @param {Array<string[] | string >} tuples\n * @returns {[number , Uint8Array?][]}\n */\nfunction stringTuplesToTuples (tuples) {\n  return tuples.map((tup) => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toBytes(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n *\n * @param {Array<[number, Uint8Array?]>} tuples\n * @returns {Array<[number, string?]>}\n */\n\nfunction tuplesToStringTuples (tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    if (tup[1]) {\n      return [proto.code, convert.toString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Uint8Array ]... ] -> Uint8Array\n/**\n * @param {[number, Uint8Array?][]} tuples\n */\nfunction tuplesToBytes (tuples) {\n  return fromBytes(uint8ArrayConcat(tuples.map((/** @type {any[]} */ tup) => {\n    const proto = protoFromTuple(tup)\n    let buf = Uint8Array.from(varint.encode(proto.code))\n\n    if (tup.length > 1) {\n      buf = uint8ArrayConcat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  })))\n}\n\n/**\n * @param {import(\"./types\").Protocol} p\n * @param {Uint8Array | number[]} addr\n */\nfunction sizeForAddr (p, addr) {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + varint.decode.bytes\n  }\n}\n\n/**\n *\n * @param {Uint8Array} buf\n * @returns {Array<[number, Uint8Array?]>}\n */\nfunction bytesToTuples (buf) {\n  /** @type {Array<[number, Uint8Array?]>} */\n  const tuples = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = protocols(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n// Uint8Array -> String\n/**\n * @param {Uint8Array} buf\n */\nfunction bytesToString (buf) {\n  const a = bytesToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n// String -> Uint8Array\n/**\n * @param {string} str\n */\nfunction stringToBytes (str) {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBytes(b)\n}\n\n// String -> Uint8Array\n/**\n * @param {string} str\n */\nfunction fromString (str) {\n  return stringToBytes(str)\n}\n\n// Uint8Array -> Uint8Array\n/**\n * @param {Uint8Array} buf\n */\nfunction fromBytes (buf) {\n  const err = validateBytes(buf)\n  if (err) throw err\n  return Uint8Array.from(buf) // copy\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction validateBytes (buf) {\n  try {\n    bytesToTuples(buf) // try to parse. will throw if breaks\n  } catch (err) {\n    return err\n  }\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction isValidBytes (buf) {\n  return validateBytes(buf) === undefined\n}\n\n/**\n * @param {string} str\n */\nfunction cleanPath (str) {\n  return '/' + str.trim().split('/').filter((/** @type {any} */ a) => a).join('/')\n}\n\n/**\n * @param {string} str\n */\nfunction ParseError (str) {\n  return new Error('Error parsing address: ' + str)\n}\n\n/**\n * @param {any[]} tup\n */\nfunction protoFromTuple (tup) {\n  const proto = protocols(tup[0])\n  return proto\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}