{"ast":null,"code":"import * as env from \"@walletconnect/environment\";\nimport { ENCRYPT_OP, DECRYPT_OP, SIGN_OP, VERIFY_OP, AES_BROWSER_ALGO, AES_LENGTH, HMAC_BROWSER_ALGO, HMAC_BROWSER, HMAC_LENGTH, SHA256_BROWSER_ALGO, SHA512_BROWSER_ALGO, LENGTH_512 } from \"../constants\";\nexport function getAlgo(type) {\n  return type === AES_BROWSER_ALGO ? {\n    length: AES_LENGTH,\n    name: AES_BROWSER_ALGO\n  } : {\n    hash: {\n      name: HMAC_BROWSER_ALGO\n    },\n    name: HMAC_BROWSER\n  };\n}\nexport function getOps(type) {\n  return type === AES_BROWSER_ALGO ? [ENCRYPT_OP, DECRYPT_OP] : [SIGN_OP, VERIFY_OP];\n}\nexport async function browserExportKey(cryptoKey) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AES_BROWSER_ALGO;\n  const subtle = env.getSubtleCrypto();\n  return new Uint8Array(await subtle.exportKey(\"raw\", cryptoKey));\n}\nexport async function browserImportKey(buffer) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AES_BROWSER_ALGO;\n  return env.getSubtleCrypto().importKey(\"raw\", buffer, getAlgo(type), true, getOps(type));\n}\nexport async function browserAesEncrypt(iv, key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);\n  const result = await subtle.encrypt({\n    iv,\n    name: AES_BROWSER_ALGO\n  }, cryptoKey, data);\n  return new Uint8Array(result);\n}\nexport async function browserAesDecrypt(iv, key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);\n  const result = await subtle.decrypt({\n    iv,\n    name: AES_BROWSER_ALGO\n  }, cryptoKey, data);\n  return new Uint8Array(result);\n}\nexport async function browserHmacSha256Sign(key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, HMAC_BROWSER);\n  const signature = await subtle.sign({\n    length: HMAC_LENGTH,\n    name: HMAC_BROWSER\n  }, cryptoKey, data);\n  return new Uint8Array(signature);\n}\nexport async function browserHmacSha512Sign(key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, HMAC_BROWSER);\n  const signature = await subtle.sign({\n    length: LENGTH_512,\n    name: HMAC_BROWSER\n  }, cryptoKey, data);\n  return new Uint8Array(signature);\n}\nexport async function browserSha256(data) {\n  const subtle = env.getSubtleCrypto();\n  const result = await subtle.digest({\n    name: SHA256_BROWSER_ALGO\n  }, data);\n  return new Uint8Array(result);\n}\nexport async function browserSha512(data) {\n  const subtle = env.getSubtleCrypto();\n  const result = await subtle.digest({\n    name: SHA512_BROWSER_ALGO\n  }, data);\n  return new Uint8Array(result);\n}","map":{"version":3,"mappings":"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","names":["env","ENCRYPT_OP","DECRYPT_OP","SIGN_OP","VERIFY_OP","AES_BROWSER_ALGO","AES_LENGTH","HMAC_BROWSER_ALGO","HMAC_BROWSER","HMAC_LENGTH","SHA256_BROWSER_ALGO","SHA512_BROWSER_ALGO","LENGTH_512","getAlgo","type","length","name","hash","getOps","browserExportKey","cryptoKey","subtle","getSubtleCrypto","Uint8Array","exportKey","browserImportKey","buffer","importKey","browserAesEncrypt","iv","key","data","result","encrypt","browserAesDecrypt","decrypt","browserHmacSha256Sign","signature","sign","browserHmacSha512Sign","browserSha256","digest","browserSha512"],"sourceRoot":"","sources":["../../../src/lib/browser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}