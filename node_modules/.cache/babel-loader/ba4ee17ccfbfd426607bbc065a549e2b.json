{"ast":null,"code":"import { parsePersonalSign, parseTransactionData, convertArrayBufferToHex, convertHexToArrayBuffer, getClientMeta, payloadId, uuid, formatRpcError, parseWalletConnectUri, convertNumberToHex, isJsonRpcResponseSuccess, isJsonRpcResponseError, isSilentPayload, getLocal, signingMethods, mobileLinkChoiceKey, isMobile, removeLocal } from \"@walletconnect/utils\";\nimport SocketTransport from \"@walletconnect/socket-transport\";\nimport { ERROR_SESSION_CONNECTED, ERROR_SESSION_DISCONNECTED, ERROR_SESSION_REJECTED, ERROR_MISSING_JSON_RPC, ERROR_MISSING_RESULT, ERROR_MISSING_ERROR, ERROR_MISSING_METHOD, ERROR_MISSING_ID, ERROR_INVALID_RESPONSE, ERROR_INVALID_URI, ERROR_MISSING_REQUIRED, ERROR_QRCODE_MODAL_NOT_PROVIDED, ERROR_QRCODE_MODAL_USER_CLOSED } from \"./errors\";\nimport EventManager from \"./events\";\nimport SessionStorage from \"./storage\";\nimport { getBridgeUrl } from \"./url\";\n\nclass Connector {\n  constructor(opts) {\n    this.protocol = \"wc\";\n    this.version = 1;\n    this._bridge = \"\";\n    this._key = null;\n    this._clientId = \"\";\n    this._clientMeta = null;\n    this._peerId = \"\";\n    this._peerMeta = null;\n    this._handshakeId = 0;\n    this._handshakeTopic = \"\";\n    this._connected = false;\n    this._accounts = [];\n    this._chainId = 0;\n    this._networkId = 0;\n    this._rpcUrl = \"\";\n    this._eventManager = new EventManager();\n    this._clientMeta = getClientMeta() || opts.connectorOpts.clientMeta || null;\n    this._cryptoLib = opts.cryptoLib;\n    this._sessionStorage = opts.sessionStorage || new SessionStorage(opts.connectorOpts.storageId);\n    this._qrcodeModal = opts.connectorOpts.qrcodeModal;\n    this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;\n    this._signingMethods = [...signingMethods, ...(opts.connectorOpts.signingMethods || [])];\n\n    if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {\n      throw new Error(ERROR_MISSING_REQUIRED);\n    }\n\n    if (opts.connectorOpts.bridge) {\n      this.bridge = getBridgeUrl(opts.connectorOpts.bridge);\n    }\n\n    if (opts.connectorOpts.uri) {\n      this.uri = opts.connectorOpts.uri;\n    }\n\n    const session = opts.connectorOpts.session || this._getStorageSession();\n\n    if (session) {\n      this.session = session;\n    }\n\n    if (this.handshakeId) {\n      this._subscribeToSessionResponse(this.handshakeId, \"Session request rejected\");\n    }\n\n    this._transport = opts.transport || new SocketTransport({\n      protocol: this.protocol,\n      version: this.version,\n      url: this.bridge,\n      subscriptions: [this.clientId]\n    });\n\n    this._subscribeToInternalEvents();\n\n    this._initTransport();\n\n    if (opts.connectorOpts.uri) {\n      this._subscribeToSessionRequest();\n    }\n\n    if (opts.pushServerOpts) {\n      this._registerPushServer(opts.pushServerOpts);\n    }\n  }\n\n  set bridge(value) {\n    if (!value) {\n      return;\n    }\n\n    this._bridge = value;\n  }\n\n  get bridge() {\n    return this._bridge;\n  }\n\n  set key(value) {\n    if (!value) {\n      return;\n    }\n\n    const key = convertHexToArrayBuffer(value);\n    this._key = key;\n  }\n\n  get key() {\n    if (this._key) {\n      const key = convertArrayBufferToHex(this._key, true);\n      return key;\n    }\n\n    return \"\";\n  }\n\n  set clientId(value) {\n    if (!value) {\n      return;\n    }\n\n    this._clientId = value;\n  }\n\n  get clientId() {\n    let clientId = this._clientId;\n\n    if (!clientId) {\n      clientId = this._clientId = uuid();\n    }\n\n    return this._clientId;\n  }\n\n  set peerId(value) {\n    if (!value) {\n      return;\n    }\n\n    this._peerId = value;\n  }\n\n  get peerId() {\n    return this._peerId;\n  }\n\n  set clientMeta(value) {}\n\n  get clientMeta() {\n    let clientMeta = this._clientMeta;\n\n    if (!clientMeta) {\n      clientMeta = this._clientMeta = getClientMeta();\n    }\n\n    return clientMeta;\n  }\n\n  set peerMeta(value) {\n    this._peerMeta = value;\n  }\n\n  get peerMeta() {\n    const peerMeta = this._peerMeta;\n    return peerMeta;\n  }\n\n  set handshakeTopic(value) {\n    if (!value) {\n      return;\n    }\n\n    this._handshakeTopic = value;\n  }\n\n  get handshakeTopic() {\n    return this._handshakeTopic;\n  }\n\n  set handshakeId(value) {\n    if (!value) {\n      return;\n    }\n\n    this._handshakeId = value;\n  }\n\n  get handshakeId() {\n    return this._handshakeId;\n  }\n\n  get uri() {\n    const _uri = this._formatUri();\n\n    return _uri;\n  }\n\n  set uri(value) {\n    if (!value) {\n      return;\n    }\n\n    const {\n      handshakeTopic,\n      bridge,\n      key\n    } = this._parseUri(value);\n\n    this.handshakeTopic = handshakeTopic;\n    this.bridge = bridge;\n    this.key = key;\n  }\n\n  set chainId(value) {\n    this._chainId = value;\n  }\n\n  get chainId() {\n    const chainId = this._chainId;\n    return chainId;\n  }\n\n  set networkId(value) {\n    this._networkId = value;\n  }\n\n  get networkId() {\n    const networkId = this._networkId;\n    return networkId;\n  }\n\n  set accounts(value) {\n    this._accounts = value;\n  }\n\n  get accounts() {\n    const accounts = this._accounts;\n    return accounts;\n  }\n\n  set rpcUrl(value) {\n    this._rpcUrl = value;\n  }\n\n  get rpcUrl() {\n    const rpcUrl = this._rpcUrl;\n    return rpcUrl;\n  }\n\n  set connected(value) {}\n\n  get connected() {\n    return this._connected;\n  }\n\n  set pending(value) {}\n\n  get pending() {\n    return !!this._handshakeTopic;\n  }\n\n  get session() {\n    return {\n      connected: this.connected,\n      accounts: this.accounts,\n      chainId: this.chainId,\n      bridge: this.bridge,\n      key: this.key,\n      clientId: this.clientId,\n      clientMeta: this.clientMeta,\n      peerId: this.peerId,\n      peerMeta: this.peerMeta,\n      handshakeId: this.handshakeId,\n      handshakeTopic: this.handshakeTopic\n    };\n  }\n\n  set session(value) {\n    if (!value) {\n      return;\n    }\n\n    this._connected = value.connected;\n    this.accounts = value.accounts;\n    this.chainId = value.chainId;\n    this.bridge = value.bridge;\n    this.key = value.key;\n    this.clientId = value.clientId;\n    this.clientMeta = value.clientMeta;\n    this.peerId = value.peerId;\n    this.peerMeta = value.peerMeta;\n    this.handshakeId = value.handshakeId;\n    this.handshakeTopic = value.handshakeTopic;\n  }\n\n  on(event, callback) {\n    const eventEmitter = {\n      event,\n      callback\n    };\n\n    this._eventManager.subscribe(eventEmitter);\n  }\n\n  off(event) {\n    this._eventManager.unsubscribe(event);\n  }\n\n  async createInstantRequest(instantRequest) {\n    this._key = await this._generateKey();\n\n    const request = this._formatRequest({\n      method: \"wc_instantRequest\",\n      params: [{\n        peerId: this.clientId,\n        peerMeta: this.clientMeta,\n        request: this._formatRequest(instantRequest)\n      }]\n    });\n\n    this.handshakeId = request.id;\n    this.handshakeTopic = uuid();\n\n    this._eventManager.trigger({\n      event: \"display_uri\",\n      params: [this.uri]\n    });\n\n    this.on(\"modal_closed\", () => {\n      throw new Error(ERROR_QRCODE_MODAL_USER_CLOSED);\n    });\n\n    const endInstantRequest = () => {\n      this.killSession();\n    };\n\n    try {\n      const result = await this._sendCallRequest(request);\n\n      if (result) {\n        endInstantRequest();\n      }\n\n      return result;\n    } catch (error) {\n      endInstantRequest();\n      throw error;\n    }\n  }\n\n  async connect(opts) {\n    if (!this._qrcodeModal) {\n      throw new Error(ERROR_QRCODE_MODAL_NOT_PROVIDED);\n    }\n\n    if (this.connected) {\n      return {\n        chainId: this.chainId,\n        accounts: this.accounts\n      };\n    }\n\n    await this.createSession(opts);\n    return new Promise(async (resolve, reject) => {\n      this.on(\"modal_closed\", () => reject(new Error(ERROR_QRCODE_MODAL_USER_CLOSED)));\n      this.on(\"connect\", (error, payload) => {\n        if (error) {\n          return reject(error);\n        }\n\n        resolve(payload.params[0]);\n      });\n    });\n  }\n\n  async createSession(opts) {\n    if (this._connected) {\n      throw new Error(ERROR_SESSION_CONNECTED);\n    }\n\n    if (this.pending) {\n      return;\n    }\n\n    this._key = await this._generateKey();\n\n    const request = this._formatRequest({\n      method: \"wc_sessionRequest\",\n      params: [{\n        peerId: this.clientId,\n        peerMeta: this.clientMeta,\n        chainId: opts && opts.chainId ? opts.chainId : null\n      }]\n    });\n\n    this.handshakeId = request.id;\n    this.handshakeTopic = uuid();\n\n    this._sendSessionRequest(request, \"Session update rejected\", {\n      topic: this.handshakeTopic\n    });\n\n    this._eventManager.trigger({\n      event: \"display_uri\",\n      params: [this.uri]\n    });\n  }\n\n  approveSession(sessionStatus) {\n    if (this._connected) {\n      throw new Error(ERROR_SESSION_CONNECTED);\n    }\n\n    this.chainId = sessionStatus.chainId;\n    this.accounts = sessionStatus.accounts;\n    this.networkId = sessionStatus.networkId || 0;\n    this.rpcUrl = sessionStatus.rpcUrl || \"\";\n    const sessionParams = {\n      approved: true,\n      chainId: this.chainId,\n      networkId: this.networkId,\n      accounts: this.accounts,\n      rpcUrl: this.rpcUrl,\n      peerId: this.clientId,\n      peerMeta: this.clientMeta\n    };\n    const response = {\n      id: this.handshakeId,\n      jsonrpc: \"2.0\",\n      result: sessionParams\n    };\n\n    this._sendResponse(response);\n\n    this._connected = true;\n\n    this._setStorageSession();\n\n    this._eventManager.trigger({\n      event: \"connect\",\n      params: [{\n        peerId: this.peerId,\n        peerMeta: this.peerMeta,\n        chainId: this.chainId,\n        accounts: this.accounts\n      }]\n    });\n  }\n\n  rejectSession(sessionError) {\n    if (this._connected) {\n      throw new Error(ERROR_SESSION_CONNECTED);\n    }\n\n    const message = sessionError && sessionError.message ? sessionError.message : ERROR_SESSION_REJECTED;\n\n    const response = this._formatResponse({\n      id: this.handshakeId,\n      error: {\n        message\n      }\n    });\n\n    this._sendResponse(response);\n\n    this._connected = false;\n\n    this._eventManager.trigger({\n      event: \"disconnect\",\n      params: [{\n        message\n      }]\n    });\n\n    this._removeStorageSession();\n  }\n\n  updateSession(sessionStatus) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n\n    this.chainId = sessionStatus.chainId;\n    this.accounts = sessionStatus.accounts;\n    this.networkId = sessionStatus.networkId || 0;\n    this.rpcUrl = sessionStatus.rpcUrl || \"\";\n    const sessionParams = {\n      approved: true,\n      chainId: this.chainId,\n      networkId: this.networkId,\n      accounts: this.accounts,\n      rpcUrl: this.rpcUrl\n    };\n\n    const request = this._formatRequest({\n      method: \"wc_sessionUpdate\",\n      params: [sessionParams]\n    });\n\n    this._sendSessionRequest(request, \"Session update rejected\");\n\n    this._eventManager.trigger({\n      event: \"session_update\",\n      params: [{\n        chainId: this.chainId,\n        accounts: this.accounts\n      }]\n    });\n\n    this._manageStorageSession();\n  }\n\n  async killSession(sessionError) {\n    const message = sessionError ? sessionError.message : \"Session Disconnected\";\n    const sessionParams = {\n      approved: false,\n      chainId: null,\n      networkId: null,\n      accounts: null\n    };\n\n    const request = this._formatRequest({\n      method: \"wc_sessionUpdate\",\n      params: [sessionParams]\n    });\n\n    await this._sendRequest(request);\n\n    this._handleSessionDisconnect(message);\n  }\n\n  async sendTransaction(tx) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n\n    const parsedTx = parseTransactionData(tx);\n\n    const request = this._formatRequest({\n      method: \"eth_sendTransaction\",\n      params: [parsedTx]\n    });\n\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n\n  async signTransaction(tx) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n\n    const parsedTx = parseTransactionData(tx);\n\n    const request = this._formatRequest({\n      method: \"eth_signTransaction\",\n      params: [parsedTx]\n    });\n\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n\n  async signMessage(params) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n\n    const request = this._formatRequest({\n      method: \"eth_sign\",\n      params\n    });\n\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n\n  async signPersonalMessage(params) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n\n    params = parsePersonalSign(params);\n\n    const request = this._formatRequest({\n      method: \"personal_sign\",\n      params\n    });\n\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n\n  async signTypedData(params) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n\n    const request = this._formatRequest({\n      method: \"eth_signTypedData\",\n      params\n    });\n\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n\n  async updateChain(chainParams) {\n    if (!this._connected) {\n      throw new Error(\"Session currently disconnected\");\n    }\n\n    const request = this._formatRequest({\n      method: \"wallet_updateChain\",\n      params: [chainParams]\n    });\n\n    const result = await this._sendCallRequest(request);\n    return result;\n  }\n\n  unsafeSend(request, options) {\n    this._sendRequest(request, options);\n\n    this._eventManager.trigger({\n      event: \"call_request_sent\",\n      params: [{\n        request,\n        options\n      }]\n    });\n\n    return new Promise((resolve, reject) => {\n      this._subscribeToResponse(request.id, (error, payload) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        if (!payload) {\n          throw new Error(ERROR_MISSING_JSON_RPC);\n        }\n\n        resolve(payload);\n      });\n    });\n  }\n\n  async sendCustomRequest(request, options) {\n    if (!this._connected) {\n      throw new Error(ERROR_SESSION_DISCONNECTED);\n    }\n\n    switch (request.method) {\n      case \"eth_accounts\":\n        return this.accounts;\n\n      case \"eth_chainId\":\n        return convertNumberToHex(this.chainId);\n\n      case \"eth_sendTransaction\":\n      case \"eth_signTransaction\":\n        if (request.params) {\n          request.params[0] = parseTransactionData(request.params[0]);\n        }\n\n        break;\n\n      case \"personal_sign\":\n        if (request.params) {\n          request.params = parsePersonalSign(request.params);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    const formattedRequest = this._formatRequest(request);\n\n    const result = await this._sendCallRequest(formattedRequest, options);\n    return result;\n  }\n\n  approveRequest(response) {\n    if (isJsonRpcResponseSuccess(response)) {\n      const formattedResponse = this._formatResponse(response);\n\n      this._sendResponse(formattedResponse);\n    } else {\n      throw new Error(ERROR_MISSING_RESULT);\n    }\n  }\n\n  rejectRequest(response) {\n    if (isJsonRpcResponseError(response)) {\n      const formattedResponse = this._formatResponse(response);\n\n      this._sendResponse(formattedResponse);\n    } else {\n      throw new Error(ERROR_MISSING_ERROR);\n    }\n  }\n\n  transportClose() {\n    this._transport.close();\n  }\n\n  async _sendRequest(request, options) {\n    const callRequest = this._formatRequest(request);\n\n    const encryptionPayload = await this._encrypt(callRequest);\n    const topic = typeof (options === null || options === void 0 ? void 0 : options.topic) !== \"undefined\" ? options.topic : this.peerId;\n    const payload = JSON.stringify(encryptionPayload);\n    const silent = typeof (options === null || options === void 0 ? void 0 : options.forcePushNotification) !== \"undefined\" ? !options.forcePushNotification : isSilentPayload(callRequest);\n\n    this._transport.send(payload, topic, silent);\n  }\n\n  async _sendResponse(response) {\n    const encryptionPayload = await this._encrypt(response);\n    const topic = this.peerId;\n    const payload = JSON.stringify(encryptionPayload);\n    const silent = true;\n\n    this._transport.send(payload, topic, silent);\n  }\n\n  async _sendSessionRequest(request, errorMsg, options) {\n    this._sendRequest(request, options);\n\n    this._subscribeToSessionResponse(request.id, errorMsg);\n  }\n\n  _sendCallRequest(request, options) {\n    this._sendRequest(request, options);\n\n    this._eventManager.trigger({\n      event: \"call_request_sent\",\n      params: [{\n        request,\n        options\n      }]\n    });\n\n    return this._subscribeToCallResponse(request.id);\n  }\n\n  _formatRequest(request) {\n    if (typeof request.method === \"undefined\") {\n      throw new Error(ERROR_MISSING_METHOD);\n    }\n\n    const formattedRequest = {\n      id: typeof request.id === \"undefined\" ? payloadId() : request.id,\n      jsonrpc: \"2.0\",\n      method: request.method,\n      params: typeof request.params === \"undefined\" ? [] : request.params\n    };\n    return formattedRequest;\n  }\n\n  _formatResponse(response) {\n    if (typeof response.id === \"undefined\") {\n      throw new Error(ERROR_MISSING_ID);\n    }\n\n    const baseResponse = {\n      id: response.id,\n      jsonrpc: \"2.0\"\n    };\n\n    if (isJsonRpcResponseError(response)) {\n      const error = formatRpcError(response.error);\n      const errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), {\n        error\n      });\n      return errorResponse;\n    } else if (isJsonRpcResponseSuccess(response)) {\n      const successResponse = Object.assign(Object.assign({}, baseResponse), response);\n      return successResponse;\n    }\n\n    throw new Error(ERROR_INVALID_RESPONSE);\n  }\n\n  _handleSessionDisconnect(errorMsg) {\n    const message = errorMsg || \"Session Disconnected\";\n\n    if (!this._connected) {\n      if (this._qrcodeModal) {\n        this._qrcodeModal.close();\n      }\n\n      removeLocal(mobileLinkChoiceKey);\n    }\n\n    if (this._connected) {\n      this._connected = false;\n    }\n\n    if (this._handshakeId) {\n      this._handshakeId = 0;\n    }\n\n    if (this._handshakeTopic) {\n      this._handshakeTopic = \"\";\n    }\n\n    if (this._peerId) {\n      this._peerId = \"\";\n    }\n\n    this._eventManager.trigger({\n      event: \"disconnect\",\n      params: [{\n        message\n      }]\n    });\n\n    this._removeStorageSession();\n\n    this.transportClose();\n  }\n\n  _handleSessionResponse(errorMsg, sessionParams) {\n    if (sessionParams) {\n      if (sessionParams.approved) {\n        if (!this._connected) {\n          this._connected = true;\n\n          if (sessionParams.chainId) {\n            this.chainId = sessionParams.chainId;\n          }\n\n          if (sessionParams.accounts) {\n            this.accounts = sessionParams.accounts;\n          }\n\n          if (sessionParams.peerId && !this.peerId) {\n            this.peerId = sessionParams.peerId;\n          }\n\n          if (sessionParams.peerMeta && !this.peerMeta) {\n            this.peerMeta = sessionParams.peerMeta;\n          }\n\n          this._eventManager.trigger({\n            event: \"connect\",\n            params: [{\n              peerId: this.peerId,\n              peerMeta: this.peerMeta,\n              chainId: this.chainId,\n              accounts: this.accounts\n            }]\n          });\n        } else {\n          if (sessionParams.chainId) {\n            this.chainId = sessionParams.chainId;\n          }\n\n          if (sessionParams.accounts) {\n            this.accounts = sessionParams.accounts;\n          }\n\n          this._eventManager.trigger({\n            event: \"session_update\",\n            params: [{\n              chainId: this.chainId,\n              accounts: this.accounts\n            }]\n          });\n        }\n\n        this._manageStorageSession();\n      } else {\n        this._handleSessionDisconnect(errorMsg);\n      }\n    } else {\n      this._handleSessionDisconnect(errorMsg);\n    }\n  }\n\n  async _handleIncomingMessages(socketMessage) {\n    const activeTopics = [this.clientId, this.handshakeTopic];\n\n    if (!activeTopics.includes(socketMessage.topic)) {\n      return;\n    }\n\n    let encryptionPayload;\n\n    try {\n      encryptionPayload = JSON.parse(socketMessage.payload);\n    } catch (error) {\n      return;\n    }\n\n    const payload = await this._decrypt(encryptionPayload);\n\n    if (payload) {\n      this._eventManager.trigger(payload);\n    }\n  }\n\n  _subscribeToSessionRequest() {\n    this._transport.subscribe(this.handshakeTopic);\n  }\n\n  _subscribeToResponse(id, callback) {\n    this.on(`response:${id}`, callback);\n  }\n\n  _subscribeToSessionResponse(id, errorMsg) {\n    this._subscribeToResponse(id, (error, payload) => {\n      if (error) {\n        this._handleSessionResponse(error.message);\n\n        return;\n      }\n\n      if (isJsonRpcResponseSuccess(payload)) {\n        this._handleSessionResponse(errorMsg, payload.result);\n      } else if (payload.error && payload.error.message) {\n        this._handleSessionResponse(payload.error.message);\n      } else {\n        this._handleSessionResponse(errorMsg);\n      }\n    });\n  }\n\n  _subscribeToCallResponse(id) {\n    return new Promise((resolve, reject) => {\n      this._subscribeToResponse(id, (error, payload) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        if (isJsonRpcResponseSuccess(payload)) {\n          resolve(payload.result);\n        } else if (payload.error && payload.error.message) {\n          reject(payload.error);\n        } else {\n          reject(new Error(ERROR_INVALID_RESPONSE));\n        }\n      });\n    });\n  }\n\n  _subscribeToInternalEvents() {\n    this.on(\"display_uri\", () => {\n      if (this._qrcodeModal) {\n        this._qrcodeModal.open(this.uri, () => {\n          this._eventManager.trigger({\n            event: \"modal_closed\",\n            params: []\n          });\n        }, this._qrcodeModalOptions);\n      }\n    });\n    this.on(\"connect\", () => {\n      if (this._qrcodeModal) {\n        this._qrcodeModal.close();\n      }\n    });\n    this.on(\"call_request_sent\", (error, payload) => {\n      const {\n        request\n      } = payload.params[0];\n\n      if (isMobile() && this._signingMethods.includes(request.method)) {\n        const mobileLinkUrl = getLocal(mobileLinkChoiceKey);\n\n        if (mobileLinkUrl) {\n          window.location.href = mobileLinkUrl.href;\n        }\n      }\n    });\n    this.on(\"wc_sessionRequest\", (error, payload) => {\n      if (error) {\n        this._eventManager.trigger({\n          event: \"error\",\n          params: [{\n            code: \"SESSION_REQUEST_ERROR\",\n            message: error.toString()\n          }]\n        });\n      }\n\n      this.handshakeId = payload.id;\n      this.peerId = payload.params[0].peerId;\n      this.peerMeta = payload.params[0].peerMeta;\n      const internalPayload = Object.assign(Object.assign({}, payload), {\n        method: \"session_request\"\n      });\n\n      this._eventManager.trigger(internalPayload);\n    });\n    this.on(\"wc_sessionUpdate\", (error, payload) => {\n      if (error) {\n        this._handleSessionResponse(error.message);\n      }\n\n      this._handleSessionResponse(\"Session disconnected\", payload.params[0]);\n    });\n  }\n\n  _initTransport() {\n    this._transport.on(\"message\", socketMessage => this._handleIncomingMessages(socketMessage));\n\n    this._transport.on(\"open\", () => this._eventManager.trigger({\n      event: \"transport_open\",\n      params: []\n    }));\n\n    this._transport.on(\"close\", () => this._eventManager.trigger({\n      event: \"transport_close\",\n      params: []\n    }));\n\n    this._transport.on(\"error\", () => this._eventManager.trigger({\n      event: \"transport_error\",\n      params: [\"Websocket connection failed\"]\n    }));\n\n    this._transport.open();\n  }\n\n  _formatUri() {\n    const protocol = this.protocol;\n    const handshakeTopic = this.handshakeTopic;\n    const version = this.version;\n    const bridge = encodeURIComponent(this.bridge);\n    const key = this.key;\n    const uri = `${protocol}:${handshakeTopic}@${version}?bridge=${bridge}&key=${key}`;\n    return uri;\n  }\n\n  _parseUri(uri) {\n    const result = parseWalletConnectUri(uri);\n\n    if (result.protocol === this.protocol) {\n      if (!result.handshakeTopic) {\n        throw Error(\"Invalid or missing handshakeTopic parameter value\");\n      }\n\n      const handshakeTopic = result.handshakeTopic;\n\n      if (!result.bridge) {\n        throw Error(\"Invalid or missing bridge url parameter value\");\n      }\n\n      const bridge = decodeURIComponent(result.bridge);\n\n      if (!result.key) {\n        throw Error(\"Invalid or missing key parameter value\");\n      }\n\n      const key = result.key;\n      return {\n        handshakeTopic,\n        bridge,\n        key\n      };\n    } else {\n      throw new Error(ERROR_INVALID_URI);\n    }\n  }\n\n  async _generateKey() {\n    if (this._cryptoLib) {\n      const result = await this._cryptoLib.generateKey();\n      return result;\n    }\n\n    return null;\n  }\n\n  async _encrypt(data) {\n    const key = this._key;\n\n    if (this._cryptoLib && key) {\n      const result = await this._cryptoLib.encrypt(data, key);\n      return result;\n    }\n\n    return null;\n  }\n\n  async _decrypt(payload) {\n    const key = this._key;\n\n    if (this._cryptoLib && key) {\n      const result = await this._cryptoLib.decrypt(payload, key);\n      return result;\n    }\n\n    return null;\n  }\n\n  _getStorageSession() {\n    let result = null;\n\n    if (this._sessionStorage) {\n      result = this._sessionStorage.getSession();\n    }\n\n    return result;\n  }\n\n  _setStorageSession() {\n    if (this._sessionStorage) {\n      this._sessionStorage.setSession(this.session);\n    }\n  }\n\n  _removeStorageSession() {\n    if (this._sessionStorage) {\n      this._sessionStorage.removeSession();\n    }\n  }\n\n  _manageStorageSession() {\n    if (this._connected) {\n      this._setStorageSession();\n    } else {\n      this._removeStorageSession();\n    }\n  }\n\n  _registerPushServer(pushServerOpts) {\n    if (!pushServerOpts.url || typeof pushServerOpts.url !== \"string\") {\n      throw Error(\"Invalid or missing pushServerOpts.url parameter value\");\n    }\n\n    if (!pushServerOpts.type || typeof pushServerOpts.type !== \"string\") {\n      throw Error(\"Invalid or missing pushServerOpts.type parameter value\");\n    }\n\n    if (!pushServerOpts.token || typeof pushServerOpts.token !== \"string\") {\n      throw Error(\"Invalid or missing pushServerOpts.token parameter value\");\n    }\n\n    const pushSubscription = {\n      bridge: this.bridge,\n      topic: this.clientId,\n      type: pushServerOpts.type,\n      token: pushServerOpts.token,\n      peerName: \"\",\n      language: pushServerOpts.language || \"\"\n    };\n    this.on(\"connect\", async (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      if (pushServerOpts.peerMeta) {\n        const peerName = payload.params[0].peerMeta.name;\n        pushSubscription.peerName = peerName;\n      }\n\n      try {\n        const response = await fetch(`${pushServerOpts.url}/new`, {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(pushSubscription)\n        });\n        const json = await response.json();\n\n        if (!json.success) {\n          throw Error(\"Failed to register in Push Server\");\n        }\n      } catch (error) {\n        throw Error(\"Failed to register in Push Server\");\n      }\n    });\n  }\n\n}\n\nexport default Connector;","map":{"version":3,"mappings":"AA2BA,SACEA,iBADF,EAEEC,oBAFF,EAGEC,uBAHF,EAIEC,uBAJF,EAKEC,aALF,EAMEC,SANF,EAOEC,IAPF,EAQEC,cARF,EASEC,qBATF,EAUEC,kBAVF,EAWEC,wBAXF,EAYEC,sBAZF,EAaEC,eAbF,EAcEC,QAdF,EAeEC,cAfF,EAgBEC,mBAhBF,EAiBEC,QAjBF,EAkBEC,WAlBF,QAmBO,sBAnBP;AAoBA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,SACEC,uBADF,EAEEC,0BAFF,EAGEC,sBAHF,EAIEC,sBAJF,EAKEC,oBALF,EAMEC,mBANF,EAOEC,oBAPF,EAQEC,gBARF,EASEC,sBATF,EAUEC,iBAVF,EAWEC,sBAXF,EAYEC,+BAZF,EAaEC,8BAbF,QAcO,UAdP;AAeA,OAAOC,YAAP,MAAyB,UAAzB;AACA,OAAOC,cAAP,MAA2B,WAA3B;AACA,SAASC,YAAT,QAA6B,OAA7B;;AAIA,MAAMC,SAAN,CAAe;EAkDbC,YAAYC,IAAZ,EAAgC;IAjDhB,gBAAW,IAAX;IACA,eAAU,CAAV;IAIR,eAAU,EAAV;IACA,YAA2B,IAA3B;IAIA,iBAAY,EAAZ;IACA,mBAAkC,IAAlC;IAIA,eAAU,EAAV;IACA,iBAAgC,IAAhC;IAIA,oBAAe,CAAf;IACA,uBAAkB,EAAlB;IAIA,kBAAa,KAAb;IACA,iBAAsB,EAAtB;IACA,gBAAW,CAAX;IACA,kBAAa,CAAb;IACA,eAAU,EAAV;IAMA,qBAA8B,IAAIL,YAAJ,EAA9B;IAeN,KAAKM,WAAL,GAAmBlC,aAAa,MAAMiC,IAAI,CAACE,aAAL,CAAmBC,UAAtC,IAAoD,IAAvE;IACA,KAAKC,UAAL,GAAkBJ,IAAI,CAACK,SAAvB;IACA,KAAKC,eAAL,GAAuBN,IAAI,CAACO,cAAL,IAAuB,IAAIX,cAAJ,CAAmBI,IAAI,CAACE,aAAL,CAAmBM,SAAtC,CAA9C;IACA,KAAKC,YAAL,GAAoBT,IAAI,CAACE,aAAL,CAAmBQ,WAAvC;IACA,KAAKC,mBAAL,GAA2BX,IAAI,CAACE,aAAL,CAAmBU,kBAA9C;IACA,KAAKC,eAAL,GAAuB,CAAC,GAAGpC,cAAJ,EAAoB,IAAIuB,IAAI,CAACE,aAAL,CAAmBzB,cAAnB,IAAqC,EAAzC,CAApB,CAAvB;;IAEA,IAAI,CAACuB,IAAI,CAACE,aAAL,CAAmBY,MAApB,IAA8B,CAACd,IAAI,CAACE,aAAL,CAAmBa,GAAlD,IAAyD,CAACf,IAAI,CAACE,aAAL,CAAmBc,OAAjF,EAA0F;MACxF,MAAM,IAAIC,KAAJ,CAAUzB,sBAAV,CAAN;IACD;;IAED,IAAIQ,IAAI,CAACE,aAAL,CAAmBY,MAAvB,EAA+B;MAC7B,KAAKA,MAAL,GAAcjB,YAAY,CAACG,IAAI,CAACE,aAAL,CAAmBY,MAApB,CAA1B;IACD;;IAED,IAAId,IAAI,CAACE,aAAL,CAAmBa,GAAvB,EAA4B;MAC1B,KAAKA,GAAL,GAAWf,IAAI,CAACE,aAAL,CAAmBa,GAA9B;IACD;;IAED,MAAMC,OAAO,GAAGhB,IAAI,CAACE,aAAL,CAAmBc,OAAnB,IAA8B,KAAKE,kBAAL,EAA9C;;IAEA,IAAIF,OAAJ,EAAa;MACX,KAAKA,OAAL,GAAeA,OAAf;IACD;;IAED,IAAI,KAAKG,WAAT,EAAsB;MACpB,KAAKC,2BAAL,CAAiC,KAAKD,WAAtC,EAAmD,0BAAnD;IACD;;IAED,KAAKE,UAAL,GACErB,IAAI,CAACsB,SAAL,IACA,IAAIzC,eAAJ,CAAoB;MAClB0C,QAAQ,EAAE,KAAKA,QADG;MAElBC,OAAO,EAAE,KAAKA,OAFI;MAGlBC,GAAG,EAAE,KAAKX,MAHQ;MAIlBY,aAAa,EAAE,CAAC,KAAKC,QAAN;IAJG,CAApB,CAFF;;IASA,KAAKC,0BAAL;;IACA,KAAKC,cAAL;;IAEA,IAAI7B,IAAI,CAACE,aAAL,CAAmBa,GAAvB,EAA4B;MAC1B,KAAKe,0BAAL;IACD;;IAED,IAAI9B,IAAI,CAAC+B,cAAT,EAAyB;MACvB,KAAKC,mBAAL,CAAyBhC,IAAI,CAAC+B,cAA9B;IACD;EACF;;EAIS,IAANjB,MAAM,CAACmB,KAAD,EAAc;IACtB,IAAI,CAACA,KAAL,EAAY;MACV;IACD;;IACD,KAAKC,OAAL,GAAeD,KAAf;EACD;;EAES,IAANnB,MAAM;IACR,OAAO,KAAKoB,OAAZ;EACD;;EAEM,IAAHC,GAAG,CAACF,KAAD,EAAc;IACnB,IAAI,CAACA,KAAL,EAAY;MACV;IACD;;IACD,MAAME,GAAG,GAAgBrE,uBAAuB,CAACmE,KAAD,CAAhD;IACA,KAAKG,IAAL,GAAYD,GAAZ;EACD;;EAEM,IAAHA,GAAG;IACL,IAAI,KAAKC,IAAT,EAAe;MACb,MAAMD,GAAG,GAAWtE,uBAAuB,CAAC,KAAKuE,IAAN,EAAY,IAAZ,CAA3C;MACA,OAAOD,GAAP;IACD;;IACD,OAAO,EAAP;EACD;;EAEW,IAARR,QAAQ,CAACM,KAAD,EAAc;IACxB,IAAI,CAACA,KAAL,EAAY;MACV;IACD;;IACD,KAAKI,SAAL,GAAiBJ,KAAjB;EACD;;EAEW,IAARN,QAAQ;IACV,IAAIA,QAAQ,GAAkB,KAAKU,SAAnC;;IACA,IAAI,CAACV,QAAL,EAAe;MACbA,QAAQ,GAAG,KAAKU,SAAL,GAAiBpE,IAAI,EAAhC;IACD;;IAED,OAAO,KAAKoE,SAAZ;EACD;;EAES,IAANC,MAAM,CAACL,KAAD,EAAM;IACd,IAAI,CAACA,KAAL,EAAY;MACV;IACD;;IACD,KAAKM,OAAL,GAAeN,KAAf;EACD;;EAES,IAANK,MAAM;IACR,OAAO,KAAKC,OAAZ;EACD;;EAEa,IAAVpC,UAAU,CAAC8B,KAAD,EAAM,CAEnB;;EAEa,IAAV9B,UAAU;IACZ,IAAIA,UAAU,GAAuB,KAAKF,WAA1C;;IACA,IAAI,CAACE,UAAL,EAAiB;MACfA,UAAU,GAAG,KAAKF,WAAL,GAAmBlC,aAAa,EAA7C;IACD;;IACD,OAAOoC,UAAP;EACD;;EAEW,IAARqC,QAAQ,CAACP,KAAD,EAAM;IAChB,KAAKQ,SAAL,GAAiBR,KAAjB;EACD;;EAEW,IAARO,QAAQ;IACV,MAAMA,QAAQ,GAAuB,KAAKC,SAA1C;IACA,OAAOD,QAAP;EACD;;EAEiB,IAAdE,cAAc,CAACT,KAAD,EAAM;IACtB,IAAI,CAACA,KAAL,EAAY;MACV;IACD;;IACD,KAAKU,eAAL,GAAuBV,KAAvB;EACD;;EAEiB,IAAdS,cAAc;IAChB,OAAO,KAAKC,eAAZ;EACD;;EAEc,IAAXxB,WAAW,CAACc,KAAD,EAAM;IACnB,IAAI,CAACA,KAAL,EAAY;MACV;IACD;;IACD,KAAKW,YAAL,GAAoBX,KAApB;EACD;;EAEc,IAAXd,WAAW;IACb,OAAO,KAAKyB,YAAZ;EACD;;EAEM,IAAH7B,GAAG;IACL,MAAM8B,IAAI,GAAG,KAAKC,UAAL,EAAb;;IACA,OAAOD,IAAP;EACD;;EAEM,IAAH9B,GAAG,CAACkB,KAAD,EAAM;IACX,IAAI,CAACA,KAAL,EAAY;MACV;IACD;;IACD,MAAM;MAAES,cAAF;MAAkB5B,MAAlB;MAA0BqB;IAA1B,IAAkC,KAAKY,SAAL,CAAed,KAAf,CAAxC;;IACA,KAAKS,cAAL,GAAsBA,cAAtB;IACA,KAAK5B,MAAL,GAAcA,MAAd;IACA,KAAKqB,GAAL,GAAWA,GAAX;EACD;;EAEU,IAAPa,OAAO,CAACf,KAAD,EAAM;IACf,KAAKgB,QAAL,GAAgBhB,KAAhB;EACD;;EAEU,IAAPe,OAAO;IACT,MAAMA,OAAO,GAAkB,KAAKC,QAApC;IACA,OAAOD,OAAP;EACD;;EAEY,IAATE,SAAS,CAACjB,KAAD,EAAM;IACjB,KAAKkB,UAAL,GAAkBlB,KAAlB;EACD;;EAEY,IAATiB,SAAS;IACX,MAAMA,SAAS,GAAkB,KAAKC,UAAtC;IACA,OAAOD,SAAP;EACD;;EAEW,IAARE,QAAQ,CAACnB,KAAD,EAAM;IAChB,KAAKoB,SAAL,GAAiBpB,KAAjB;EACD;;EAEW,IAARmB,QAAQ;IACV,MAAMA,QAAQ,GAAoB,KAAKC,SAAvC;IACA,OAAOD,QAAP;EACD;;EAES,IAANE,MAAM,CAACrB,KAAD,EAAM;IACd,KAAKsB,OAAL,GAAetB,KAAf;EACD;;EAES,IAANqB,MAAM;IACR,MAAMA,MAAM,GAAkB,KAAKC,OAAnC;IACA,OAAOD,MAAP;EACD;;EAEY,IAATE,SAAS,CAACvB,KAAD,EAAM,CAElB;;EAEY,IAATuB,SAAS;IACX,OAAO,KAAKC,UAAZ;EACD;;EAEU,IAAPC,OAAO,CAACzB,KAAD,EAAM,CAEhB;;EAEU,IAAPyB,OAAO;IACT,OAAO,CAAC,CAAC,KAAKf,eAAd;EACD;;EAEU,IAAP3B,OAAO;IACT,OAAO;MACLwC,SAAS,EAAE,KAAKA,SADX;MAELJ,QAAQ,EAAE,KAAKA,QAFV;MAGLJ,OAAO,EAAE,KAAKA,OAHT;MAILlC,MAAM,EAAE,KAAKA,MAJR;MAKLqB,GAAG,EAAE,KAAKA,GALL;MAMLR,QAAQ,EAAE,KAAKA,QANV;MAOLxB,UAAU,EAAE,KAAKA,UAPZ;MAQLmC,MAAM,EAAE,KAAKA,MARR;MASLE,QAAQ,EAAE,KAAKA,QATV;MAULrB,WAAW,EAAE,KAAKA,WAVb;MAWLuB,cAAc,EAAE,KAAKA;IAXhB,CAAP;EAaD;;EAEU,IAAP1B,OAAO,CAACiB,KAAD,EAAM;IACf,IAAI,CAACA,KAAL,EAAY;MACV;IACD;;IACD,KAAKwB,UAAL,GAAkBxB,KAAK,CAACuB,SAAxB;IACA,KAAKJ,QAAL,GAAgBnB,KAAK,CAACmB,QAAtB;IACA,KAAKJ,OAAL,GAAef,KAAK,CAACe,OAArB;IACA,KAAKlC,MAAL,GAAcmB,KAAK,CAACnB,MAApB;IACA,KAAKqB,GAAL,GAAWF,KAAK,CAACE,GAAjB;IACA,KAAKR,QAAL,GAAgBM,KAAK,CAACN,QAAtB;IACA,KAAKxB,UAAL,GAAkB8B,KAAK,CAAC9B,UAAxB;IACA,KAAKmC,MAAL,GAAcL,KAAK,CAACK,MAApB;IACA,KAAKE,QAAL,GAAgBP,KAAK,CAACO,QAAtB;IACA,KAAKrB,WAAL,GAAmBc,KAAK,CAACd,WAAzB;IACA,KAAKuB,cAAL,GAAsBT,KAAK,CAACS,cAA5B;EACD;;EAIMiB,EAAE,CAACC,KAAD,EAAgBC,QAAhB,EAA4E;IACnF,MAAMC,YAAY,GAAG;MACnBF,KADmB;MAEnBC;IAFmB,CAArB;;IAIA,KAAKE,aAAL,CAAmBC,SAAnB,CAA6BF,YAA7B;EACD;;EAEMG,GAAG,CAACL,KAAD,EAAc;IACtB,KAAKG,aAAL,CAAmBG,WAAnB,CAA+BN,KAA/B;EACD;;EAEgC,MAApBO,oBAAoB,CAACC,cAAD,EAAyC;IACxE,KAAKhC,IAAL,GAAY,MAAM,KAAKiC,YAAL,EAAlB;;IAEA,MAAMC,OAAO,GAAoB,KAAKC,cAAL,CAAoB;MACnDC,MAAM,EAAE,mBAD2C;MAEnDC,MAAM,EAAE,CACN;QACEnC,MAAM,EAAE,KAAKX,QADf;QAEEa,QAAQ,EAAE,KAAKrC,UAFjB;QAGEmE,OAAO,EAAE,KAAKC,cAAL,CAAoBH,cAApB;MAHX,CADM;IAF2C,CAApB,CAAjC;;IAWA,KAAKjD,WAAL,GAAmBmD,OAAO,CAACI,EAA3B;IACA,KAAKhC,cAAL,GAAsBzE,IAAI,EAA1B;;IAEA,KAAK8F,aAAL,CAAmBY,OAAnB,CAA2B;MACzBf,KAAK,EAAE,aADkB;MAEzBa,MAAM,EAAE,CAAC,KAAK1D,GAAN;IAFiB,CAA3B;;IAKA,KAAK4C,EAAL,CAAQ,cAAR,EAAwB,MAAK;MAC3B,MAAM,IAAI1C,KAAJ,CAAUvB,8BAAV,CAAN;IACD,CAFD;;IAIA,MAAMkF,iBAAiB,GAAG,MAAK;MAC7B,KAAKC,WAAL;IACD,CAFD;;IAIA,IAAI;MACF,MAAMC,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBT,OAAtB,CAArB;;MAEA,IAAIQ,MAAJ,EAAY;QACVF,iBAAiB;MAClB;;MAED,OAAOE,MAAP;IACD,CARD,CAQE,OAAOE,KAAP,EAAc;MACdJ,iBAAiB;MACjB,MAAMI,KAAN;IACD;EACF;;EAEmB,MAAPC,OAAO,CAACjF,IAAD,EAA6B;IAC/C,IAAI,CAAC,KAAKS,YAAV,EAAwB;MACtB,MAAM,IAAIQ,KAAJ,CAAUxB,+BAAV,CAAN;IACD;;IAED,IAAI,KAAK+D,SAAT,EAAoB;MAClB,OAAO;QACLR,OAAO,EAAE,KAAKA,OADT;QAELI,QAAQ,EAAE,KAAKA;MAFV,CAAP;IAID;;IAED,MAAM,KAAK8B,aAAL,CAAmBlF,IAAnB,CAAN;IAEA,OAAO,IAAImF,OAAJ,CAA4B,OAAOC,OAAP,EAAgBC,MAAhB,KAA0B;MAC3D,KAAK1B,EAAL,CAAQ,cAAR,EAAwB,MAAM0B,MAAM,CAAC,IAAIpE,KAAJ,CAAUvB,8BAAV,CAAD,CAApC;MAEA,KAAKiE,EAAL,CAAQ,SAAR,EAAmB,CAACqB,KAAD,EAAQM,OAAR,KAAmB;QACpC,IAAIN,KAAJ,EAAW;UACT,OAAOK,MAAM,CAACL,KAAD,CAAb;QACD;;QAEDI,OAAO,CAACE,OAAO,CAACb,MAAR,CAAe,CAAf,CAAD,CAAP;MACD,CAND;IAOD,CAVM,CAAP;EAWD;;EAEyB,MAAbS,aAAa,CAAClF,IAAD,EAA6B;IACrD,IAAI,KAAKyD,UAAT,EAAqB;MACnB,MAAM,IAAIxC,KAAJ,CAAUnC,uBAAV,CAAN;IACD;;IAED,IAAI,KAAK4E,OAAT,EAAkB;MAChB;IACD;;IAED,KAAKtB,IAAL,GAAY,MAAM,KAAKiC,YAAL,EAAlB;;IAEA,MAAMC,OAAO,GAAoB,KAAKC,cAAL,CAAoB;MACnDC,MAAM,EAAE,mBAD2C;MAEnDC,MAAM,EAAE,CACN;QACEnC,MAAM,EAAE,KAAKX,QADf;QAEEa,QAAQ,EAAE,KAAKrC,UAFjB;QAGE6C,OAAO,EAAEhD,IAAI,IAAIA,IAAI,CAACgD,OAAb,GAAuBhD,IAAI,CAACgD,OAA5B,GAAsC;MAHjD,CADM;IAF2C,CAApB,CAAjC;;IAWA,KAAK7B,WAAL,GAAmBmD,OAAO,CAACI,EAA3B;IACA,KAAKhC,cAAL,GAAsBzE,IAAI,EAA1B;;IAEA,KAAKsH,mBAAL,CAAyBjB,OAAzB,EAAkC,yBAAlC,EAA6D;MAC3DkB,KAAK,EAAE,KAAK9C;IAD+C,CAA7D;;IAIA,KAAKqB,aAAL,CAAmBY,OAAnB,CAA2B;MACzBf,KAAK,EAAE,aADkB;MAEzBa,MAAM,EAAE,CAAC,KAAK1D,GAAN;IAFiB,CAA3B;EAID;;EAEM0E,cAAc,CAACC,aAAD,EAA8B;IACjD,IAAI,KAAKjC,UAAT,EAAqB;MACnB,MAAM,IAAIxC,KAAJ,CAAUnC,uBAAV,CAAN;IACD;;IAED,KAAKkE,OAAL,GAAe0C,aAAa,CAAC1C,OAA7B;IACA,KAAKI,QAAL,GAAgBsC,aAAa,CAACtC,QAA9B;IACA,KAAKF,SAAL,GAAiBwC,aAAa,CAACxC,SAAd,IAA2B,CAA5C;IACA,KAAKI,MAAL,GAAcoC,aAAa,CAACpC,MAAd,IAAwB,EAAtC;IAEA,MAAMqC,aAAa,GAAmB;MACpCC,QAAQ,EAAE,IAD0B;MAEpC5C,OAAO,EAAE,KAAKA,OAFsB;MAGpCE,SAAS,EAAE,KAAKA,SAHoB;MAIpCE,QAAQ,EAAE,KAAKA,QAJqB;MAKpCE,MAAM,EAAE,KAAKA,MALuB;MAMpChB,MAAM,EAAE,KAAKX,QANuB;MAOpCa,QAAQ,EAAE,KAAKrC;IAPqB,CAAtC;IAUA,MAAM0F,QAAQ,GAAG;MACfnB,EAAE,EAAE,KAAKvD,WADM;MAEf2E,OAAO,EAAE,KAFM;MAGfhB,MAAM,EAAEa;IAHO,CAAjB;;IAMA,KAAKI,aAAL,CAAmBF,QAAnB;;IAEA,KAAKpC,UAAL,GAAkB,IAAlB;;IACA,KAAKuC,kBAAL;;IACA,KAAKjC,aAAL,CAAmBY,OAAnB,CAA2B;MACzBf,KAAK,EAAE,SADkB;MAEzBa,MAAM,EAAE,CACN;QACEnC,MAAM,EAAE,KAAKA,MADf;QAEEE,QAAQ,EAAE,KAAKA,QAFjB;QAGEQ,OAAO,EAAE,KAAKA,OAHhB;QAIEI,QAAQ,EAAE,KAAKA;MAJjB,CADM;IAFiB,CAA3B;EAWD;;EAEM6C,aAAa,CAACC,YAAD,EAA6B;IAC/C,IAAI,KAAKzC,UAAT,EAAqB;MACnB,MAAM,IAAIxC,KAAJ,CAAUnC,uBAAV,CAAN;IACD;;IAED,MAAMqH,OAAO,GACXD,YAAY,IAAIA,YAAY,CAACC,OAA7B,GAAuCD,YAAY,CAACC,OAApD,GAA8DnH,sBADhE;;IAGA,MAAM6G,QAAQ,GAAG,KAAKO,eAAL,CAAqB;MACpC1B,EAAE,EAAE,KAAKvD,WAD2B;MAEpC6D,KAAK,EAAE;QAAEmB;MAAF;IAF6B,CAArB,CAAjB;;IAKA,KAAKJ,aAAL,CAAmBF,QAAnB;;IAEA,KAAKpC,UAAL,GAAkB,KAAlB;;IACA,KAAKM,aAAL,CAAmBY,OAAnB,CAA2B;MACzBf,KAAK,EAAE,YADkB;MAEzBa,MAAM,EAAE,CAAC;QAAE0B;MAAF,CAAD;IAFiB,CAA3B;;IAIA,KAAKE,qBAAL;EACD;;EAEMC,aAAa,CAACZ,aAAD,EAA8B;IAChD,IAAI,CAAC,KAAKjC,UAAV,EAAsB;MACpB,MAAM,IAAIxC,KAAJ,CAAUlC,0BAAV,CAAN;IACD;;IAED,KAAKiE,OAAL,GAAe0C,aAAa,CAAC1C,OAA7B;IACA,KAAKI,QAAL,GAAgBsC,aAAa,CAACtC,QAA9B;IACA,KAAKF,SAAL,GAAiBwC,aAAa,CAACxC,SAAd,IAA2B,CAA5C;IACA,KAAKI,MAAL,GAAcoC,aAAa,CAACpC,MAAd,IAAwB,EAAtC;IAEA,MAAMqC,aAAa,GAAmB;MACpCC,QAAQ,EAAE,IAD0B;MAEpC5C,OAAO,EAAE,KAAKA,OAFsB;MAGpCE,SAAS,EAAE,KAAKA,SAHoB;MAIpCE,QAAQ,EAAE,KAAKA,QAJqB;MAKpCE,MAAM,EAAE,KAAKA;IALuB,CAAtC;;IAQA,MAAMgB,OAAO,GAAG,KAAKC,cAAL,CAAoB;MAClCC,MAAM,EAAE,kBAD0B;MAElCC,MAAM,EAAE,CAACkB,aAAD;IAF0B,CAApB,CAAhB;;IAKA,KAAKJ,mBAAL,CAAyBjB,OAAzB,EAAkC,yBAAlC;;IAEA,KAAKP,aAAL,CAAmBY,OAAnB,CAA2B;MACzBf,KAAK,EAAE,gBADkB;MAEzBa,MAAM,EAAE,CACN;QACEzB,OAAO,EAAE,KAAKA,OADhB;QAEEI,QAAQ,EAAE,KAAKA;MAFjB,CADM;IAFiB,CAA3B;;IAUA,KAAKmD,qBAAL;EACD;;EAEuB,MAAX1B,WAAW,CAACqB,YAAD,EAA6B;IACnD,MAAMC,OAAO,GAAGD,YAAY,GAAGA,YAAY,CAACC,OAAhB,GAA0B,sBAAtD;IAEA,MAAMR,aAAa,GAAmB;MACpCC,QAAQ,EAAE,KAD0B;MAEpC5C,OAAO,EAAE,IAF2B;MAGpCE,SAAS,EAAE,IAHyB;MAIpCE,QAAQ,EAAE;IAJ0B,CAAtC;;IAOA,MAAMkB,OAAO,GAAG,KAAKC,cAAL,CAAoB;MAClCC,MAAM,EAAE,kBAD0B;MAElCC,MAAM,EAAE,CAACkB,aAAD;IAF0B,CAApB,CAAhB;;IAKA,MAAM,KAAKa,YAAL,CAAkBlC,OAAlB,CAAN;;IAEA,KAAKmC,wBAAL,CAA8BN,OAA9B;EACD;;EAE2B,MAAfO,eAAe,CAACC,EAAD,EAAY;IACtC,IAAI,CAAC,KAAKlD,UAAV,EAAsB;MACpB,MAAM,IAAIxC,KAAJ,CAAUlC,0BAAV,CAAN;IACD;;IAED,MAAM6H,QAAQ,GAAGhJ,oBAAoB,CAAC+I,EAAD,CAArC;;IAEA,MAAMrC,OAAO,GAAG,KAAKC,cAAL,CAAoB;MAClCC,MAAM,EAAE,qBAD0B;MAElCC,MAAM,EAAE,CAACmC,QAAD;IAF0B,CAApB,CAAhB;;IAKA,MAAM9B,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBT,OAAtB,CAArB;IACA,OAAOQ,MAAP;EACD;;EAE2B,MAAf+B,eAAe,CAACF,EAAD,EAAY;IACtC,IAAI,CAAC,KAAKlD,UAAV,EAAsB;MACpB,MAAM,IAAIxC,KAAJ,CAAUlC,0BAAV,CAAN;IACD;;IAED,MAAM6H,QAAQ,GAAGhJ,oBAAoB,CAAC+I,EAAD,CAArC;;IAEA,MAAMrC,OAAO,GAAG,KAAKC,cAAL,CAAoB;MAClCC,MAAM,EAAE,qBAD0B;MAElCC,MAAM,EAAE,CAACmC,QAAD;IAF0B,CAApB,CAAhB;;IAKA,MAAM9B,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBT,OAAtB,CAArB;IACA,OAAOQ,MAAP;EACD;;EAEuB,MAAXgC,WAAW,CAACrC,MAAD,EAAc;IACpC,IAAI,CAAC,KAAKhB,UAAV,EAAsB;MACpB,MAAM,IAAIxC,KAAJ,CAAUlC,0BAAV,CAAN;IACD;;IAED,MAAMuF,OAAO,GAAG,KAAKC,cAAL,CAAoB;MAClCC,MAAM,EAAE,UAD0B;MAElCC;IAFkC,CAApB,CAAhB;;IAKA,MAAMK,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBT,OAAtB,CAArB;IACA,OAAOQ,MAAP;EACD;;EAE+B,MAAnBiC,mBAAmB,CAACtC,MAAD,EAAc;IAC5C,IAAI,CAAC,KAAKhB,UAAV,EAAsB;MACpB,MAAM,IAAIxC,KAAJ,CAAUlC,0BAAV,CAAN;IACD;;IAED0F,MAAM,GAAG9G,iBAAiB,CAAC8G,MAAD,CAA1B;;IAEA,MAAMH,OAAO,GAAG,KAAKC,cAAL,CAAoB;MAClCC,MAAM,EAAE,eAD0B;MAElCC;IAFkC,CAApB,CAAhB;;IAKA,MAAMK,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBT,OAAtB,CAArB;IACA,OAAOQ,MAAP;EACD;;EAEyB,MAAbkC,aAAa,CAACvC,MAAD,EAAc;IACtC,IAAI,CAAC,KAAKhB,UAAV,EAAsB;MACpB,MAAM,IAAIxC,KAAJ,CAAUlC,0BAAV,CAAN;IACD;;IAED,MAAMuF,OAAO,GAAG,KAAKC,cAAL,CAAoB;MAClCC,MAAM,EAAE,mBAD0B;MAElCC;IAFkC,CAApB,CAAhB;;IAKA,MAAMK,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBT,OAAtB,CAArB;IACA,OAAOQ,MAAP;EACD;;EAEuB,MAAXmC,WAAW,CAACC,WAAD,EAAgC;IACtD,IAAI,CAAC,KAAKzD,UAAV,EAAsB;MACpB,MAAM,IAAIxC,KAAJ,CAAU,gCAAV,CAAN;IACD;;IAED,MAAMqD,OAAO,GAAG,KAAKC,cAAL,CAAoB;MAClCC,MAAM,EAAE,oBAD0B;MAElCC,MAAM,EAAE,CAACyC,WAAD;IAF0B,CAApB,CAAhB;;IAKA,MAAMpC,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBT,OAAtB,CAArB;IACA,OAAOQ,MAAP;EACD;;EAEMqC,UAAU,CACf7C,OADe,EAEf8C,OAFe,EAEU;IAEzB,KAAKZ,YAAL,CAAkBlC,OAAlB,EAA2B8C,OAA3B;;IAEA,KAAKrD,aAAL,CAAmBY,OAAnB,CAA2B;MACzBf,KAAK,EAAE,mBADkB;MAEzBa,MAAM,EAAE,CAAC;QAAEH,OAAF;QAAW8C;MAAX,CAAD;IAFiB,CAA3B;;IAKA,OAAO,IAAIjC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;MACrC,KAAKgC,oBAAL,CAA0B/C,OAAO,CAACI,EAAlC,EAAsC,CAACM,KAAD,EAAsBM,OAAtB,KAA6C;QACjF,IAAIN,KAAJ,EAAW;UACTK,MAAM,CAACL,KAAD,CAAN;UACA;QACD;;QACD,IAAI,CAACM,OAAL,EAAc;UACZ,MAAM,IAAIrE,KAAJ,CAAUhC,sBAAV,CAAN;QACD;;QACDmG,OAAO,CAACE,OAAD,CAAP;MACD,CATD;IAUD,CAXM,CAAP;EAYD;;EAE6B,MAAjBgC,iBAAiB,CAAChD,OAAD,EAAoC8C,OAApC,EAA6D;IACzF,IAAI,CAAC,KAAK3D,UAAV,EAAsB;MACpB,MAAM,IAAIxC,KAAJ,CAAUlC,0BAAV,CAAN;IACD;;IAED,QAAQuF,OAAO,CAACE,MAAhB;MACE,KAAK,cAAL;QACE,OAAO,KAAKpB,QAAZ;;MACF,KAAK,aAAL;QACE,OAAOhF,kBAAkB,CAAC,KAAK4E,OAAN,CAAzB;;MACF,KAAK,qBAAL;MACA,KAAK,qBAAL;QACE,IAAIsB,OAAO,CAACG,MAAZ,EAAoB;UAClBH,OAAO,CAACG,MAAR,CAAe,CAAf,IAAoB7G,oBAAoB,CAAC0G,OAAO,CAACG,MAAR,CAAe,CAAf,CAAD,CAAxC;QACD;;QACD;;MACF,KAAK,eAAL;QACE,IAAIH,OAAO,CAACG,MAAZ,EAAoB;UAClBH,OAAO,CAACG,MAAR,GAAiB9G,iBAAiB,CAAC2G,OAAO,CAACG,MAAT,CAAlC;QACD;;QACD;;MACF;QACE;IAjBJ;;IAoBA,MAAM8C,gBAAgB,GAAG,KAAKhD,cAAL,CAAoBD,OAApB,CAAzB;;IAEA,MAAMQ,MAAM,GAAG,MAAM,KAAKC,gBAAL,CAAsBwC,gBAAtB,EAAwCH,OAAxC,CAArB;IACA,OAAOtC,MAAP;EACD;;EAEM0C,cAAc,CAAC3B,QAAD,EAA2C;IAC9D,IAAIxH,wBAAwB,CAACwH,QAAD,CAA5B,EAAwC;MACtC,MAAM4B,iBAAiB,GAAG,KAAKrB,eAAL,CAAqBP,QAArB,CAA1B;;MACA,KAAKE,aAAL,CAAmB0B,iBAAnB;IACD,CAHD,MAGO;MACL,MAAM,IAAIxG,KAAJ,CAAU/B,oBAAV,CAAN;IACD;EACF;;EAEMwI,aAAa,CAAC7B,QAAD,EAAyC;IAC3D,IAAIvH,sBAAsB,CAACuH,QAAD,CAA1B,EAAsC;MACpC,MAAM4B,iBAAiB,GAAG,KAAKrB,eAAL,CAAqBP,QAArB,CAA1B;;MACA,KAAKE,aAAL,CAAmB0B,iBAAnB;IACD,CAHD,MAGO;MACL,MAAM,IAAIxG,KAAJ,CAAU9B,mBAAV,CAAN;IACD;EACF;;EAEMwI,cAAc;IACnB,KAAKtG,UAAL,CAAgBuG,KAAhB;EACD;;EAI2B,MAAZpB,YAAY,CAC1BlC,OAD0B,EAE1B8C,OAF0B,EAEgB;IAE1C,MAAMS,WAAW,GAAoB,KAAKtD,cAAL,CAAoBD,OAApB,CAArC;;IAEA,MAAMwD,iBAAiB,GAA8B,MAAM,KAAKC,QAAL,CAAcF,WAAd,CAA3D;IAEA,MAAMrC,KAAK,GAAW,QAAO4B,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAE5B,KAAhB,MAA0B,WAA1B,GAAwC4B,OAAO,CAAC5B,KAAhD,GAAwD,KAAKlD,MAAnF;IACA,MAAMgD,OAAO,GAAW0C,IAAI,CAACC,SAAL,CAAeH,iBAAf,CAAxB;IACA,MAAMI,MAAM,GACV,QAAOd,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEe,qBAAhB,MAA0C,WAA1C,GACI,CAACf,OAAO,CAACe,qBADb,GAEI5J,eAAe,CAACsJ,WAAD,CAHrB;;IAKA,KAAKxG,UAAL,CAAgB+G,IAAhB,CAAqB9C,OAArB,EAA8BE,KAA9B,EAAqC0C,MAArC;EACD;;EAE4B,MAAbnC,aAAa,CAACF,QAAD,EAA0D;IACrF,MAAMiC,iBAAiB,GAA8B,MAAM,KAAKC,QAAL,CAAclC,QAAd,CAA3D;IAEA,MAAML,KAAK,GAAW,KAAKlD,MAA3B;IACA,MAAMgD,OAAO,GAAW0C,IAAI,CAACC,SAAL,CAAeH,iBAAf,CAAxB;IACA,MAAMI,MAAM,GAAG,IAAf;;IAEA,KAAK7G,UAAL,CAAgB+G,IAAhB,CAAqB9C,OAArB,EAA8BE,KAA9B,EAAqC0C,MAArC;EACD;;EAEkC,MAAnB3C,mBAAmB,CACjCjB,OADiC,EAEjC+D,QAFiC,EAGjCjB,OAHiC,EAGA;IAEjC,KAAKZ,YAAL,CAAkBlC,OAAlB,EAA2B8C,OAA3B;;IACA,KAAKhG,2BAAL,CAAiCkD,OAAO,CAACI,EAAzC,EAA6C2D,QAA7C;EACD;;EAEStD,gBAAgB,CAACT,OAAD,EAA2B8C,OAA3B,EAAoD;IAC5E,KAAKZ,YAAL,CAAkBlC,OAAlB,EAA2B8C,OAA3B;;IAEA,KAAKrD,aAAL,CAAmBY,OAAnB,CAA2B;MACzBf,KAAK,EAAE,mBADkB;MAEzBa,MAAM,EAAE,CAAC;QAAEH,OAAF;QAAW8C;MAAX,CAAD;IAFiB,CAA3B;;IAKA,OAAO,KAAKkB,wBAAL,CAA8BhE,OAAO,CAACI,EAAtC,CAAP;EACD;;EAESH,cAAc,CAACD,OAAD,EAAkC;IACxD,IAAI,OAAOA,OAAO,CAACE,MAAf,KAA0B,WAA9B,EAA2C;MACzC,MAAM,IAAIvD,KAAJ,CAAU7B,oBAAV,CAAN;IACD;;IACD,MAAMmI,gBAAgB,GAAoB;MACxC7C,EAAE,EAAE,OAAOJ,OAAO,CAACI,EAAf,KAAsB,WAAtB,GAAoC1G,SAAS,EAA7C,GAAkDsG,OAAO,CAACI,EADtB;MAExCoB,OAAO,EAAE,KAF+B;MAGxCtB,MAAM,EAAEF,OAAO,CAACE,MAHwB;MAIxCC,MAAM,EAAE,OAAOH,OAAO,CAACG,MAAf,KAA0B,WAA1B,GAAwC,EAAxC,GAA6CH,OAAO,CAACG;IAJrB,CAA1C;IAMA,OAAO8C,gBAAP;EACD;;EAESnB,eAAe,CACvBP,QADuB,EAC2C;IAElE,IAAI,OAAOA,QAAQ,CAACnB,EAAhB,KAAuB,WAA3B,EAAwC;MACtC,MAAM,IAAIzD,KAAJ,CAAU5B,gBAAV,CAAN;IACD;;IAED,MAAMkJ,YAAY,GAAG;MAAE7D,EAAE,EAAEmB,QAAQ,CAACnB,EAAf;MAAmBoB,OAAO,EAAE;IAA5B,CAArB;;IAEA,IAAIxH,sBAAsB,CAACuH,QAAD,CAA1B,EAAsC;MACpC,MAAMb,KAAK,GAAG9G,cAAc,CAAC2H,QAAQ,CAACb,KAAV,CAA5B;MAEA,MAAMwD,aAAa,iDACdD,YADc,GAEd1C,QAFc,GAEN;QACXb;MADW,CAFM,CAAnB;MAKA,OAAOwD,aAAP;IACD,CATD,MASO,IAAInK,wBAAwB,CAACwH,QAAD,CAA5B,EAAwC;MAC7C,MAAM4C,eAAe,mCAChBF,YADgB,GAEhB1C,QAFgB,CAArB;MAKA,OAAO4C,eAAP;IACD;;IAED,MAAM,IAAIxH,KAAJ,CAAU3B,sBAAV,CAAN;EACD;;EAEOmH,wBAAwB,CAAC4B,QAAD,EAAkB;IAChD,MAAMlC,OAAO,GAAGkC,QAAQ,IAAI,sBAA5B;;IACA,IAAI,CAAC,KAAK5E,UAAV,EAAsB;MACpB,IAAI,KAAKhD,YAAT,EAAuB;QACrB,KAAKA,YAAL,CAAkBmH,KAAlB;MACD;;MACDhJ,WAAW,CAACF,mBAAD,CAAX;IACD;;IACD,IAAI,KAAK+E,UAAT,EAAqB;MACnB,KAAKA,UAAL,GAAkB,KAAlB;IACD;;IACD,IAAI,KAAKb,YAAT,EAAuB;MACrB,KAAKA,YAAL,GAAoB,CAApB;IACD;;IACD,IAAI,KAAKD,eAAT,EAA0B;MACxB,KAAKA,eAAL,GAAuB,EAAvB;IACD;;IACD,IAAI,KAAKJ,OAAT,EAAkB;MAChB,KAAKA,OAAL,GAAe,EAAf;IACD;;IACD,KAAKwB,aAAL,CAAmBY,OAAnB,CAA2B;MACzBf,KAAK,EAAE,YADkB;MAEzBa,MAAM,EAAE,CAAC;QAAE0B;MAAF,CAAD;IAFiB,CAA3B;;IAIA,KAAKE,qBAAL;;IACA,KAAKsB,cAAL;EACD;;EAEOe,sBAAsB,CAACL,QAAD,EAAmB1C,aAAnB,EAAiD;IAC7E,IAAIA,aAAJ,EAAmB;MACjB,IAAIA,aAAa,CAACC,QAAlB,EAA4B;QAC1B,IAAI,CAAC,KAAKnC,UAAV,EAAsB;UACpB,KAAKA,UAAL,GAAkB,IAAlB;;UAEA,IAAIkC,aAAa,CAAC3C,OAAlB,EAA2B;YACzB,KAAKA,OAAL,GAAe2C,aAAa,CAAC3C,OAA7B;UACD;;UAED,IAAI2C,aAAa,CAACvC,QAAlB,EAA4B;YAC1B,KAAKA,QAAL,GAAgBuC,aAAa,CAACvC,QAA9B;UACD;;UAED,IAAIuC,aAAa,CAACrD,MAAd,IAAwB,CAAC,KAAKA,MAAlC,EAA0C;YACxC,KAAKA,MAAL,GAAcqD,aAAa,CAACrD,MAA5B;UACD;;UAED,IAAIqD,aAAa,CAACnD,QAAd,IAA0B,CAAC,KAAKA,QAApC,EAA8C;YAC5C,KAAKA,QAAL,GAAgBmD,aAAa,CAACnD,QAA9B;UACD;;UAED,KAAKuB,aAAL,CAAmBY,OAAnB,CAA2B;YACzBf,KAAK,EAAE,SADkB;YAEzBa,MAAM,EAAE,CACN;cACEnC,MAAM,EAAE,KAAKA,MADf;cAEEE,QAAQ,EAAE,KAAKA,QAFjB;cAGEQ,OAAO,EAAE,KAAKA,OAHhB;cAIEI,QAAQ,EAAE,KAAKA;YAJjB,CADM;UAFiB,CAA3B;QAWD,CA9BD,MA8BO;UACL,IAAIuC,aAAa,CAAC3C,OAAlB,EAA2B;YACzB,KAAKA,OAAL,GAAe2C,aAAa,CAAC3C,OAA7B;UACD;;UACD,IAAI2C,aAAa,CAACvC,QAAlB,EAA4B;YAC1B,KAAKA,QAAL,GAAgBuC,aAAa,CAACvC,QAA9B;UACD;;UAED,KAAKW,aAAL,CAAmBY,OAAnB,CAA2B;YACzBf,KAAK,EAAE,gBADkB;YAEzBa,MAAM,EAAE,CACN;cACEzB,OAAO,EAAE,KAAKA,OADhB;cAEEI,QAAQ,EAAE,KAAKA;YAFjB,CADM;UAFiB,CAA3B;QASD;;QAED,KAAKmD,qBAAL;MACD,CAnDD,MAmDO;QACL,KAAKE,wBAAL,CAA8B4B,QAA9B;MACD;IACF,CAvDD,MAuDO;MACL,KAAK5B,wBAAL,CAA8B4B,QAA9B;IACD;EACF;;EAEoC,MAAvBM,uBAAuB,CAACC,aAAD,EAA8B;IACjE,MAAMC,YAAY,GAAG,CAAC,KAAKlH,QAAN,EAAgB,KAAKe,cAArB,CAArB;;IAEA,IAAI,CAACmG,YAAY,CAACC,QAAb,CAAsBF,aAAa,CAACpD,KAApC,CAAL,EAAiD;MAC/C;IACD;;IAED,IAAIsC,iBAAJ;;IACA,IAAI;MACFA,iBAAiB,GAAGE,IAAI,CAACe,KAAL,CAAWH,aAAa,CAACtD,OAAzB,CAApB;IACD,CAFD,CAEE,OAAON,KAAP,EAAc;MACd;IACD;;IAED,MAAMM,OAAO,GAIF,MAAM,KAAK0D,QAAL,CAAclB,iBAAd,CAJjB;;IAMA,IAAIxC,OAAJ,EAAa;MACX,KAAKvB,aAAL,CAAmBY,OAAnB,CAA2BW,OAA3B;IACD;EACF;;EAEOxD,0BAA0B;IAChC,KAAKT,UAAL,CAAgB2C,SAAhB,CAA0B,KAAKtB,cAA/B;EACD;;EAEO2E,oBAAoB,CAC1B3C,EAD0B,EAE1Bb,QAF0B,EAEkC;IAE5D,KAAKF,EAAL,CAAQ,YAAYe,EAAE,EAAtB,EAA0Bb,QAA1B;EACD;;EAEOzC,2BAA2B,CAACsD,EAAD,EAAa2D,QAAb,EAA6B;IAC9D,KAAKhB,oBAAL,CAA0B3C,EAA1B,EAA8B,CAACM,KAAD,EAAQM,OAAR,KAAmB;MAC/C,IAAIN,KAAJ,EAAW;QACT,KAAK0D,sBAAL,CAA4B1D,KAAK,CAACmB,OAAlC;;QACA;MACD;;MACD,IAAI9H,wBAAwB,CAACiH,OAAD,CAA5B,EAAuC;QACrC,KAAKoD,sBAAL,CAA4BL,QAA5B,EAAsC/C,OAAO,CAACR,MAA9C;MACD,CAFD,MAEO,IAAIQ,OAAO,CAACN,KAAR,IAAiBM,OAAO,CAACN,KAAR,CAAcmB,OAAnC,EAA4C;QACjD,KAAKuC,sBAAL,CAA4BpD,OAAO,CAACN,KAAR,CAAcmB,OAA1C;MACD,CAFM,MAEA;QACL,KAAKuC,sBAAL,CAA4BL,QAA5B;MACD;IACF,CAZD;EAaD;;EAEOC,wBAAwB,CAAC5D,EAAD,EAAW;IACzC,OAAO,IAAIS,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;MACrC,KAAKgC,oBAAL,CAA0B3C,EAA1B,EAA8B,CAACM,KAAD,EAAQM,OAAR,KAAmB;QAC/C,IAAIN,KAAJ,EAAW;UACTK,MAAM,CAACL,KAAD,CAAN;UACA;QACD;;QACD,IAAI3G,wBAAwB,CAACiH,OAAD,CAA5B,EAAuC;UACrCF,OAAO,CAACE,OAAO,CAACR,MAAT,CAAP;QACD,CAFD,MAEO,IAAIQ,OAAO,CAACN,KAAR,IAAiBM,OAAO,CAACN,KAAR,CAAcmB,OAAnC,EAA4C;UACjDd,MAAM,CAACC,OAAO,CAACN,KAAT,CAAN;QACD,CAFM,MAEA;UACLK,MAAM,CAAC,IAAIpE,KAAJ,CAAU3B,sBAAV,CAAD,CAAN;QACD;MACF,CAZD;IAaD,CAdM,CAAP;EAeD;;EAEOsC,0BAA0B;IAChC,KAAK+B,EAAL,CAAQ,aAAR,EAAuB,MAAK;MAC1B,IAAI,KAAKlD,YAAT,EAAuB;QACrB,KAAKA,YAAL,CAAkBwI,IAAlB,CACE,KAAKlI,GADP,EAEE,MAAK;UACH,KAAKgD,aAAL,CAAmBY,OAAnB,CAA2B;YACzBf,KAAK,EAAE,cADkB;YAEzBa,MAAM,EAAE;UAFiB,CAA3B;QAID,CAPH,EAQE,KAAK9D,mBARP;MAUD;IACF,CAbD;IAeA,KAAKgD,EAAL,CAAQ,SAAR,EAAmB,MAAK;MACtB,IAAI,KAAKlD,YAAT,EAAuB;QACrB,KAAKA,YAAL,CAAkBmH,KAAlB;MACD;IACF,CAJD;IAMA,KAAKjE,EAAL,CAAQ,mBAAR,EAA6B,CAACqB,KAAD,EAAQM,OAAR,KAAmB;MAC9C,MAAM;QAAEhB;MAAF,IAAcgB,OAAO,CAACb,MAAR,CAAe,CAAf,CAApB;;MACA,IAAI9F,QAAQ,MAAM,KAAKkC,eAAL,CAAqBiI,QAArB,CAA8BxE,OAAO,CAACE,MAAtC,CAAlB,EAAiE;QAC/D,MAAM0E,aAAa,GAAG1K,QAAQ,CAACE,mBAAD,CAA9B;;QACA,IAAIwK,aAAJ,EAAmB;UACjBC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBH,aAAa,CAACG,IAArC;QACD;MACF;IACF,CARD;IAUA,KAAK1F,EAAL,CAAQ,mBAAR,EAA6B,CAACqB,KAAD,EAAQM,OAAR,KAAmB;MAC9C,IAAIN,KAAJ,EAAW;QACT,KAAKjB,aAAL,CAAmBY,OAAnB,CAA2B;UACzBf,KAAK,EAAE,OADkB;UAEzBa,MAAM,EAAE,CACN;YACE6E,IAAI,EAAE,uBADR;YAEEnD,OAAO,EAAEnB,KAAK,CAACuE,QAAN;UAFX,CADM;QAFiB,CAA3B;MASD;;MACD,KAAKpI,WAAL,GAAmBmE,OAAO,CAACZ,EAA3B;MACA,KAAKpC,MAAL,GAAcgD,OAAO,CAACb,MAAR,CAAe,CAAf,EAAkBnC,MAAhC;MACA,KAAKE,QAAL,GAAgB8C,OAAO,CAACb,MAAR,CAAe,CAAf,EAAkBjC,QAAlC;MAEA,MAAMgH,eAAe,mCAChBlE,OADgB,GACT;QACVd,MAAM,EAAE;MADE,CADS,CAArB;;MAIA,KAAKT,aAAL,CAAmBY,OAAnB,CAA2B6E,eAA3B;IACD,CArBD;IAuBA,KAAK7F,EAAL,CAAQ,kBAAR,EAA4B,CAACqB,KAAD,EAAQM,OAAR,KAAmB;MAC7C,IAAIN,KAAJ,EAAW;QACT,KAAK0D,sBAAL,CAA4B1D,KAAK,CAACmB,OAAlC;MACD;;MACD,KAAKuC,sBAAL,CAA4B,sBAA5B,EAAoDpD,OAAO,CAACb,MAAR,CAAe,CAAf,CAApD;IACD,CALD;EAMD;;EAEO5C,cAAc;IACpB,KAAKR,UAAL,CAAgBsC,EAAhB,CAAmB,SAAnB,EAA+BiF,aAAD,IAC5B,KAAKD,uBAAL,CAA6BC,aAA7B,CADF;;IAIA,KAAKvH,UAAL,CAAgBsC,EAAhB,CAAmB,MAAnB,EAA2B,MACzB,KAAKI,aAAL,CAAmBY,OAAnB,CAA2B;MAAEf,KAAK,EAAE,gBAAT;MAA2Ba,MAAM,EAAE;IAAnC,CAA3B,CADF;;IAIA,KAAKpD,UAAL,CAAgBsC,EAAhB,CAAmB,OAAnB,EAA4B,MAC1B,KAAKI,aAAL,CAAmBY,OAAnB,CAA2B;MAAEf,KAAK,EAAE,iBAAT;MAA4Ba,MAAM,EAAE;IAApC,CAA3B,CADF;;IAIA,KAAKpD,UAAL,CAAgBsC,EAAhB,CAAmB,OAAnB,EAA4B,MAC1B,KAAKI,aAAL,CAAmBY,OAAnB,CAA2B;MACzBf,KAAK,EAAE,iBADkB;MAEzBa,MAAM,EAAE,CAAC,6BAAD;IAFiB,CAA3B,CADF;;IAOA,KAAKpD,UAAL,CAAgB4H,IAAhB;EACD;;EAIOnG,UAAU;IAChB,MAAMvB,QAAQ,GAAG,KAAKA,QAAtB;IACA,MAAMmB,cAAc,GAAG,KAAKA,cAA5B;IACA,MAAMlB,OAAO,GAAG,KAAKA,OAArB;IACA,MAAMV,MAAM,GAAG2I,kBAAkB,CAAC,KAAK3I,MAAN,CAAjC;IACA,MAAMqB,GAAG,GAAG,KAAKA,GAAjB;IACA,MAAMpB,GAAG,GAAG,GAAGQ,QAAQ,IAAImB,cAAc,IAAIlB,OAAO,WAAWV,MAAM,QAAQqB,GAAG,EAAhF;IACA,OAAOpB,GAAP;EACD;;EAEOgC,SAAS,CAAChC,GAAD,EAAY;IAC3B,MAAM+D,MAAM,GAAoB3G,qBAAqB,CAAC4C,GAAD,CAArD;;IAEA,IAAI+D,MAAM,CAACvD,QAAP,KAAoB,KAAKA,QAA7B,EAAuC;MACrC,IAAI,CAACuD,MAAM,CAACpC,cAAZ,EAA4B;QAC1B,MAAMzB,KAAK,CAAC,mDAAD,CAAX;MACD;;MACD,MAAMyB,cAAc,GAAGoC,MAAM,CAACpC,cAA9B;;MAEA,IAAI,CAACoC,MAAM,CAAChE,MAAZ,EAAoB;QAClB,MAAMG,KAAK,CAAC,+CAAD,CAAX;MACD;;MACD,MAAMH,MAAM,GAAG4I,kBAAkB,CAAC5E,MAAM,CAAChE,MAAR,CAAjC;;MAEA,IAAI,CAACgE,MAAM,CAAC3C,GAAZ,EAAiB;QACf,MAAMlB,KAAK,CAAC,wCAAD,CAAX;MACD;;MACD,MAAMkB,GAAG,GAAG2C,MAAM,CAAC3C,GAAnB;MAEA,OAAO;QAAEO,cAAF;QAAkB5B,MAAlB;QAA0BqB;MAA1B,CAAP;IACD,CAjBD,MAiBO;MACL,MAAM,IAAIlB,KAAJ,CAAU1B,iBAAV,CAAN;IACD;EACF;;EAIyB,MAAZ8E,YAAY;IACxB,IAAI,KAAKjE,UAAT,EAAqB;MACnB,MAAM0E,MAAM,GAAG,MAAM,KAAK1E,UAAL,CAAgBuJ,WAAhB,EAArB;MACA,OAAO7E,MAAP;IACD;;IACD,OAAO,IAAP;EACD;;EAEqB,MAARiD,QAAQ,CACpB6B,IADoB,EACmD;IAEvE,MAAMzH,GAAG,GAAuB,KAAKC,IAArC;;IACA,IAAI,KAAKhC,UAAL,IAAmB+B,GAAvB,EAA4B;MAC1B,MAAM2C,MAAM,GAAuB,MAAM,KAAK1E,UAAL,CAAgByJ,OAAhB,CAAwBD,IAAxB,EAA8BzH,GAA9B,CAAzC;MACA,OAAO2C,MAAP;IACD;;IACD,OAAO,IAAP;EACD;;EAEqB,MAARkE,QAAQ,CACpB1D,OADoB,EACO;IAE3B,MAAMnD,GAAG,GAAuB,KAAKC,IAArC;;IACA,IAAI,KAAKhC,UAAL,IAAmB+B,GAAvB,EAA4B;MAC1B,MAAM2C,MAAM,GAID,MAAM,KAAK1E,UAAL,CAAgB0J,OAAhB,CAAwBxE,OAAxB,EAAiCnD,GAAjC,CAJjB;MAKA,OAAO2C,MAAP;IACD;;IACD,OAAO,IAAP;EACD;;EAIO5D,kBAAkB;IACxB,IAAI4D,MAAM,GAAiC,IAA3C;;IACA,IAAI,KAAKxE,eAAT,EAA0B;MACxBwE,MAAM,GAAG,KAAKxE,eAAL,CAAqByJ,UAArB,EAAT;IACD;;IACD,OAAOjF,MAAP;EACD;;EAEOkB,kBAAkB;IACxB,IAAI,KAAK1F,eAAT,EAA0B;MACxB,KAAKA,eAAL,CAAqB0J,UAArB,CAAgC,KAAKhJ,OAArC;IACD;EACF;;EAEOqF,qBAAqB;IAC3B,IAAI,KAAK/F,eAAT,EAA0B;MACxB,KAAKA,eAAL,CAAqB2J,aAArB;IACD;EACF;;EAEO1D,qBAAqB;IAC3B,IAAI,KAAK9C,UAAT,EAAqB;MACnB,KAAKuC,kBAAL;IACD,CAFD,MAEO;MACL,KAAKK,qBAAL;IACD;EACF;;EAIOrE,mBAAmB,CAACD,cAAD,EAAmC;IAC5D,IAAI,CAACA,cAAc,CAACN,GAAhB,IAAuB,OAAOM,cAAc,CAACN,GAAtB,KAA8B,QAAzD,EAAmE;MACjE,MAAMR,KAAK,CAAC,uDAAD,CAAX;IACD;;IAED,IAAI,CAACc,cAAc,CAACmI,IAAhB,IAAwB,OAAOnI,cAAc,CAACmI,IAAtB,KAA+B,QAA3D,EAAqE;MACnE,MAAMjJ,KAAK,CAAC,wDAAD,CAAX;IACD;;IAED,IAAI,CAACc,cAAc,CAACoI,KAAhB,IAAyB,OAAOpI,cAAc,CAACoI,KAAtB,KAAgC,QAA7D,EAAuE;MACrE,MAAMlJ,KAAK,CAAC,yDAAD,CAAX;IACD;;IAED,MAAMmJ,gBAAgB,GAAsB;MAC1CtJ,MAAM,EAAE,KAAKA,MAD6B;MAE1C0E,KAAK,EAAE,KAAK7D,QAF8B;MAG1CuI,IAAI,EAAEnI,cAAc,CAACmI,IAHqB;MAI1CC,KAAK,EAAEpI,cAAc,CAACoI,KAJoB;MAK1CE,QAAQ,EAAE,EALgC;MAM1CC,QAAQ,EAAEvI,cAAc,CAACuI,QAAf,IAA2B;IANK,CAA5C;IASA,KAAK3G,EAAL,CAAQ,SAAR,EAAmB,OAAOqB,KAAP,EAA4BM,OAA5B,KAA4C;MAC7D,IAAIN,KAAJ,EAAW;QACT,MAAMA,KAAN;MACD;;MAED,IAAIjD,cAAc,CAACS,QAAnB,EAA6B;QAC3B,MAAM6H,QAAQ,GAAG/E,OAAO,CAACb,MAAR,CAAe,CAAf,EAAkBjC,QAAlB,CAA2B+H,IAA5C;QACAH,gBAAgB,CAACC,QAAjB,GAA4BA,QAA5B;MACD;;MAED,IAAI;QACF,MAAMxE,QAAQ,GAAG,MAAM2E,KAAK,CAAC,GAAGzI,cAAc,CAACN,GAAG,MAAtB,EAA8B;UACxD+C,MAAM,EAAE,MADgD;UAExDiG,OAAO,EAAE;YACPC,MAAM,EAAE,kBADD;YAEP,gBAAgB;UAFT,CAF+C;UAMxDC,IAAI,EAAE3C,IAAI,CAACC,SAAL,CAAemC,gBAAf;QANkD,CAA9B,CAA5B;QASA,MAAMQ,IAAI,GAAG,MAAM/E,QAAQ,CAAC+E,IAAT,EAAnB;;QACA,IAAI,CAACA,IAAI,CAACC,OAAV,EAAmB;UACjB,MAAM5J,KAAK,CAAC,mCAAD,CAAX;QACD;MACF,CAdD,CAcE,OAAO+D,KAAP,EAAc;QACd,MAAM/D,KAAK,CAAC,mCAAD,CAAX;MACD;IACF,CA3BD;EA4BD;;AArrCY;;AAurCf,eAAenB,SAAf","names":["parsePersonalSign","parseTransactionData","convertArrayBufferToHex","convertHexToArrayBuffer","getClientMeta","payloadId","uuid","formatRpcError","parseWalletConnectUri","convertNumberToHex","isJsonRpcResponseSuccess","isJsonRpcResponseError","isSilentPayload","getLocal","signingMethods","mobileLinkChoiceKey","isMobile","removeLocal","SocketTransport","ERROR_SESSION_CONNECTED","ERROR_SESSION_DISCONNECTED","ERROR_SESSION_REJECTED","ERROR_MISSING_JSON_RPC","ERROR_MISSING_RESULT","ERROR_MISSING_ERROR","ERROR_MISSING_METHOD","ERROR_MISSING_ID","ERROR_INVALID_RESPONSE","ERROR_INVALID_URI","ERROR_MISSING_REQUIRED","ERROR_QRCODE_MODAL_NOT_PROVIDED","ERROR_QRCODE_MODAL_USER_CLOSED","EventManager","SessionStorage","getBridgeUrl","Connector","constructor","opts","_clientMeta","connectorOpts","clientMeta","_cryptoLib","cryptoLib","_sessionStorage","sessionStorage","storageId","_qrcodeModal","qrcodeModal","_qrcodeModalOptions","qrcodeModalOptions","_signingMethods","bridge","uri","session","Error","_getStorageSession","handshakeId","_subscribeToSessionResponse","_transport","transport","protocol","version","url","subscriptions","clientId","_subscribeToInternalEvents","_initTransport","_subscribeToSessionRequest","pushServerOpts","_registerPushServer","value","_bridge","key","_key","_clientId","peerId","_peerId","peerMeta","_peerMeta","handshakeTopic","_handshakeTopic","_handshakeId","_uri","_formatUri","_parseUri","chainId","_chainId","networkId","_networkId","accounts","_accounts","rpcUrl","_rpcUrl","connected","_connected","pending","on","event","callback","eventEmitter","_eventManager","subscribe","off","unsubscribe","createInstantRequest","instantRequest","_generateKey","request","_formatRequest","method","params","id","trigger","endInstantRequest","killSession","result","_sendCallRequest","error","connect","createSession","Promise","resolve","reject","payload","_sendSessionRequest","topic","approveSession","sessionStatus","sessionParams","approved","response","jsonrpc","_sendResponse","_setStorageSession","rejectSession","sessionError","message","_formatResponse","_removeStorageSession","updateSession","_manageStorageSession","_sendRequest","_handleSessionDisconnect","sendTransaction","tx","parsedTx","signTransaction","signMessage","signPersonalMessage","signTypedData","updateChain","chainParams","unsafeSend","options","_subscribeToResponse","sendCustomRequest","formattedRequest","approveRequest","formattedResponse","rejectRequest","transportClose","close","callRequest","encryptionPayload","_encrypt","JSON","stringify","silent","forcePushNotification","send","errorMsg","_subscribeToCallResponse","baseResponse","errorResponse","successResponse","_handleSessionResponse","_handleIncomingMessages","socketMessage","activeTopics","includes","parse","_decrypt","open","mobileLinkUrl","window","location","href","code","toString","internalPayload","encodeURIComponent","decodeURIComponent","generateKey","data","encrypt","decrypt","getSession","setSession","removeSession","type","token","pushSubscription","peerName","language","name","fetch","headers","Accept","body","json","success"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}