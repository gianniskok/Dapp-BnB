{"ast":null,"code":"'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'string',\n    inline: function (it, keyword, schema) {\n      return getRegExp() + '.test(data' + (it.dataLevel || '') + ')';\n\n      function getRegExp() {\n        try {\n          if (typeof schema == 'object') return new RegExp(schema.pattern, schema.flags);\n          var rx = schema.match(/^\\/(.*)\\/([gimuy]*)$/);\n          if (rx) return new RegExp(rx[1], rx[2]);\n          throw new Error('cannot parse string into RegExp');\n        } catch (e) {\n          console.error('regular expression', schema, 'is invalid');\n          throw e;\n        }\n      }\n    },\n    metaSchema: {\n      type: ['string', 'object'],\n      properties: {\n        pattern: {\n          type: 'string'\n        },\n        flags: {\n          type: 'string'\n        }\n      },\n      required: ['pattern'],\n      additionalProperties: false\n    }\n  };\n  ajv.addKeyword('regexp', defFunc.definition);\n  return ajv;\n};","map":{"version":3,"names":["module","exports","defFunc","ajv","definition","type","inline","it","keyword","schema","getRegExp","dataLevel","RegExp","pattern","flags","rx","match","Error","e","console","error","metaSchema","properties","required","additionalProperties","addKeyword"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ajv-keywords/keywords/regexp.js"],"sourcesContent":["'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'string',\n    inline: function (it, keyword, schema) {\n      return getRegExp() + '.test(data' + (it.dataLevel || '') + ')';\n\n      function getRegExp() {\n        try {\n          if (typeof schema == 'object')\n            return new RegExp(schema.pattern, schema.flags);\n\n          var rx = schema.match(/^\\/(.*)\\/([gimuy]*)$/);\n          if (rx) return new RegExp(rx[1], rx[2]);\n          throw new Error('cannot parse string into RegExp');\n        } catch(e) {\n          console.error('regular expression', schema, 'is invalid');\n          throw e;\n        }\n      }\n    },\n    metaSchema: {\n      type: ['string', 'object'],\n      properties: {\n        pattern: { type: 'string' },\n        flags: { type: 'string' }\n      },\n      required: ['pattern'],\n      additionalProperties: false\n    }\n  };\n\n  ajv.addKeyword('regexp', defFunc.definition);\n  return ajv;\n};\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;EACrCD,OAAO,CAACE,UAAR,GAAqB;IACnBC,IAAI,EAAE,QADa;IAEnBC,MAAM,EAAE,UAAUC,EAAV,EAAcC,OAAd,EAAuBC,MAAvB,EAA+B;MACrC,OAAOC,SAAS,KAAK,YAAd,IAA8BH,EAAE,CAACI,SAAH,IAAgB,EAA9C,IAAoD,GAA3D;;MAEA,SAASD,SAAT,GAAqB;QACnB,IAAI;UACF,IAAI,OAAOD,MAAP,IAAiB,QAArB,EACE,OAAO,IAAIG,MAAJ,CAAWH,MAAM,CAACI,OAAlB,EAA2BJ,MAAM,CAACK,KAAlC,CAAP;UAEF,IAAIC,EAAE,GAAGN,MAAM,CAACO,KAAP,CAAa,sBAAb,CAAT;UACA,IAAID,EAAJ,EAAQ,OAAO,IAAIH,MAAJ,CAAWG,EAAE,CAAC,CAAD,CAAb,EAAkBA,EAAE,CAAC,CAAD,CAApB,CAAP;UACR,MAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;QACD,CAPD,CAOE,OAAMC,CAAN,EAAS;UACTC,OAAO,CAACC,KAAR,CAAc,oBAAd,EAAoCX,MAApC,EAA4C,YAA5C;UACA,MAAMS,CAAN;QACD;MACF;IACF,CAlBkB;IAmBnBG,UAAU,EAAE;MACVhB,IAAI,EAAE,CAAC,QAAD,EAAW,QAAX,CADI;MAEViB,UAAU,EAAE;QACVT,OAAO,EAAE;UAAER,IAAI,EAAE;QAAR,CADC;QAEVS,KAAK,EAAE;UAAET,IAAI,EAAE;QAAR;MAFG,CAFF;MAMVkB,QAAQ,EAAE,CAAC,SAAD,CANA;MAOVC,oBAAoB,EAAE;IAPZ;EAnBO,CAArB;EA8BArB,GAAG,CAACsB,UAAJ,CAAe,QAAf,EAAyBvB,OAAO,CAACE,UAAjC;EACA,OAAOD,GAAP;AACD,CAjCD"},"metadata":{},"sourceType":"script"}