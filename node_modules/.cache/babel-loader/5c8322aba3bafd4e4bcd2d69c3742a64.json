{"ast":null,"code":"import * as encoding from \"@walletconnect/encoding\";\nimport * as jsonRpcUtils from \"@walletconnect/jsonrpc-utils\";\nimport { infuraNetworks } from \"./constants\";\nexport function sanitizeHex(hex) {\n  return encoding.sanitizeHex(hex);\n}\nexport function addHexPrefix(hex) {\n  return encoding.addHexPrefix(hex);\n}\nexport function removeHexPrefix(hex) {\n  return encoding.removeHexPrefix(hex);\n}\nexport function removeHexLeadingZeros(hex) {\n  return encoding.removeHexLeadingZeros(encoding.addHexPrefix(hex));\n}\nexport const payloadId = jsonRpcUtils.payloadId;\nexport function uuid() {\n  const result = ((a, b) => {\n    for (b = a = \"\"; a++ < 36; b += a * 51 & 52 ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16) : \"-\") {}\n\n    return b;\n  })();\n\n  return result;\n}\nexport function logDeprecationWarning() {\n  console.warn(\"DEPRECATION WARNING: This WalletConnect client library will be deprecated in favor of @walletconnect/client. Please check docs.walletconnect.org to learn more about this migration!\");\n}\nexport function getInfuraRpcUrl(chainId, infuraId) {\n  let rpcUrl;\n  const network = infuraNetworks[chainId];\n\n  if (network) {\n    rpcUrl = `https://${network}.infura.io/v3/${infuraId}`;\n  }\n\n  return rpcUrl;\n}\nexport function getRpcUrl(chainId, rpc) {\n  let rpcUrl;\n  const infuraUrl = getInfuraRpcUrl(chainId, rpc.infuraId);\n\n  if (rpc.custom && rpc.custom[chainId]) {\n    rpcUrl = rpc.custom[chainId];\n  } else if (infuraUrl) {\n    rpcUrl = infuraUrl;\n  }\n\n  return rpcUrl;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,yBAA1B;AACA,OAAO,KAAKC,YAAZ,MAA8B,8BAA9B;AAEA,SAASC,cAAT,QAA+B,aAA/B;AAIA,OAAM,SAAUC,WAAV,CAAsBC,GAAtB,EAAiC;EACrC,OAAOJ,QAAQ,CAACG,WAAT,CAAqBC,GAArB,CAAP;AACD;AAED,OAAM,SAAUC,YAAV,CAAuBD,GAAvB,EAAkC;EACtC,OAAOJ,QAAQ,CAACK,YAAT,CAAsBD,GAAtB,CAAP;AACD;AAED,OAAM,SAAUE,eAAV,CAA0BF,GAA1B,EAAqC;EACzC,OAAOJ,QAAQ,CAACM,eAAT,CAAyBF,GAAzB,CAAP;AACD;AAED,OAAM,SAAUG,qBAAV,CAAgCH,GAAhC,EAA2C;EAC/C,OAAOJ,QAAQ,CAACO,qBAAT,CAA+BP,QAAQ,CAACK,YAAT,CAAsBD,GAAtB,CAA/B,CAAP;AACD;AAID,OAAO,MAAMI,SAAS,GAAGP,YAAY,CAACO,SAA/B;AAEP,OAAM,SAAUC,IAAV,GAAc;EAClB,MAAMC,MAAM,GAAW,CAAC,CAACC,CAAD,EAAUC,CAAV,KAAqB;IAC3C,KACEA,CAAC,GAAGD,CAAC,GAAG,EADV,EAEEA,CAAC,KAAK,EAFR,EAGEC,CAAC,IAAKD,CAAC,GAAG,EAAL,GAAW,EAAX,GAAgB,CAACA,CAAC,GAAG,EAAJ,GAAS,IAAKE,IAAI,CAACC,MAAL,MAAiBH,CAAC,GAAG,EAAJ,GAAS,EAAT,GAAc,CAA/B,CAAd,GAAmD,CAApD,EAAuDI,QAAvD,CAAgE,EAAhE,CAAhB,GAAsF,GAH7F,EAIE,CAED;;IACD,OAAOH,CAAP;EACD,CATsB,GAAvB;;EAUA,OAAOF,MAAP;AACD;AAID,OAAM,SAAUM,qBAAV,GAA+B;EAEnCC,OAAO,CAACC,IAAR,CACE,sLADF;AAGD;AAID,OAAM,SAAUC,eAAV,CAA0BC,OAA1B,EAA2CC,QAA3C,EAA4D;EAChE,IAAIC,MAAJ;EACA,MAAMC,OAAO,GAAGrB,cAAc,CAACkB,OAAD,CAA9B;;EACA,IAAIG,OAAJ,EAAa;IACXD,MAAM,GAAG,WAAWC,OAAO,iBAAiBF,QAAQ,EAApD;EACD;;EACD,OAAOC,MAAP;AACD;AAED,OAAM,SAAUE,SAAV,CAAoBJ,OAApB,EAAqCK,GAArC,EAAoD;EACxD,IAAIH,MAAJ;EACA,MAAMI,SAAS,GAAGP,eAAe,CAACC,OAAD,EAAUK,GAAG,CAACJ,QAAd,CAAjC;;EACA,IAAII,GAAG,CAACE,MAAJ,IAAcF,GAAG,CAACE,MAAJ,CAAWP,OAAX,CAAlB,EAAuC;IACrCE,MAAM,GAAGG,GAAG,CAACE,MAAJ,CAAWP,OAAX,CAAT;EACD,CAFD,MAEO,IAAIM,SAAJ,EAAe;IACpBJ,MAAM,GAAGI,SAAT;EACD;;EACD,OAAOJ,MAAP;AACD","names":["encoding","jsonRpcUtils","infuraNetworks","sanitizeHex","hex","addHexPrefix","removeHexPrefix","removeHexLeadingZeros","payloadId","uuid","result","a","b","Math","random","toString","logDeprecationWarning","console","warn","getInfuraRpcUrl","chainId","infuraId","rpcUrl","network","getRpcUrl","rpc","infuraUrl","custom"],"sourceRoot":"","sources":["../../src/misc.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}