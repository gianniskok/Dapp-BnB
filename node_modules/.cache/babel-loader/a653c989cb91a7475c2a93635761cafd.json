{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar errcode = require('err-code');\n\nvar unixfs = require('./unixfs.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errcode__default = /*#__PURE__*/_interopDefaultLegacy(errcode);\n\nconst PBData = unixfs.Data;\nconst types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];\nconst dirTypes = ['directory', 'hamt-sharded-directory'];\nconst DEFAULT_FILE_MODE = parseInt('0644', 8);\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\n\nfunction parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 4095;\n  }\n\n  mode = mode.toString();\n\n  if (mode.substring(0, 1) === '0') {\n    return parseInt(mode, 8) & 4095;\n  }\n\n  return parseInt(mode, 10) & 4095;\n}\n\nfunction parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  let mtime;\n\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  }\n\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  }\n\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  }\n\n  if (input instanceof Date) {\n    const ms = input.getTime();\n    const secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode__default[\"default\"](new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n\n  return mtime;\n}\n\nclass UnixFS {\n  static unmarshal(marshaled) {\n    const message = PBData.decode(marshaled);\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    });\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime ? {\n        secs: decoded.mtime.Seconds,\n        nsecs: decoded.mtime.FractionalNanoseconds\n      } : undefined\n    });\n    data._originalMode = decoded.mode || 0;\n    return data;\n  }\n\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      type: 'file'\n    };\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options;\n\n    if (type && !types.includes(type)) {\n      throw errcode__default[\"default\"](new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n\n    this.type = type || 'file';\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n    this.blockSizes = blockSizes || [];\n    this._originalMode = 0;\n    this.mode = parseMode(mode);\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime);\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0;\n      }\n    }\n  }\n\n  set mode(mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\n    const parsedMode = parseMode(mode);\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode;\n    }\n  }\n\n  get mode() {\n    return this._mode;\n  }\n\n  isDirectory() {\n    return Boolean(this.type && dirTypes.includes(this.type));\n  }\n\n  addBlockSize(size) {\n    this.blockSizes.push(size);\n  }\n\n  removeBlockSize(index) {\n    this.blockSizes.splice(index, 1);\n  }\n\n  fileSize() {\n    if (this.isDirectory()) {\n      return 0;\n    }\n\n    let sum = 0;\n    this.blockSizes.forEach(size => {\n      sum += size;\n    });\n\n    if (this.data) {\n      sum += this.data.length;\n    }\n\n    return sum;\n  }\n\n  marshal() {\n    let type;\n\n    switch (this.type) {\n      case 'raw':\n        type = PBData.DataType.Raw;\n        break;\n\n      case 'directory':\n        type = PBData.DataType.Directory;\n        break;\n\n      case 'file':\n        type = PBData.DataType.File;\n        break;\n\n      case 'metadata':\n        type = PBData.DataType.Metadata;\n        break;\n\n      case 'symlink':\n        type = PBData.DataType.Symlink;\n        break;\n\n      case 'hamt-sharded-directory':\n        type = PBData.DataType.HAMTShard;\n        break;\n\n      default:\n        throw errcode__default[\"default\"](new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n\n    let data = this.data;\n\n    if (!this.data || !this.data.length) {\n      data = undefined;\n    }\n\n    let mode;\n\n    if (this.mode != null) {\n      mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined;\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined;\n      }\n    }\n\n    let mtime;\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime);\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        };\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds;\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    };\n    return PBData.encode(pbData).finish();\n  }\n\n}\n\nexports.UnixFS = UnixFS;\nexports.parseMode = parseMode;\nexports.parseMtime = parseMtime;","map":{"version":3,"names":["Object","defineProperty","exports","value","errcode","require","unixfs","_interopDefaultLegacy","e","errcode__default","PBData","Data","types","dirTypes","DEFAULT_FILE_MODE","parseInt","DEFAULT_DIRECTORY_MODE","parseMode","mode","undefined","toString","substring","parseMtime","input","mtime","secs","nsecs","Seconds","FractionalNanoseconds","Array","isArray","Date","ms","getTime","Math","floor","prototype","hasOwnProperty","call","Error","UnixFS","unmarshal","marshaled","message","decode","decoded","toObject","defaults","arrays","longs","Number","objects","data","type","Type","blockSizes","blocksizes","_originalMode","constructor","options","hashType","fanout","includes","_mode","isDirectory","parsedMode","Boolean","addBlockSize","size","push","removeBlockSize","index","splice","fileSize","sum","forEach","length","marshal","DataType","Raw","Directory","File","Metadata","Symlink","HAMTShard","parsed","pbData","filesize","encode","finish"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-unixfs/cjs/src/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar errcode = require('err-code');\nvar unixfs = require('./unixfs.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar errcode__default = /*#__PURE__*/_interopDefaultLegacy(errcode);\n\nconst PBData = unixfs.Data;\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n];\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n];\nconst DEFAULT_FILE_MODE = parseInt('0644', 8);\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\nfunction parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n  if (typeof mode === 'number') {\n    return mode & 4095;\n  }\n  mode = mode.toString();\n  if (mode.substring(0, 1) === '0') {\n    return parseInt(mode, 8) & 4095;\n  }\n  return parseInt(mode, 10) & 4095;\n}\nfunction parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n  let mtime;\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  }\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  }\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  }\n  if (input instanceof Date) {\n    const ms = input.getTime();\n    const secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode__default[\"default\"](new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n  return mtime;\n}\nclass UnixFS {\n  static unmarshal(marshaled) {\n    const message = PBData.decode(marshaled);\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    });\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime ? {\n        secs: decoded.mtime.Seconds,\n        nsecs: decoded.mtime.FractionalNanoseconds\n      } : undefined\n    });\n    data._originalMode = decoded.mode || 0;\n    return data;\n  }\n  constructor(options = { type: 'file' }) {\n    const {type, data, blockSizes, hashType, fanout, mtime, mode} = options;\n    if (type && !types.includes(type)) {\n      throw errcode__default[\"default\"](new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n    this.type = type || 'file';\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n    this.blockSizes = blockSizes || [];\n    this._originalMode = 0;\n    this.mode = parseMode(mode);\n    if (mtime) {\n      this.mtime = parseMtime(mtime);\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0;\n      }\n    }\n  }\n  set mode(mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\n    const parsedMode = parseMode(mode);\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode;\n    }\n  }\n  get mode() {\n    return this._mode;\n  }\n  isDirectory() {\n    return Boolean(this.type && dirTypes.includes(this.type));\n  }\n  addBlockSize(size) {\n    this.blockSizes.push(size);\n  }\n  removeBlockSize(index) {\n    this.blockSizes.splice(index, 1);\n  }\n  fileSize() {\n    if (this.isDirectory()) {\n      return 0;\n    }\n    let sum = 0;\n    this.blockSizes.forEach(size => {\n      sum += size;\n    });\n    if (this.data) {\n      sum += this.data.length;\n    }\n    return sum;\n  }\n  marshal() {\n    let type;\n    switch (this.type) {\n    case 'raw':\n      type = PBData.DataType.Raw;\n      break;\n    case 'directory':\n      type = PBData.DataType.Directory;\n      break;\n    case 'file':\n      type = PBData.DataType.File;\n      break;\n    case 'metadata':\n      type = PBData.DataType.Metadata;\n      break;\n    case 'symlink':\n      type = PBData.DataType.Symlink;\n      break;\n    case 'hamt-sharded-directory':\n      type = PBData.DataType.HAMTShard;\n      break;\n    default:\n      throw errcode__default[\"default\"](new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n    let data = this.data;\n    if (!this.data || !this.data.length) {\n      data = undefined;\n    }\n    let mode;\n    if (this.mode != null) {\n      mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined;\n      }\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined;\n      }\n    }\n    let mtime;\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime);\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        };\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds;\n        }\n      }\n    }\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    };\n    return PBData.encode(pbData).finish();\n  }\n}\n\nexports.UnixFS = UnixFS;\nexports.parseMode = parseMode;\nexports.parseMtime = parseMtime;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}