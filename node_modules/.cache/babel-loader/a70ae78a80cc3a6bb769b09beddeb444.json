{"ast":null,"code":"'use strict';\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  async function* put(key, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('dht/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: uint8ArrayToString(key),\n        ...options\n      }),\n      ...(await multipartRequest(value, controller, options.headers))\n    });\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message);\n\n      if (message.responses) {\n        message.responses = message.responses.map((\n        /** @type {{ ID: string, Addrs: string[] }} */\n        _ref) => {\n          let {\n            ID,\n            Addrs\n          } = _ref;\n          return {\n            id: ID,\n            addrs: (Addrs || []).map(a => new Multiaddr(a))\n          };\n        });\n      }\n\n      yield message;\n    }\n  }\n\n  return put;\n});","map":{"version":3,"names":["Multiaddr","require","toCamel","configure","toUrlSearchParams","multipartRequest","abortSignal","AbortController","toString","uint8ArrayToString","module","exports","api","put","key","value","options","controller","signal","res","post","searchParams","arg","headers","message","ndjson","responses","map","ID","Addrs","id","addrs","a"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/dht/put.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('dht/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: uint8ArrayToString(key),\n        ...options\n      }),\n      ...(\n        await multipartRequest(value, controller, options.headers)\n      )\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      if (message.responses) {\n        message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => new Multiaddr(a))\n        }))\n      }\n      yield message\n    }\n  }\n\n  return put\n})\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAM;EAAEM;AAAF,IAAsBN,OAAO,CAAC,yBAAD,CAAnC;;AACA,MAAM;EAAEO,QAAQ,EAAEC;AAAZ,IAAmCR,OAAO,CAAC,uBAAD,CAAhD;AAEA;AACA;AACA;AACA;;;AAEAS,MAAM,CAACC,OAAP,GAAiBR,SAAS,CAACS,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,GAAjB,CAAsBC,GAAtB,EAA2BC,KAA3B,EAAgD;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC9C;IACA,MAAMC,UAAU,GAAG,IAAIV,eAAJ,EAAnB;IACA,MAAMW,MAAM,GAAGZ,WAAW,CAACW,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAA1B;IAEA,MAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAJ,CAAS,SAAT,EAAoB;MACpCF,MADoC;MAEpCG,YAAY,EAAEjB,iBAAiB,CAAC;QAC9BkB,GAAG,EAAEb,kBAAkB,CAACK,GAAD,CADO;QAE9B,GAAGE;MAF2B,CAAD,CAFK;MAMpC,IACE,MAAMX,gBAAgB,CAACU,KAAD,EAAQE,UAAR,EAAoBD,OAAO,CAACO,OAA5B,CADxB;IANoC,CAApB,CAAlB;;IAWA,WAAW,IAAIC,OAAf,IAA0BL,GAAG,CAACM,MAAJ,EAA1B,EAAwC;MACtCD,OAAO,GAAGtB,OAAO,CAACsB,OAAD,CAAjB;;MACA,IAAIA,OAAO,CAACE,SAAZ,EAAuB;QACrBF,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACE,SAAR,CAAkBC,GAAlB,CAAsB;QAAC;QAAD;UAAA,IAAgD;YAAEC,EAAF;YAAMC;UAAN,CAAhD;UAAA,OAAmE;YAC3GC,EAAE,EAAEF,EADuG;YAE3GG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkBK,CAAC,IAAI,IAAIhC,SAAJ,CAAcgC,CAAd,CAAvB;UAFoG,CAAnE;QAAA,CAAtB,CAApB;MAID;;MACD,MAAMR,OAAN;IACD;EACF;;EAED,OAAOX,GAAP;AACD,CAjCyB,CAA1B"},"metadata":{},"sourceType":"script"}