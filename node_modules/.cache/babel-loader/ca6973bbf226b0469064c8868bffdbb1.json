{"ast":null,"code":"const {\n  Multiaddr\n} = require('multiaddr');\n\nconst reduceValue = (_, v) => v;\n\nconst tcpUri = (str, port, parts, opts) => {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return `tcp://${str}:${port}`; // check if tcp is the last protocol in multiaddr\n\n  let protocol = 'tcp';\n  let explicitPort = `:${port}`;\n  const last = parts[parts.length - 1];\n\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http';\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort;\n  }\n\n  return `${protocol}://${str}${explicitPort}`;\n};\n\nconst Reducers = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => parts.length === 1 && parts[0].protocol === 'ip6' ? content : `[${content}]`,\n  tcp: (str, content, i, parts, opts) => parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol)) ? `${str}:${content}` : tcpUri(str, content, parts, opts),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n};\n\nmodule.exports = (multiaddr, opts) => {\n  const ma = new Multiaddr(multiaddr);\n  const parts = multiaddr.toString().split('/').slice(1);\n  return ma.tuples().map(tuple => ({\n    protocol: parts.shift(),\n    content: tuple[1] ? parts.shift() : null\n  })).reduce((str, part, i, parts) => {\n    const reduce = Reducers[part.protocol];\n    if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`);\n    return reduce(str, part.content, i, parts, opts);\n  }, '');\n};","map":{"version":3,"names":["Multiaddr","require","reduceValue","_","v","tcpUri","str","port","parts","opts","assumeHttp","protocol","explicitPort","last","length","Reducers","ip4","ip6","content","i","tcp","some","p","includes","udp","dnsaddr","dns4","dns6","ipfs","p2p","http","https","ws","wss","module","exports","multiaddr","ma","toString","split","slice","tuples","map","tuple","shift","reduce","part","Error"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/multiaddr-to-uri/index.js"],"sourcesContent":["const { Multiaddr } = require('multiaddr')\n\nconst reduceValue = (_, v) => v\nconst tcpUri = (str, port, parts, opts) => {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return `tcp://${str}:${port}`\n  // check if tcp is the last protocol in multiaddr\n  let protocol = 'tcp'\n  let explicitPort = `:${port}`\n  const last = parts[parts.length - 1]\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http'\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort\n  }\n  return `${protocol}://${str}${explicitPort}`\n}\n\nconst Reducers = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => (\n    parts.length === 1 && parts[0].protocol === 'ip6'\n      ? content\n      : `[${content}]`\n  ),\n  tcp: (str, content, i, parts, opts) => (\n    parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol))\n      ? `${str}:${content}`\n      : tcpUri(str, content, parts, opts)\n  ),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n}\n\nmodule.exports = (multiaddr, opts) => {\n  const ma = new Multiaddr(multiaddr)\n  const parts = multiaddr.toString().split('/').slice(1)\n  return ma\n    .tuples()\n    .map(tuple => ({\n      protocol: parts.shift(),\n      content: tuple[1] ? parts.shift() : null\n    }))\n    .reduce((str, part, i, parts) => {\n      const reduce = Reducers[part.protocol]\n      if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`)\n      return reduce(str, part.content, i, parts, opts)\n    }, '')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}