{"ast":null,"code":"'use strict';\n\nvar Base = require('base');\n\nvar define = require('define-property');\n\nvar Compiler = require('./lib/compiler');\n\nvar Parser = require('./lib/parser');\n\nvar utils = require('./lib/utils');\n\nvar regexCache = {};\nvar cache = {};\n/**\n * Create a new instance of `Snapdragon` with the given `options`.\n *\n * ```js\n * var snapdragon = new Snapdragon();\n * ```\n *\n * @param {Object} `options`\n * @api public\n */\n\nfunction Snapdragon(options) {\n  Base.call(this, null, options);\n  this.options = utils.extend({\n    source: 'string'\n  }, this.options);\n  this.compiler = new Compiler(this.options);\n  this.parser = new Parser(this.options);\n  Object.defineProperty(this, 'compilers', {\n    get: function () {\n      return this.compiler.compilers;\n    }\n  });\n  Object.defineProperty(this, 'parsers', {\n    get: function () {\n      return this.parser.parsers;\n    }\n  });\n  Object.defineProperty(this, 'regex', {\n    get: function () {\n      return this.parser.regex;\n    }\n  });\n}\n/**\n * Inherit Base\n */\n\n\nBase.extend(Snapdragon);\n/**\n * Add a parser to `snapdragon.parsers` for capturing the given `type` using\n * the specified regex or parser function. A function is useful if you need\n * to customize how the token is created and/or have access to the parser\n * instance to check options, etc.\n *\n * ```js\n * snapdragon\n *   .capture('slash', /^\\//)\n *   .capture('dot', function() {\n *     var pos = this.position();\n *     var m = this.match(/^\\./);\n *     if (!m) return;\n *     return pos({\n *       type: 'dot',\n *       val: m[0]\n *     });\n *   });\n * ```\n * @param {String} `type`\n * @param {RegExp|Function} `regex`\n * @return {Object} Returns the parser instance for chaining\n * @api public\n */\n\nSnapdragon.prototype.capture = function () {\n  return this.parser.capture.apply(this.parser, arguments);\n};\n/**\n * Register a plugin `fn`.\n *\n * ```js\n * var snapdragon = new Snapdgragon([options]);\n * snapdragon.use(function() {\n *   console.log(this);          //<= snapdragon instance\n *   console.log(this.parser);   //<= parser instance\n *   console.log(this.compiler); //<= compiler instance\n * });\n * ```\n * @param {Object} `fn`\n * @api public\n */\n\n\nSnapdragon.prototype.use = function (fn) {\n  fn.call(this, this);\n  return this;\n};\n/**\n * Parse the given `str`.\n *\n * ```js\n * var snapdragon = new Snapdgragon([options]);\n * // register parsers\n * snapdragon.parser.use(function() {});\n *\n * // parse\n * var ast = snapdragon.parse('foo/bar');\n * console.log(ast);\n * ```\n * @param {String} `str`\n * @param {Object} `options` Set `options.sourcemap` to true to enable source maps.\n * @return {Object} Returns an AST.\n * @api public\n */\n\n\nSnapdragon.prototype.parse = function (str, options) {\n  this.options = utils.extend({}, this.options, options);\n  var parsed = this.parser.parse(str, this.options); // add non-enumerable parser reference\n\n  define(parsed, 'parser', this.parser);\n  return parsed;\n};\n/**\n * Compile the given `AST`.\n *\n * ```js\n * var snapdragon = new Snapdgragon([options]);\n * // register plugins\n * snapdragon.use(function() {});\n * // register parser plugins\n * snapdragon.parser.use(function() {});\n * // register compiler plugins\n * snapdragon.compiler.use(function() {});\n *\n * // parse\n * var ast = snapdragon.parse('foo/bar');\n *\n * // compile\n * var res = snapdragon.compile(ast);\n * console.log(res.output);\n * ```\n * @param {Object} `ast`\n * @param {Object} `options`\n * @return {Object} Returns an object with an `output` property with the rendered string.\n * @api public\n */\n\n\nSnapdragon.prototype.compile = function (ast, options) {\n  this.options = utils.extend({}, this.options, options);\n  var compiled = this.compiler.compile(ast, this.options); // add non-enumerable compiler reference\n\n  define(compiled, 'compiler', this.compiler);\n  return compiled;\n};\n/**\n * Expose `Snapdragon`\n */\n\n\nmodule.exports = Snapdragon;\n/**\n * Expose `Parser` and `Compiler`\n */\n\nmodule.exports.Compiler = Compiler;\nmodule.exports.Parser = Parser;","map":{"version":3,"names":["Base","require","define","Compiler","Parser","utils","regexCache","cache","Snapdragon","options","call","extend","source","compiler","parser","Object","defineProperty","get","compilers","parsers","regex","prototype","capture","apply","arguments","use","fn","parse","str","parsed","compile","ast","compiled","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/snapdragon/index.js"],"sourcesContent":["'use strict';\n\nvar Base = require('base');\nvar define = require('define-property');\nvar Compiler = require('./lib/compiler');\nvar Parser = require('./lib/parser');\nvar utils = require('./lib/utils');\nvar regexCache = {};\nvar cache = {};\n\n/**\n * Create a new instance of `Snapdragon` with the given `options`.\n *\n * ```js\n * var snapdragon = new Snapdragon();\n * ```\n *\n * @param {Object} `options`\n * @api public\n */\n\nfunction Snapdragon(options) {\n  Base.call(this, null, options);\n  this.options = utils.extend({source: 'string'}, this.options);\n  this.compiler = new Compiler(this.options);\n  this.parser = new Parser(this.options);\n\n  Object.defineProperty(this, 'compilers', {\n    get: function() {\n      return this.compiler.compilers;\n    }\n  });\n\n  Object.defineProperty(this, 'parsers', {\n    get: function() {\n      return this.parser.parsers;\n    }\n  });\n\n  Object.defineProperty(this, 'regex', {\n    get: function() {\n      return this.parser.regex;\n    }\n  });\n}\n\n/**\n * Inherit Base\n */\n\nBase.extend(Snapdragon);\n\n/**\n * Add a parser to `snapdragon.parsers` for capturing the given `type` using\n * the specified regex or parser function. A function is useful if you need\n * to customize how the token is created and/or have access to the parser\n * instance to check options, etc.\n *\n * ```js\n * snapdragon\n *   .capture('slash', /^\\//)\n *   .capture('dot', function() {\n *     var pos = this.position();\n *     var m = this.match(/^\\./);\n *     if (!m) return;\n *     return pos({\n *       type: 'dot',\n *       val: m[0]\n *     });\n *   });\n * ```\n * @param {String} `type`\n * @param {RegExp|Function} `regex`\n * @return {Object} Returns the parser instance for chaining\n * @api public\n */\n\nSnapdragon.prototype.capture = function() {\n  return this.parser.capture.apply(this.parser, arguments);\n};\n\n/**\n * Register a plugin `fn`.\n *\n * ```js\n * var snapdragon = new Snapdgragon([options]);\n * snapdragon.use(function() {\n *   console.log(this);          //<= snapdragon instance\n *   console.log(this.parser);   //<= parser instance\n *   console.log(this.compiler); //<= compiler instance\n * });\n * ```\n * @param {Object} `fn`\n * @api public\n */\n\nSnapdragon.prototype.use = function(fn) {\n  fn.call(this, this);\n  return this;\n};\n\n/**\n * Parse the given `str`.\n *\n * ```js\n * var snapdragon = new Snapdgragon([options]);\n * // register parsers\n * snapdragon.parser.use(function() {});\n *\n * // parse\n * var ast = snapdragon.parse('foo/bar');\n * console.log(ast);\n * ```\n * @param {String} `str`\n * @param {Object} `options` Set `options.sourcemap` to true to enable source maps.\n * @return {Object} Returns an AST.\n * @api public\n */\n\nSnapdragon.prototype.parse = function(str, options) {\n  this.options = utils.extend({}, this.options, options);\n  var parsed = this.parser.parse(str, this.options);\n\n  // add non-enumerable parser reference\n  define(parsed, 'parser', this.parser);\n  return parsed;\n};\n\n/**\n * Compile the given `AST`.\n *\n * ```js\n * var snapdragon = new Snapdgragon([options]);\n * // register plugins\n * snapdragon.use(function() {});\n * // register parser plugins\n * snapdragon.parser.use(function() {});\n * // register compiler plugins\n * snapdragon.compiler.use(function() {});\n *\n * // parse\n * var ast = snapdragon.parse('foo/bar');\n *\n * // compile\n * var res = snapdragon.compile(ast);\n * console.log(res.output);\n * ```\n * @param {Object} `ast`\n * @param {Object} `options`\n * @return {Object} Returns an object with an `output` property with the rendered string.\n * @api public\n */\n\nSnapdragon.prototype.compile = function(ast, options) {\n  this.options = utils.extend({}, this.options, options);\n  var compiled = this.compiler.compile(ast, this.options);\n\n  // add non-enumerable compiler reference\n  define(compiled, 'compiler', this.compiler);\n  return compiled;\n};\n\n/**\n * Expose `Snapdragon`\n */\n\nmodule.exports = Snapdragon;\n\n/**\n * Expose `Parser` and `Compiler`\n */\n\nmodule.exports.Compiler = Compiler;\nmodule.exports.Parser = Parser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}