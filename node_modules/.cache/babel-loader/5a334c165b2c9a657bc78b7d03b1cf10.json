{"ast":null,"code":"const {\n  openPopup\n} = require(\"./popup/popup\");\n\nconst {\n  sleep,\n  prepareTxn\n} = require(\"./utils/utils\");\n\nconst Errors = require(\"./utils/errors\");\n\nconst Messaging = require(\"./messaging/Messaging\");\n/**\n * @type {Messaging | null}\n */\n\n\nlet bridge = null;\n/**\n * @description Transaction hash\n * @typedef TxHash\n * @type {string}\n */\n\n/**\n * @description Base64 string\n * @typedef Base64\n * @type {string}\n */\n\n/**\n  * @description Options\n  * @typedef Options\n  * @type {object}\n  * @property {string} [bridgeUrl] Override wallet.myalgo.com default frame url.\n  * @property {number} [timeout] Number of msec to wait the popup response, default value: 1600000 msec.\n  * @property {boolean} [disableLedgerNano] It will disable ledger nano accounts and returns only mnemonic accounts.\n  */\n\n/**\n  * @description Sign transaction options\n  * @typedef SignTransactionOptions\n  * @type {object}\n  * @property {Address} [overrideSigner] Force transactions to be signed with the specified account instead of the from/auth address.\n  */\n\n/**\n * @description Connect method settings\n * @typedef ConnectionSettings\n * @type {object}\n * @property {boolean} [shouldSelectOneAccount] Only returns one account\n * @property {boolean} [openManager] Open account manager\n */\n\n/**\n * @description Algorand account address\n * @typedef Address\n * @type {string}\n */\n\n/**\n * @description Payment transaction object\n * @typedef PaymentTxn\n * @type {object}\n * @property {\"pay\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n */\n\n/**\n * @description Asset transfer transaction object\n * @typedef AssetTransferTxn\n * @type {object}\n * @property {\"axfer\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n * @property {number} [assetIndex] Asset index\n * @property {Address} [assetRevocationTarget] Asset revocation address\n */\n\n/**\n * @description Asset configuration transaction object\n * @typedef AssetConfigTxn\n * @type {object}\n * @property {\"acfg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [assetIndex] Asset index\n * @property {number} [assetTotal] Asset total supply\n * @property {number} [assetDecimals] Asset decimals\n * @property {boolean} [assetDefaultFrozen] Default frozen\n * @property {Address} [assetManager] Asset manager address\n * @property {Address} [assetReserve] Asset reserve address\n * @property {Address} [assetFreeze] Asset freeze address\n * @property {Address} [assetClawback] Asset clawback address\n * @property {string} [assetUnitName] Asset unit name\n * @property {string} [assetName] Asset name\n * @property {string} [assetURL] Asset url\n * @property {string} [assetMetadataHash] Asset metadata hash\n * @property {boolean} [strictEmptyAddressChecking]\n */\n\n/**\n * @description Key registration transaction object\n * @typedef KeyRegTxn\n * @type {object}\n * @property {\"keyreg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {string} [voteKey] Vote key\n * @property {string} [selectionKey] Selection key\n * @property {number} voteFirst Vote first round\n * @property {number} voteLast Vote last round\n * @property {number} [voteKeyDilution] Vote key dilution\n */\n\n/**\n * @description Application call transaction object\n * @typedef ApplicationTxn\n * @type {object}\n * @property {\"appl\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [appIndex] Application id\n * @property {0|1|2|3|4|5} [appOnComplete]\n * @property {number} [appLocalInts]\n * @property {number} [appLocalByteSlices]\n * @property {number} [appGlobalInts]\n * @property {number} [appGlobalByteSlices]\n * @property {Uint8Array|Base64} [appApprovalProgram]\n * @property {Uint8Array|Base64} [appClearProgram]\n * @property {Uint8Array[]|Base64[]} [appArgs]\n * @property {Address[]} [appAccounts]\n * @property {number[]} [appForeignApps]\n * @property {number[]} [appForeignAssets]\n */\n\n/**\n * @description Transaction Object\n * @typedef Transaction\n * @type {PaymentTxn | AssetTransferTxn | AssetConfigTxn | KeyRegTxn | ApplicationTxn}\n */\n\n/**\n * @typedef EncodedTransaction\n * @type {Uint8Array|Base64} Algorand Encoded Transaction\n */\n\n/**\n * @typedef SignedTx\n * @type {object}\n * @property {TxHash} txID Transaction hash\n * @property {Uint8Array} blob Signed transaction\n */\n\nclass MyAlgoConnect {\n  /**\n   * @constructor\n   * @param {Options} [options] Operation options\n   */\n  constructor(options) {\n    if (!bridge) {\n      bridge = new Messaging();\n    }\n    /**\n     * @access private\n     * @type {Messaging}\n     */\n\n\n    this.bridge = bridge;\n    /**\n     * @access private\n     * @type {number} Popup Timeout\n     */\n\n    this.timeout = options && options.timeout ? options.timeout : 1600000;\n    /**\n     * @access private\n     * @type {string} Frame url\n     */\n\n    this.url = options && options.bridgeUrl ? options.bridgeUrl : \"https://wallet.myalgo.com/bridge\";\n    if (this.url.endsWith(\"/\")) this.url = this.url.slice(0, -1);\n    /**\n     * @access private\n     * @description This is used to reuse the current connect opened popup\n     * @type {Window|null}\n     */\n\n    this.currentConnectPopup = null;\n    /**\n     * @access private\n     * @description This is used to reuse the current signtx opened popup\n     * @type {Window|null}\n     */\n\n    this.currentSigntxPopup = null;\n    /**\n     * @access private\n     * @description This is used to reuse the current signlogic opened popup\n     * @type {Window|null}\n     */\n\n    this.currentSignLogicSigPopup = null;\n    /**\n     * @access private\n     * @description This is used to reuse the current tealsign opened popup\n     * @type {Window|null}\n     */\n\n    this.currentTealSignPopup = null;\n    /**\n     * @access private\n     * @description This is used to reuse the current signbytes opened popup\n     * @type {Window|null}\n     */\n\n    this.currentSignBytesPopup = null;\n    /**\n     * @access private\n     * @description Replace default bridge options\n     * @type {import(\"@randlabs/communication-bridge\").sendMessageOptions}\n     */\n\n    this.options = {\n      waitForReply: true,\n      timeout: this.timeout\n    };\n    /**\n     * @access private\n     * @description Disable ledger nano\n     * @type {boolean}\n     */\n\n    this.disableLedgerNano = options && options.disableLedgerNano ? options.disableLedgerNano : false;\n  }\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to load accounts from storage.\n   * @param {ConnectionSettings} settings Connect settings\n   * @returns {Promise<string[]>} Returns allowed accounts by the user.\n   */\n\n\n  async connect() {\n    let settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      shouldSelectOneAccount: false,\n      openManager: false\n    };\n\n    if (this.currentConnectPopup) {\n      if (this.currentConnectPopup.closed) {\n        this.currentConnectPopup = null;\n      } else {\n        this.focusWindow(this.currentConnectPopup);\n      }\n    }\n\n    try {\n      this.currentConnectPopup = openPopup(this.url + \"/connect.html\");\n      await this.waitForWindowToLoad(this.currentConnectPopup);\n      const res = await this.bridge.sendMessage(this.currentConnectPopup, {\n        method: \"unlock\",\n        params: Object.assign(settings, {\n          disableLedgerNano: this.disableLedgerNano\n        })\n      }, this.url, this.options);\n      this.closeWindow(this.currentConnectPopup);\n      this.currentConnectPopup = null;\n      if (res.status === \"error\") throw new Error(res.message);\n      return res.data.accounts;\n    } catch (err) {\n      this.closeWindow(this.currentConnectPopup);\n      this.currentConnectPopup = null;\n      throw err;\n    }\n  }\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to sign transaction.\n   * @param {Transaction|Transaction[]|EncodedTransaction|EncodedTransaction[]} transaction Transaction object or a Transaction array.\n   * @param {SignTransactionOptions} [signOptions] Sign transactions options object.\n   * (The signer account must be the same for all transactions).\n   * @returns {(SignedTx|SignedTx[])} Returns transaction blob or an Array of blobs, depends if the\n   * transaction was an object or an array.\n   */\n\n\n  async signTransaction(transaction, signOptions) {\n    let txn;\n\n    if (this.currentSigntxPopup) {\n      if (this.currentSigntxPopup.closed) {\n        this.currentSigntxPopup = null;\n      } else {\n        this.focusWindow(this.currentSigntxPopup);\n      }\n    }\n\n    if (Array.isArray(transaction)) txn = Array.from(transaction).map(tx => prepareTxn(tx));else txn = prepareTxn(transaction);\n\n    try {\n      this.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n      await this.waitForWindowToLoad(this.currentSigntxPopup); // Send transaction info\n\n      const res = await this.bridge.sendMessage(this.currentSigntxPopup, {\n        method: \"transaction\",\n        params: {\n          txn,\n          settings: {\n            disableLedgerNano: this.disableLedgerNano\n          },\n          options: signOptions\n        }\n      }, this.url, this.options);\n      this.closeWindow(this.currentSigntxPopup);\n      this.currentSigntxPopup = null;\n      if (res.status === \"error\") throw new Error(res.message);\n\n      if (Array.isArray(res.data)) {\n        const result = [];\n\n        for (const t of res.data) {\n          t.blob = new Uint8Array(Buffer.from(t.blob, \"hex\"));\n          result.push(t);\n        }\n\n        return result;\n      }\n\n      res.data.blob = new Uint8Array(Buffer.from(res.data.blob, \"hex\"));\n      return res.data;\n    } catch (err) {\n      this.closeWindow(this.currentSigntxPopup);\n      this.currentSigntxPopup = null;\n      throw err;\n    }\n  }\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to sign a teal program.\n   * @param {Uint8Array|Base64} logic LogicSig program\n   * @param {Address} address Signer Address\n   * @returns {Uint8Array} Returns logicsig blob\n   */\n\n\n  async signLogicSig(logic, address) {\n    if (this.currentSignLogicSigPopup) {\n      if (this.currentSignLogicSigPopup.closed) {\n        this.currentSignLogicSigPopup = null;\n      } else {\n        this.focusWindow(this.currentSignLogicSigPopup);\n      }\n    }\n\n    try {\n      this.currentSignLogicSigPopup = openPopup(this.url + \"/logicsigtx.html\");\n      await this.waitForWindowToLoad(this.currentSignLogicSigPopup); // Send program\n\n      let logicInBase64 = logic;\n      if (logic.constructor === Uint8Array) logicInBase64 = Buffer.from(logic).toString(\"base64\");\n      const res = await this.bridge.sendMessage(this.currentSignLogicSigPopup, {\n        method: \"logicsig\",\n        params: {\n          logic: logicInBase64,\n          address\n        }\n      }, this.url, this.options);\n      this.closeWindow(this.currentSignLogicSigPopup);\n      this.currentSignLogicSigPopup = null;\n      if (res.status === \"error\") throw new Error(res.message);\n      return new Uint8Array(Buffer.from(res.data.signedTeal, \"base64\"));\n    } catch (err) {\n      this.closeWindow(this.currentSignLogicSigPopup);\n      this.currentSignLogicSigPopup = null;\n      throw err;\n    }\n  }\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to sign data to verify in a teal program.\n   * @param {Uint8Array|Base64} data Data to sign\n   * @param {Address} contractAddress Address of the contract that will verify the data\n   * @param {Address} address Signer Address\n   * @returns {Uint8Array} Returns data signature\n   */\n\n\n  async tealSign(data, contractAddress, address) {\n    if (this.currentTealSignPopup) {\n      if (this.currentTealSignPopup.closed) {\n        this.currentTealSignPopup = null;\n      } else {\n        this.focusWindow(this.currentTealSignPopup);\n      }\n    }\n\n    try {\n      this.currentTealSignPopup = openPopup(this.url + \"/tealsign.html\");\n      await this.waitForWindowToLoad(this.currentTealSignPopup); // Send program\n\n      let dataInBase64 = data;\n      if (data.constructor === Uint8Array) dataInBase64 = Buffer.from(data).toString(\"base64\");\n      const res = await this.bridge.sendMessage(this.currentTealSignPopup, {\n        method: \"tealsign\",\n        params: {\n          data: dataInBase64,\n          contractAddress: contractAddress,\n          address\n        }\n      }, this.url, this.options);\n      this.closeWindow(this.currentTealSignPopup);\n      this.currentTealSignPopup = null;\n      if (res.status === \"error\") throw new Error(res.message);\n      return new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n    } catch (err) {\n      this.closeWindow(this.currentTealSignPopup);\n      this.currentTealSignPopup = null;\n      throw err;\n    }\n  }\n  /**\n   * @async\n   * @access public\n   * @description Open a new window to sign an arbitrary array of bytes.\n   * @param {Uint8Array} bytes Bytes to sign\n   * @param {Address} address Signer Address\n   * @returns {Uint8Array} Returns bytes signature\n   */\n\n\n  async signBytes(bytes, address) {\n    if (this.currentSignBytesPopup) {\n      if (this.currentSignBytesPopup.closed) {\n        this.currentSignBytesPopup = null;\n      } else {\n        this.focusWindow(this.currentSignBytesPopup);\n      }\n    }\n\n    try {\n      this.currentSignBytesPopup = openPopup(this.url + \"/signbytes.html\");\n      await this.waitForWindowToLoad(this.currentSignBytesPopup);\n      let messageInBase64 = Buffer.from(bytes).toString(\"base64\");\n      const res = await this.bridge.sendMessage(this.currentSignBytesPopup, {\n        method: \"signbytes\",\n        params: {\n          data: messageInBase64,\n          address\n        }\n      }, this.url, this.options);\n      this.closeWindow(this.currentSignBytesPopup);\n      this.currentSignBytesPopup = null;\n      if (res.status === \"error\") throw new Error(res.message);\n      return new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n    } catch (err) {\n      this.closeWindow(this.currentSignBytesPopup);\n      this.currentSignBytesPopup = null;\n      throw err;\n    }\n  }\n  /**\n   * @async\n   * @access private\n   * @description Wait until the window opened loads.\n   * @param {Window} targetWindow Window opened context.\n   * @param {number} retries Times to retry before throw an error.\n   * @returns {Promise<void>} Throw error if the window does not load.\n   */\n\n\n  async waitForWindowToLoad(targetWindow) {\n    let retries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n\n    for (let i = 0; i < retries; i++) {\n      await sleep(300);\n      if (!targetWindow) break;\n\n      try {\n        const res = await bridge.sendMessage(targetWindow, {\n          method: \"status\"\n        }, this.url);\n        if (res.status == \"success\") return;\n      } catch (err) {// Ignore error\n      }\n    }\n\n    throw new Error(Errors.WINDOW_NOT_LOADED);\n  }\n  /**\n   * @access private\n   * @description Safely close an opened window\n   * @param {Window} window Window object\n   * @returns {void}\n   */\n\n\n  closeWindow(window) {\n    if (window && !window.closed && window.close) {\n      window.close();\n    }\n  }\n  /**\n   * @access private\n   * @description Focus current popup\n   * @param {Window} window Window object\n   * @returns {void}\n   * @throws {\"Windows is opened\"}\n   */\n\n\n  focusWindow(window) {\n    if (window && window.focus) {\n      window.focus();\n      throw new Error(Errors.WINDOW_IS_OPENED);\n    } else {\n      throw new Error(Errors.INVALID_WINDOW);\n    }\n  }\n\n}\n\nmodule.exports = MyAlgoConnect;","map":{"version":3,"names":["openPopup","require","sleep","prepareTxn","Errors","Messaging","bridge","MyAlgoConnect","constructor","options","timeout","url","bridgeUrl","endsWith","slice","currentConnectPopup","currentSigntxPopup","currentSignLogicSigPopup","currentTealSignPopup","currentSignBytesPopup","waitForReply","disableLedgerNano","connect","settings","shouldSelectOneAccount","openManager","closed","focusWindow","waitForWindowToLoad","res","sendMessage","method","params","Object","assign","closeWindow","status","Error","message","data","accounts","err","signTransaction","transaction","signOptions","txn","Array","isArray","from","map","tx","result","t","blob","Uint8Array","Buffer","push","signLogicSig","logic","address","logicInBase64","toString","signedTeal","tealSign","contractAddress","dataInBase64","signature","signBytes","bytes","messageInBase64","targetWindow","retries","i","WINDOW_NOT_LOADED","window","close","focus","WINDOW_IS_OPENED","INVALID_WINDOW","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/@randlabs/myalgo-connect/lib/main.js"],"sourcesContent":["const { openPopup } = require(\"./popup/popup\");\nconst { sleep, prepareTxn } = require(\"./utils/utils\");\nconst Errors = require(\"./utils/errors\");\n\nconst Messaging = require(\"./messaging/Messaging\");\n\n/**\n * @type {Messaging | null}\n */\nlet bridge = null;\n\n/**\n * @description Transaction hash\n * @typedef TxHash\n * @type {string}\n */\n\n/**\n * @description Base64 string\n * @typedef Base64\n * @type {string}\n */\n\n/**\n  * @description Options\n  * @typedef Options\n  * @type {object}\n  * @property {string} [bridgeUrl] Override wallet.myalgo.com default frame url.\n  * @property {number} [timeout] Number of msec to wait the popup response, default value: 1600000 msec.\n  * @property {boolean} [disableLedgerNano] It will disable ledger nano accounts and returns only mnemonic accounts.\n  */\n\n/**\n  * @description Sign transaction options\n  * @typedef SignTransactionOptions\n  * @type {object}\n  * @property {Address} [overrideSigner] Force transactions to be signed with the specified account instead of the from/auth address.\n  */\n\n/**\n * @description Connect method settings\n * @typedef ConnectionSettings\n * @type {object}\n * @property {boolean} [shouldSelectOneAccount] Only returns one account\n * @property {boolean} [openManager] Open account manager\n */\n\n/**\n * @description Algorand account address\n * @typedef Address\n * @type {string}\n */\n\n/**\n * @description Payment transaction object\n * @typedef PaymentTxn\n * @type {object}\n * @property {\"pay\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n */\n\n/**\n * @description Asset transfer transaction object\n * @typedef AssetTransferTxn\n * @type {object}\n * @property {\"axfer\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n * @property {number} [assetIndex] Asset index\n * @property {Address} [assetRevocationTarget] Asset revocation address\n */\n\n/**\n * @description Asset configuration transaction object\n * @typedef AssetConfigTxn\n * @type {object}\n * @property {\"acfg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [assetIndex] Asset index\n * @property {number} [assetTotal] Asset total supply\n * @property {number} [assetDecimals] Asset decimals\n * @property {boolean} [assetDefaultFrozen] Default frozen\n * @property {Address} [assetManager] Asset manager address\n * @property {Address} [assetReserve] Asset reserve address\n * @property {Address} [assetFreeze] Asset freeze address\n * @property {Address} [assetClawback] Asset clawback address\n * @property {string} [assetUnitName] Asset unit name\n * @property {string} [assetName] Asset name\n * @property {string} [assetURL] Asset url\n * @property {string} [assetMetadataHash] Asset metadata hash\n * @property {boolean} [strictEmptyAddressChecking]\n */\n\n/**\n * @description Key registration transaction object\n * @typedef KeyRegTxn\n * @type {object}\n * @property {\"keyreg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {string} [voteKey] Vote key\n * @property {string} [selectionKey] Selection key\n * @property {number} voteFirst Vote first round\n * @property {number} voteLast Vote last round\n * @property {number} [voteKeyDilution] Vote key dilution\n */\n\n/**\n * @description Application call transaction object\n * @typedef ApplicationTxn\n * @type {object}\n * @property {\"appl\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [appIndex] Application id\n * @property {0|1|2|3|4|5} [appOnComplete]\n * @property {number} [appLocalInts]\n * @property {number} [appLocalByteSlices]\n * @property {number} [appGlobalInts]\n * @property {number} [appGlobalByteSlices]\n * @property {Uint8Array|Base64} [appApprovalProgram]\n * @property {Uint8Array|Base64} [appClearProgram]\n * @property {Uint8Array[]|Base64[]} [appArgs]\n * @property {Address[]} [appAccounts]\n * @property {number[]} [appForeignApps]\n * @property {number[]} [appForeignAssets]\n */\n\n/**\n * @description Transaction Object\n * @typedef Transaction\n * @type {PaymentTxn | AssetTransferTxn | AssetConfigTxn | KeyRegTxn | ApplicationTxn}\n */\n\n/**\n * @typedef EncodedTransaction\n * @type {Uint8Array|Base64} Algorand Encoded Transaction\n */\n\n/**\n * @typedef SignedTx\n * @type {object}\n * @property {TxHash} txID Transaction hash\n * @property {Uint8Array} blob Signed transaction\n */\n\nclass MyAlgoConnect {\n\n\t/**\n\t * @constructor\n\t * @param {Options} [options] Operation options\n\t */\n\tconstructor(options) {\n\n\t\tif (!bridge) {\n\t\t\tbridge = new Messaging();\n\t\t}\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {Messaging}\n\t\t */\n\t\tthis.bridge = bridge;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Popup Timeout\n\t\t */\n\t\tthis.timeout = (options && options.timeout ? options.timeout : 1600000);\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {string} Frame url\n\t\t */\n\t\tthis.url = (options && options.bridgeUrl ? options.bridgeUrl : \"https://wallet.myalgo.com/bridge\");\n\n\t\tif (this.url.endsWith(\"/\"))\n\t\t\tthis.url = this.url.slice(0, -1);\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current connect opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentConnectPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signtx opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSigntxPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signlogic opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSignLogicSigPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current tealsign opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentTealSignPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signbytes opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\t this.currentSignBytesPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description Replace default bridge options\n\t\t * @type {import(\"@randlabs/communication-bridge\").sendMessageOptions}\n\t\t */\n\t\tthis.options = { waitForReply: true, timeout: this.timeout };\n\n\t\t/**\n\t\t * @access private\n\t\t * @description Disable ledger nano\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.disableLedgerNano = (options && options.disableLedgerNano) ? options.disableLedgerNano : false;\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to load accounts from storage.\n\t * @param {ConnectionSettings} settings Connect settings\n\t * @returns {Promise<string[]>} Returns allowed accounts by the user.\n\t */\n\tasync connect(settings = { shouldSelectOneAccount: false, openManager: false }) {\n\n\t\tif (this.currentConnectPopup) {\n\t\t\tif (this.currentConnectPopup.closed) {\n\t\t\t\tthis.currentConnectPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentConnectPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentConnectPopup = openPopup(this.url + \"/connect.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentConnectPopup);\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentConnectPopup,\n\t\t\t\t{ method: \"unlock\", params: Object.assign(settings, { disableLedgerNano: this.disableLedgerNano }) },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentConnectPopup);\n\t\t\tthis.currentConnectPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn res.data.accounts;\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentConnectPopup);\n\t\t\tthis.currentConnectPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign transaction.\n\t * @param {Transaction|Transaction[]|EncodedTransaction|EncodedTransaction[]} transaction Transaction object or a Transaction array.\n\t * @param {SignTransactionOptions} [signOptions] Sign transactions options object.\n\t * (The signer account must be the same for all transactions).\n\t * @returns {(SignedTx|SignedTx[])} Returns transaction blob or an Array of blobs, depends if the\n\t * transaction was an object or an array.\n\t */\n\tasync signTransaction(transaction, signOptions) {\n\t\tlet txn;\n\n\t\tif (this.currentSigntxPopup) {\n\t\t\tif (this.currentSigntxPopup.closed) {\n\t\t\t\tthis.currentSigntxPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSigntxPopup);\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(transaction))\n\t\t\ttxn = Array.from(transaction).map(tx => prepareTxn(tx));\n\t\telse\n\t\t\ttxn = prepareTxn(transaction);\n\n\t\ttry {\n\t\t\tthis.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentSigntxPopup);\n\n\t\t\t// Send transaction info\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSigntxPopup, {\n\t\t\t\t\tmethod: \"transaction\",\n\t\t\t\t\tparams: { txn, settings: { disableLedgerNano: this.disableLedgerNano }, options: signOptions },\n\t\t\t\t},\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\tif (Array.isArray(res.data)) {\n\t\t\t\tconst result = [];\n\t\t\t\tfor (const t of res.data) {\n\t\t\t\t\tt.blob = new Uint8Array(Buffer.from(t.blob, \"hex\"));\n\t\t\t\t\tresult.push(t);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tres.data.blob = new Uint8Array(Buffer.from(res.data.blob, \"hex\"));\n\n\t\t\treturn res.data;\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign a teal program.\n\t * @param {Uint8Array|Base64} logic LogicSig program\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns logicsig blob\n\t */\n\tasync signLogicSig(logic, address) {\n\n\t\tif (this.currentSignLogicSigPopup) {\n\t\t\tif (this.currentSignLogicSigPopup.closed) {\n\t\t\t\tthis.currentSignLogicSigPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSignLogicSigPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSignLogicSigPopup = openPopup(this.url + \"/logicsigtx.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSignLogicSigPopup);\n\n\t\t\t// Send program\n\t\t\tlet logicInBase64 = logic;\n\t\t\tif (logic.constructor === Uint8Array)\n\t\t\t\tlogicInBase64 = Buffer.from(logic).toString(\"base64\");\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSignLogicSigPopup,\n\t\t\t\t{ method: \"logicsig\", params: { logic: logicInBase64, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSignLogicSigPopup);\n\t\t\tthis.currentSignLogicSigPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signedTeal, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSignLogicSigPopup);\n\t\t\tthis.currentSignLogicSigPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign data to verify in a teal program.\n\t * @param {Uint8Array|Base64} data Data to sign\n\t * @param {Address} contractAddress Address of the contract that will verify the data\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns data signature\n\t */\n\tasync tealSign(data, contractAddress, address) {\n\n\t\tif (this.currentTealSignPopup) {\n\t\t\tif (this.currentTealSignPopup.closed) {\n\t\t\t\tthis.currentTealSignPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentTealSignPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentTealSignPopup = openPopup(this.url + \"/tealsign.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentTealSignPopup);\n\n\t\t\t// Send program\n\t\t\tlet dataInBase64 = data;\n\t\t\tif (data.constructor === Uint8Array)\n\t\t\t\tdataInBase64 = Buffer.from(data).toString(\"base64\");\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentTealSignPopup,\n\t\t\t\t{ method: \"tealsign\", params: { data: dataInBase64, contractAddress: contractAddress, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentTealSignPopup);\n\t\t\tthis.currentTealSignPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentTealSignPopup);\n\t\t\tthis.currentTealSignPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign an arbitrary array of bytes.\n\t * @param {Uint8Array} bytes Bytes to sign\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns bytes signature\n\t */\n\t async signBytes(bytes, address) {\n\t\tif (this.currentSignBytesPopup) {\n\t\t\tif (this.currentSignBytesPopup.closed) {\n\t\t\t\tthis.currentSignBytesPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSignBytesPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSignBytesPopup = openPopup(this.url + \"/signbytes.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSignBytesPopup);\n\n\t\t\tlet messageInBase64 = Buffer.from(bytes).toString(\"base64\");\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSignBytesPopup,\n\t\t\t\t{ method: \"signbytes\", params: { data: messageInBase64, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSignBytesPopup);\n\t\t\tthis.currentSignBytesPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSignBytesPopup);\n\t\t\tthis.currentSignBytesPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access private\n\t * @description Wait until the window opened loads.\n\t * @param {Window} targetWindow Window opened context.\n\t * @param {number} retries Times to retry before throw an error.\n\t * @returns {Promise<void>} Throw error if the window does not load.\n\t */\n\tasync waitForWindowToLoad(targetWindow, retries = 30) {\n\t\tfor (let i = 0; i < retries; i++) {\n\t\t\tawait sleep(300);\n\t\t\tif (!targetWindow) break;\n\t\t\ttry {\n\t\t\t\tconst res = await bridge.sendMessage(targetWindow, { method: \"status\" }, this.url);\n\t\t\t\tif (res.status == \"success\")\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\t// Ignore error\n\t\t\t}\n\t\t}\n\t\tthrow new Error(Errors.WINDOW_NOT_LOADED);\n\t}\n\n\t/**\n\t * @access private\n\t * @description Safely close an opened window\n\t * @param {Window} window Window object\n\t * @returns {void}\n\t */\n\tcloseWindow(window) {\n\t\tif (window && !window.closed && window.close) {\n\t\t\twindow.close();\n\t\t}\n\t}\n\n\t/**\n\t * @access private\n\t * @description Focus current popup\n\t * @param {Window} window Window object\n\t * @returns {void}\n\t * @throws {\"Windows is opened\"}\n\t */\n\tfocusWindow(window) {\n\t\tif (window && window.focus) {\n\t\t\twindow.focus();\n\t\t\tthrow new Error(Errors.WINDOW_IS_OPENED);\n\t\t}\n\t\telse {\n\t\t\tthrow new Error(Errors.INVALID_WINDOW);\n\t\t}\n\t}\n}\n\nmodule.exports = MyAlgoConnect;\n"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAgBC,OAAO,CAAC,eAAD,CAA7B;;AACA,MAAM;EAAEC,KAAF;EAASC;AAAT,IAAwBF,OAAO,CAAC,eAAD,CAArC;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,gBAAD,CAAtB;;AAEA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,uBAAD,CAAzB;AAEA;AACA;AACA;;;AACA,IAAIK,MAAM,GAAG,IAAbaAAN,CAAoB;EAEnB;AACD;AACA;AACA;EACCC,WAAW,CAACC,OAAD,EAAU;IAEpB,IAAI,CAACH,MAAL,EAAa;MACZA,MAAM,GAAG,IAAID,SAAJ,EAAT;IACA;IAED;AACF;AACA;AACA;;;IACE,KAAKC,MAAL,GAAcA,MAAd;IAEA;AACF;AACA;AACA;;IACE,KAAKI,OAAL,GAAgBD,OAAO,IAAIA,OAAO,CAACC,OAAnB,GAA6BD,OAAO,CAACC,OAArC,GAA+C,OAA/D;IAEA;AACF;AACA;AACA;;IACE,KAAKC,GAAL,GAAYF,OAAO,IAAIA,OAAO,CAACG,SAAnB,GAA+BH,OAAO,CAACG,SAAvC,GAAmD,kCAA/D;IAEA,IAAI,KAAKD,GAAL,CAASE,QAAT,CAAkB,GAAlB,CAAJ,EACC,KAAKF,GAAL,GAAW,KAAKA,GAAL,CAASG,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;IAED;AACF;AACA;AACA;AACA;;IACE,KAAKC,mBAAL,GAA2B,IAA3B;IAEA;AACF;AACA;AACA;AACA;;IACE,KAAKC,kBAAL,GAA0B,IAA1B;IAEA;AACF;AACA;AACA;AACA;;IACE,KAAKC,wBAAL,GAAgC,IAAhC;IAEA;AACF;AACA;AACA;AACA;;IACE,KAAKC,oBAAL,GAA4B,IAA5B;IAEA;AACF;AACA;AACA;AACA;;IACG,KAAKC,qBAAL,GAA6B,IAA7B;IAED;AACF;AACA;AACA;AACA;;IACE,KAAKV,OAAL,GAAe;MAAEW,YAAY,EAAE,IAAhB;MAAsBV,OAAO,EAAE,KAAKA;IAApC,CAAf;IAEA;AACF;AACA;AACA;AACA;;IACE,KAAKW,iBAAL,GAA0BZ,OAAO,IAAIA,OAAO,CAACY,iBAApB,GAAyCZ,OAAO,CAACY,iBAAjD,GAAqE,KAA9F;EACA;EAED;AACD;AACA;AACA;AACA;AACA;AACA;;;EACc,MAAPC,OAAO,GAAmE;IAAA,IAAlEC,QAAkE,uEAAvD;MAAEC,sBAAsB,EAAE,KAA1B;MAAiCC,WAAW,EAAE;IAA9C,CAAuD;;IAE/E,IAAI,KAAKV,mBAAT,EAA8B;MAC7B,IAAI,KAAKA,mBAAL,CAAyBW,MAA7B,EAAqC;QACpC,KAAKX,mBAAL,GAA2B,IAA3B;MACA,CAFD,MAGK;QACJ,KAAKY,WAAL,CAAiB,KAAKZ,mBAAtB;MACA;IACD;;IAED,IAAI;MACH,KAAKA,mBAAL,GAA2Bf,SAAS,CAAC,KAAKW,GAAL,GAAW,eAAZ,CAApC;MAEA,MAAM,KAAKiB,mBAAL,CAAyB,KAAKb,mBAA9B,CAAN;MAEA,MAAMc,GAAG,GAAG,MAAM,KAAKvB,MAAL,CAAYwB,WAAZ,CACjB,KAAKf,mBADY,EAEjB;QAAEgB,MAAM,EAAE,QAAV;QAAoBC,MAAM,EAAEC,MAAM,CAACC,MAAP,CAAcX,QAAd,EAAwB;UAAEF,iBAAiB,EAAE,KAAKA;QAA1B,CAAxB;MAA5B,CAFiB,EAGjB,KAAKV,GAHY,EAGP,KAAKF,OAHE,CAAlB;MAMA,KAAK0B,WAAL,CAAiB,KAAKpB,mBAAtB;MACA,KAAKA,mBAAL,GAA2B,IAA3B;MAEA,IAAIc,GAAG,CAACO,MAAJ,KAAe,OAAnB,EACC,MAAM,IAAIC,KAAJ,CAAUR,GAAG,CAACS,OAAd,CAAN;MAED,OAAOT,GAAG,CAACU,IAAJ,CAASC,QAAhB;IACA,CAlBD,CAmBA,OAAOC,GAAP,EAAY;MACX,KAAKN,WAAL,CAAiB,KAAKpB,mBAAtB;MACA,KAAKA,mBAAL,GAA2B,IAA3B;MACA,MAAM0B,GAAN;IACA;EACD;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACsB,MAAfC,eAAe,CAACC,WAAD,EAAcC,WAAd,EAA2B;IAC/C,IAAIC,GAAJ;;IAEA,IAAI,KAAK7B,kBAAT,EAA6B;MAC5B,IAAI,KAAKA,kBAAL,CAAwBU,MAA5B,EAAoC;QACnC,KAAKV,kBAAL,GAA0B,IAA1B;MACA,CAFD,MAGK;QACJ,KAAKW,WAAL,CAAiB,KAAKX,kBAAtB;MACA;IACD;;IAED,IAAI8B,KAAK,CAACC,OAAN,CAAcJ,WAAd,CAAJ,EACCE,GAAG,GAAGC,KAAK,CAACE,IAAN,CAAWL,WAAX,EAAwBM,GAAxB,CAA4BC,EAAE,IAAI/C,UAAU,CAAC+C,EAAD,CAA5C,CAAN,CADD,KAGCL,GAAG,GAAG1C,UAAU,CAACwC,WAAD,CAAhB;;IAED,IAAI;MACH,KAAK3B,kBAAL,GAA0BhB,SAAS,CAAC,KAAKW,GAAL,GAAW,cAAZ,CAAnC;MAEA,MAAM,KAAKiB,mBAAL,CAAyB,KAAKZ,kBAA9B,CAAN,CAHG,CAKH;;MACA,MAAMa,GAAG,GAAG,MAAM,KAAKvB,MAAL,CAAYwB,WAAZ,CACjB,KAAKd,kBADY,EACQ;QACxBe,MAAM,EAAE,aADgB;QAExBC,MAAM,EAAE;UAAEa,GAAF;UAAOtB,QAAQ,EAAE;YAAEF,iBAAiB,EAAE,KAAKA;UAA1B,CAAjB;UAAgEZ,OAAO,EAAEmC;QAAzE;MAFgB,CADR,EAKjB,KAAKjC,GALY,EAKP,KAAKF,OALE,CAAlB;MAQA,KAAK0B,WAAL,CAAiB,KAAKnB,kBAAtB;MACA,KAAKA,kBAAL,GAA0B,IAA1B;MAEA,IAAIa,GAAG,CAACO,MAAJ,KAAe,OAAnB,EACC,MAAM,IAAIC,KAAJ,CAAUR,GAAG,CAACS,OAAd,CAAN;;MAED,IAAIQ,KAAK,CAACC,OAAN,CAAclB,GAAG,CAACU,IAAlB,CAAJ,EAA6B;QAC5B,MAAMY,MAAM,GAAG,EAAf;;QACA,KAAK,MAAMC,CAAX,IAAgBvB,GAAG,CAACU,IAApB,EAA0B;UACzBa,CAAC,CAACC,IAAF,GAAS,IAAIC,UAAJ,CAAeC,MAAM,CAACP,IAAP,CAAYI,CAAC,CAACC,IAAd,EAAoB,KAApB,CAAf,CAAT;UACAF,MAAM,CAACK,IAAP,CAAYJ,CAAZ;QACA;;QACD,OAAOD,MAAP;MACA;;MAEDtB,GAAG,CAACU,IAAJ,CAASc,IAAT,GAAgB,IAAIC,UAAJ,CAAeC,MAAM,CAACP,IAAP,CAAYnB,GAAG,CAACU,IAAJ,CAASc,IAArB,EAA2B,KAA3B,CAAf,CAAhB;MAEA,OAAOxB,GAAG,CAACU,IAAX;IACA,CAhCD,CAiCA,OAAOE,GAAP,EAAY;MACX,KAAKN,WAAL,CAAiB,KAAKnB,kBAAtB;MACA,KAAKA,kBAAL,GAA0B,IAA1B;MACA,MAAMyB,GAAN;IACA;EACD;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;EACmB,MAAZgB,YAAY,CAACC,KAAD,EAAQC,OAAR,EAAiB;IAElC,IAAI,KAAK1C,wBAAT,EAAmC;MAClC,IAAI,KAAKA,wBAAL,CAA8BS,MAAlC,EAA0C;QACzC,KAAKT,wBAAL,GAAgC,IAAhC;MACA,CAFD,MAGK;QACJ,KAAKU,WAAL,CAAiB,KAAKV,wBAAtB;MACA;IACD;;IAED,IAAI;MACH,KAAKA,wBAAL,GAAgCjB,SAAS,CAAC,KAAKW,GAAL,GAAW,kBAAZ,CAAzC;MACA,MAAM,KAAKiB,mBAAL,CAAyB,KAAKX,wBAA9B,CAAN,CAFG,CAIH;;MACA,IAAI2C,aAAa,GAAGF,KAApB;MACA,IAAIA,KAAK,CAAClD,WAAN,KAAsB8C,UAA1B,EACCM,aAAa,GAAGL,MAAM,CAACP,IAAP,CAAYU,KAAZ,EAAmBG,QAAnB,CAA4B,QAA5B,CAAhB;MACD,MAAMhC,GAAG,GAAG,MAAM,KAAKvB,MAAL,CAAYwB,WAAZ,CACjB,KAAKb,wBADY,EAEjB;QAAEc,MAAM,EAAE,UAAV;QAAsBC,MAAM,EAAE;UAAE0B,KAAK,EAAEE,aAAT;UAAwBD;QAAxB;MAA9B,CAFiB,EAGjB,KAAKhD,GAHY,EAGP,KAAKF,OAHE,CAAlB;MAMA,KAAK0B,WAAL,CAAiB,KAAKlB,wBAAtB;MACA,KAAKA,wBAAL,GAAgC,IAAhC;MAEA,IAAIY,GAAG,CAACO,MAAJ,KAAe,OAAnB,EACC,MAAM,IAAIC,KAAJ,CAAUR,GAAG,CAACS,OAAd,CAAN;MAED,OAAO,IAAIgB,UAAJ,CAAeC,MAAM,CAACP,IAAP,CAAYnB,GAAG,CAACU,IAAJ,CAASuB,UAArB,EAAiC,QAAjC,CAAf,CAAP;IACA,CArBD,CAsBA,OAAOrB,GAAP,EAAY;MACX,KAAKN,WAAL,CAAiB,KAAKlB,wBAAtB;MACA,KAAKA,wBAAL,GAAgC,IAAhC;MACA,MAAMwB,GAAN;IACA;EACD;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACe,MAARsB,QAAQ,CAACxB,IAAD,EAAOyB,eAAP,EAAwBL,OAAxB,EAAiC;IAE9C,IAAI,KAAKzC,oBAAT,EAA+B;MAC9B,IAAI,KAAKA,oBAAL,CAA0BQ,MAA9B,EAAsC;QACrC,KAAKR,oBAAL,GAA4B,IAA5B;MACA,CAFD,MAGK;QACJ,KAAKS,WAAL,CAAiB,KAAKT,oBAAtB;MACA;IACD;;IAED,IAAI;MACH,KAAKA,oBAAL,GAA4BlB,SAAS,CAAC,KAAKW,GAAL,GAAW,gBAAZ,CAArC;MACA,MAAM,KAAKiB,mBAAL,CAAyB,KAAKV,oBAA9B,CAAN,CAFG,CAIH;;MACA,IAAI+C,YAAY,GAAG1B,IAAnB;MACA,IAAIA,IAAI,CAAC/B,WAAL,KAAqB8C,UAAzB,EACCW,YAAY,GAAGV,MAAM,CAACP,IAAP,CAAYT,IAAZ,EAAkBsB,QAAlB,CAA2B,QAA3B,CAAf;MAED,MAAMhC,GAAG,GAAG,MAAM,KAAKvB,MAAL,CAAYwB,WAAZ,CACjB,KAAKZ,oBADY,EAEjB;QAAEa,MAAM,EAAE,UAAV;QAAsBC,MAAM,EAAE;UAAEO,IAAI,EAAE0B,YAAR;UAAsBD,eAAe,EAAEA,eAAvC;UAAwDL;QAAxD;MAA9B,CAFiB,EAGjB,KAAKhD,GAHY,EAGP,KAAKF,OAHE,CAAlB;MAMA,KAAK0B,WAAL,CAAiB,KAAKjB,oBAAtB;MACA,KAAKA,oBAAL,GAA4B,IAA5B;MAEA,IAAIW,GAAG,CAACO,MAAJ,KAAe,OAAnB,EACC,MAAM,IAAIC,KAAJ,CAAUR,GAAG,CAACS,OAAd,CAAN;MAED,OAAO,IAAIgB,UAAJ,CAAeC,MAAM,CAACP,IAAP,CAAYnB,GAAG,CAACU,IAAJ,CAAS2B,SAArB,EAAgC,QAAhC,CAAf,CAAP;IACA,CAtBD,CAuBA,OAAOzB,GAAP,EAAY;MACX,KAAKN,WAAL,CAAiB,KAAKjB,oBAAtB;MACA,KAAKA,oBAAL,GAA4B,IAA5B;MACA,MAAMuB,GAAN;IACA;EACD;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;EACiB,MAAT0B,SAAS,CAACC,KAAD,EAAQT,OAAR,EAAiB;IAChC,IAAI,KAAKxC,qBAAT,EAAgC;MAC/B,IAAI,KAAKA,qBAAL,CAA2BO,MAA/B,EAAuC;QACtC,KAAKP,qBAAL,GAA6B,IAA7B;MACA,CAFD,MAGK;QACJ,KAAKQ,WAAL,CAAiB,KAAKR,qBAAtB;MACA;IACD;;IAED,IAAI;MACH,KAAKA,qBAAL,GAA6BnB,SAAS,CAAC,KAAKW,GAAL,GAAW,iBAAZ,CAAtC;MACA,MAAM,KAAKiB,mBAAL,CAAyB,KAAKT,qBAA9B,CAAN;MAEA,IAAIkD,eAAe,GAAGd,MAAM,CAACP,IAAP,CAAYoB,KAAZ,EAAmBP,QAAnB,CAA4B,QAA5B,CAAtB;MAEA,MAAMhC,GAAG,GAAG,MAAM,KAAKvB,MAAL,CAAYwB,WAAZ,CACjB,KAAKX,qBADY,EAEjB;QAAEY,MAAM,EAAE,WAAV;QAAuBC,MAAM,EAAE;UAAEO,IAAI,EAAE8B,eAAR;UAAyBV;QAAzB;MAA/B,CAFiB,EAGjB,KAAKhD,GAHY,EAGP,KAAKF,OAHE,CAAlB;MAMA,KAAK0B,WAAL,CAAiB,KAAKhB,qBAAtB;MACA,KAAKA,qBAAL,GAA6B,IAA7B;MAEA,IAAIU,GAAG,CAACO,MAAJ,KAAe,OAAnB,EACC,MAAM,IAAIC,KAAJ,CAAUR,GAAG,CAACS,OAAd,CAAN;MAED,OAAO,IAAIgB,UAAJ,CAAeC,MAAM,CAACP,IAAP,CAAYnB,GAAG,CAACU,IAAJ,CAAS2B,SAArB,EAAgC,QAAhC,CAAf,CAAP;IACA,CAnBD,CAoBA,OAAOzB,GAAP,EAAY;MACX,KAAKN,WAAL,CAAiB,KAAKhB,qBAAtB;MACA,KAAKA,qBAAL,GAA6B,IAA7B;MACA,MAAMsB,GAAN;IACA;EACD;EAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC0B,MAAnBb,mBAAmB,CAAC0C,YAAD,EAA6B;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IACrD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAApB,EAA6BC,CAAC,EAA9B,EAAkC;MACjC,MAAMtE,KAAK,CAAC,GAAD,CAAX;MACA,IAAI,CAACoE,YAAL,EAAmB;;MACnB,IAAI;QACH,MAAMzC,GAAG,GAAG,MAAMvB,MAAM,CAACwB,WAAP,CAAmBwC,YAAnB,EAAiC;UAAEvC,MAAM,EAAE;QAAV,CAAjC,EAAuD,KAAKpB,GAA5D,CAAlB;QACA,IAAIkB,GAAG,CAACO,MAAJ,IAAc,SAAlB,EACC;MACD,CAJD,CAKA,OAAOK,GAAP,EAAY,CACX;MACA;IACD;;IACD,MAAM,IAAIJ,KAAJ,CAAUjC,MAAM,CAACqE,iBAAjB,CAAN;EACA;EAED;AACD;AACA;AACA;AACA;AACA;;;EACCtC,WAAW,CAACuC,MAAD,EAAS;IACnB,IAAIA,MAAM,IAAI,CAACA,MAAM,CAAChD,MAAlB,IAA4BgD,MAAM,CAACC,KAAvC,EAA8C;MAC7CD,MAAM,CAACC,KAAP;IACA;EACD;EAED;AACD;AACA;AACA;AACA;AACA;AACA;;;EACChD,WAAW,CAAC+C,MAAD,EAAS;IACnB,IAAIA,MAAM,IAAIA,MAAM,CAACE,KAArB,EAA4B;MAC3BF,MAAM,CAACE,KAAP;MACA,MAAM,IAAIvC,KAAJ,CAAUjC,MAAM,CAACyE,gBAAjB,CAAN;IACA,CAHD,MAIK;MACJ,MAAM,IAAIxC,KAAJ,CAAUjC,MAAM,CAAC0E,cAAjB,CAAN;IACA;EACD;;AApYkB;;AAuYpBC,MAAM,CAACC,OAAP,GAAiBzE,aAAjB"},"metadata":{},"sourceType":"script"}