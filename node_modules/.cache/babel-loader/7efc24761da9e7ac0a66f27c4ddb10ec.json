{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nmodule.exports = class RuntimeChunkPlugin {\n  constructor(options) {\n    this.options = Object.assign({\n      name: entrypoint => `runtime~${entrypoint.name}`\n    }, options);\n  }\n\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"RuntimeChunkPlugin\", compilation => {\n      compilation.hooks.optimizeChunksAdvanced.tap(\"RuntimeChunkPlugin\", () => {\n        for (const entrypoint of compilation.entrypoints.values()) {\n          const chunk = entrypoint.getRuntimeChunk();\n          let name = this.options.name;\n\n          if (typeof name === \"function\") {\n            name = name(entrypoint);\n          }\n\n          if (chunk.getNumberOfModules() > 0 || !chunk.preventIntegration || chunk.name !== name) {\n            const newChunk = compilation.addChunk(name);\n            newChunk.preventIntegration = true;\n            entrypoint.unshiftChunk(newChunk);\n            newChunk.addGroup(entrypoint);\n            entrypoint.setRuntimeChunk(newChunk);\n          }\n        }\n      });\n    });\n  }\n\n};","map":{"version":3,"names":["module","exports","RuntimeChunkPlugin","constructor","options","Object","assign","name","entrypoint","apply","compiler","hooks","thisCompilation","tap","compilation","optimizeChunksAdvanced","entrypoints","values","chunk","getRuntimeChunk","getNumberOfModules","preventIntegration","newChunk","addChunk","unshiftChunk","addGroup","setRuntimeChunk"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/optimize/RuntimeChunkPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nmodule.exports = class RuntimeChunkPlugin {\n\tconstructor(options) {\n\t\tthis.options = Object.assign(\n\t\t\t{\n\t\t\t\tname: entrypoint => `runtime~${entrypoint.name}`\n\t\t\t},\n\t\t\toptions\n\t\t);\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\"RuntimeChunkPlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeChunksAdvanced.tap(\"RuntimeChunkPlugin\", () => {\n\t\t\t\tfor (const entrypoint of compilation.entrypoints.values()) {\n\t\t\t\t\tconst chunk = entrypoint.getRuntimeChunk();\n\t\t\t\t\tlet name = this.options.name;\n\t\t\t\t\tif (typeof name === \"function\") {\n\t\t\t\t\t\tname = name(entrypoint);\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tchunk.getNumberOfModules() > 0 ||\n\t\t\t\t\t\t!chunk.preventIntegration ||\n\t\t\t\t\t\tchunk.name !== name\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst newChunk = compilation.addChunk(name);\n\t\t\t\t\t\tnewChunk.preventIntegration = true;\n\t\t\t\t\t\tentrypoint.unshiftChunk(newChunk);\n\t\t\t\t\t\tnewChunk.addGroup(entrypoint);\n\t\t\t\t\t\tentrypoint.setRuntimeChunk(newChunk);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,kBAAN,CAAyB;EACzCC,WAAW,CAACC,OAAD,EAAU;IACpB,KAAKA,OAAL,GAAeC,MAAM,CAACC,MAAP,CACd;MACCC,IAAI,EAAEC,UAAU,IAAK,WAAUA,UAAU,CAACD,IAAK;IADhD,CADc,EAIdH,OAJc,CAAf;EAMA;;EAEDK,KAAK,CAACC,QAAD,EAAW;IACfA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CAAmC,oBAAnC,EAAyDC,WAAW,IAAI;MACvEA,WAAW,CAACH,KAAZ,CAAkBI,sBAAlB,CAAyCF,GAAzC,CAA6C,oBAA7C,EAAmE,MAAM;QACxE,KAAK,MAAML,UAAX,IAAyBM,WAAW,CAACE,WAAZ,CAAwBC,MAAxB,EAAzB,EAA2D;UAC1D,MAAMC,KAAK,GAAGV,UAAU,CAACW,eAAX,EAAd;UACA,IAAIZ,IAAI,GAAG,KAAKH,OAAL,CAAaG,IAAxB;;UACA,IAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;YAC/BA,IAAI,GAAGA,IAAI,CAACC,UAAD,CAAX;UACA;;UACD,IACCU,KAAK,CAACE,kBAAN,KAA6B,CAA7B,IACA,CAACF,KAAK,CAACG,kBADP,IAEAH,KAAK,CAACX,IAAN,KAAeA,IAHhB,EAIE;YACD,MAAMe,QAAQ,GAAGR,WAAW,CAACS,QAAZ,CAAqBhB,IAArB,CAAjB;YACAe,QAAQ,CAACD,kBAAT,GAA8B,IAA9B;YACAb,UAAU,CAACgB,YAAX,CAAwBF,QAAxB;YACAA,QAAQ,CAACG,QAAT,CAAkBjB,UAAlB;YACAA,UAAU,CAACkB,eAAX,CAA2BJ,QAA3B;UACA;QACD;MACD,CAnBD;IAoBA,CArBD;EAsBA;;AAjCwC,CAA1C"},"metadata":{},"sourceType":"script"}