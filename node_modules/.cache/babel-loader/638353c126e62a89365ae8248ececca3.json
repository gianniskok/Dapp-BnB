{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst itPeekable = require('it-peekable');\n\nconst browserStreamToIt = require('browser-readablestream-to-it');\n\nconst all = require('it-all');\n\nconst {\n  isBytes,\n  isBlob,\n  isReadableStream\n} = require('./utils');\n/**\n * @param {import('./normalise-input').ToContent} input\n */\n\n\nasync function toBlob(input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input]);\n  } // String\n\n\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()]);\n  } // Blob | File\n\n\n  if (isBlob(input)) {\n    return input;\n  } // Browser stream\n\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  } // (Async)Iterator<?>\n\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input);\n    /** @type {any} value **/\n\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable);\n    }\n\n    peekable.push(value); // (Async)Iterable<Number>\n\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))]);\n    } // (Async)Iterable<Bytes|String>\n\n\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable);\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n}\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\n\n\nasync function itToBlob(stream) {\n  const parts = [];\n\n  for await (const chunk of stream) {\n    parts.push(chunk);\n  }\n\n  return new Blob(parts);\n}\n\nmodule.exports = toBlob;","map":{"version":3,"names":["errCode","require","itPeekable","browserStreamToIt","all","isBytes","isBlob","isReadableStream","toBlob","input","Blob","String","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","itToBlob","push","Number","isInteger","Uint8Array","from","Error","stream","parts","chunk","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-core-utils/src/files/normalise-input/normalise-content.browser.js"],"sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst itPeekable = require('it-peekable')\nconst browserStreamToIt = require('browser-readablestream-to-it')\nconst all = require('it-all')\n\nconst {\n  isBytes,\n  isBlob,\n  isReadableStream\n} = require('./utils')\n\n/**\n * @param {import('./normalise-input').ToContent} input\n */\nasync function toBlob (input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input])\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()])\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable)\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))])\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nasync function itToBlob (stream) {\n  const parts = []\n\n  for await (const chunk of stream) {\n    parts.push(chunk)\n  }\n\n  return new Blob(parts)\n}\n\nmodule.exports = toBlob\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,8BAAD,CAAjC;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,QAAD,CAAnB;;AAEA,MAAM;EACJI,OADI;EAEJC,MAFI;EAGJC;AAHI,IAIFN,OAAO,CAAC,SAAD,CAJX;AAMA;AACA;AACA;;;AACA,eAAeO,MAAf,CAAuBC,KAAvB,EAA8B;EAC5B;EACA,IAAIJ,OAAO,CAACI,KAAD,CAAX,EAAoB;IAClB,OAAO,IAAIC,IAAJ,CAAS,CAACD,KAAD,CAAT,CAAP;EACD,CAJ2B,CAM5B;;;EACA,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYE,MAAlD,EAA0D;IACxD,OAAO,IAAID,IAAJ,CAAS,CAACD,KAAK,CAACG,QAAN,EAAD,CAAT,CAAP;EACD,CAT2B,CAW5B;;;EACA,IAAIN,MAAM,CAACG,KAAD,CAAV,EAAmB;IACjB,OAAOA,KAAP;EACD,CAd2B,CAgB5B;;;EACA,IAAIF,gBAAgB,CAACE,KAAD,CAApB,EAA6B;IAC3BA,KAAK,GAAGN,iBAAiB,CAACM,KAAD,CAAzB;EACD,CAnB2B,CAqB5B;;;EACA,IAAII,MAAM,CAACC,QAAP,IAAmBL,KAAnB,IAA4BI,MAAM,CAACE,aAAP,IAAwBN,KAAxD,EAA+D;IAC7D;IACA,MAAMO,QAAQ,GAAGd,UAAU,CAACO,KAAD,CAA3B;IAEA;;IACA,MAAM;MAAEQ,KAAF;MAASC;IAAT,IAAkB,MAAMF,QAAQ,CAACG,IAAT,EAA9B;;IAEA,IAAID,IAAJ,EAAU;MACR;MACA,OAAOE,QAAQ,CAACJ,QAAD,CAAf;IACD;;IAEDA,QAAQ,CAACK,IAAT,CAAcJ,KAAd,EAZ6D,CAc7D;;IACA,IAAIK,MAAM,CAACC,SAAP,CAAiBN,KAAjB,CAAJ,EAA6B;MAC3B,OAAO,IAAIP,IAAJ,CAAS,CAACc,UAAU,CAACC,IAAX,CAAgB,MAAMrB,GAAG,CAACY,QAAD,CAAzB,CAAD,CAAT,CAAP;IACD,CAjB4D,CAmB7D;;;IACA,IAAIX,OAAO,CAACY,KAAD,CAAP,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+CA,KAAK,YAAYN,MAApE,EAA4E;MAC1E,OAAOS,QAAQ,CAACJ,QAAD,CAAf;IACD;EACF;;EAED,MAAMhB,OAAO,CAAC,IAAI0B,KAAJ,CAAW,qBAAoBjB,KAAM,EAArC,CAAD,EAA0C,sBAA1C,CAAb;AACD;AAED;AACA;AACA;;;AACA,eAAeW,QAAf,CAAyBO,MAAzB,EAAiC;EAC/B,MAAMC,KAAK,GAAG,EAAd;;EAEA,WAAW,MAAMC,KAAjB,IAA0BF,MAA1B,EAAkC;IAChCC,KAAK,CAACP,IAAN,CAAWQ,KAAX;EACD;;EAED,OAAO,IAAInB,IAAJ,CAASkB,KAAT,CAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBvB,MAAjB"},"metadata":{},"sourceType":"script"}