{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = async function (key, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n\n    const params = { ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    });\n    await res.text();\n  };\n\n  return set;\n});\n/**\n * @param {*} key\n * @param {*} value\n */\n\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":{"version":3,"names":["configure","require","toUrlSearchParams","module","exports","api","set","key","value","options","Error","params","encodeParam","res","post","signal","searchParams","headers","text","arg","toString","bool","JSON","stringify","json"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/config/set.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return set\n})\n\n/**\n * @param {*} key\n * @param {*} value\n */\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;EAChC;AACF;AACA;EACE,MAAMC,GAAG,GAAG,gBAAOC,GAAP,EAAYC,KAAZ,EAAoC;IAAA,IAAjBC,OAAiB,uEAAP,EAAO;;IAC9C,IAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;MAC3B,MAAM,IAAIG,KAAJ,CAAU,kBAAV,CAAN;IACD;;IAED,MAAMC,MAAM,GAAG,EACb,GAAGF,OADU;MAEb,GAAGG,WAAW,CAACL,GAAD,EAAMC,KAAN;IAFD,CAAf;IAKA,MAAMK,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,QAAT,EAAmB;MACnCC,MAAM,EAAEN,OAAO,CAACM,MADmB;MAEnCC,YAAY,EAAEd,iBAAiB,CAACS,MAAD,CAFI;MAGnCM,OAAO,EAAER,OAAO,CAACQ;IAHkB,CAAnB,CAAlB;IAMA,MAAMJ,GAAG,CAACK,IAAJ,EAAN;EACD,CAjBD;;EAmBA,OAAOZ,GAAP;AACD,CAxByB,CAA1B;AA0BA;AACA;AACA;AACA;;AACA,MAAMM,WAAW,GAAG,CAACL,GAAD,EAAMC,KAAN,KAAgB;EAClC,QAAQ,OAAOA,KAAf;IACE,KAAK,SAAL;MACE,OAAO;QAAEW,GAAG,EAAE,CAACZ,GAAD,EAAMC,KAAK,CAACY,QAAN,EAAN,CAAP;QAAgCC,IAAI,EAAE;MAAtC,CAAP;;IACF,KAAK,QAAL;MACE,OAAO;QAAEF,GAAG,EAAE,CAACZ,GAAD,EAAMC,KAAN;MAAP,CAAP;;IACF;MACE,OAAO;QAAEW,GAAG,EAAE,CAACZ,GAAD,EAAMe,IAAI,CAACC,SAAL,CAAef,KAAf,CAAN,CAAP;QAAqCgB,IAAI,EAAE;MAA3C,CAAP;EANJ;AAQD,CATD"},"metadata":{},"sourceType":"script"}