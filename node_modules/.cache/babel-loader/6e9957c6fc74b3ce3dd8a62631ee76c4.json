{"ast":null,"code":"'use strict';\n\nconst callId = require('./id');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\n\n\nmodule.exports = options => {\n  const id = callId(options);\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n\n  async function isOnline() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await id(options);\n    return Boolean(res && res.addresses && res.addresses.length);\n  }\n\n  return isOnline;\n};","map":{"version":3,"names":["callId","require","module","exports","options","id","isOnline","res","Boolean","addresses","length"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/is-online.js"],"sourcesContent":["'use strict'\n\nconst callId = require('./id')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nmodule.exports = options => {\n  const id = callId(options)\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  async function isOnline (options = {}) {\n    const res = await id(options)\n\n    return Boolean(res && res.addresses && res.addresses.length)\n  }\n  return isOnline\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAtB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiBC,OAAO,IAAI;EAC1B,MAAMC,EAAE,GAAGL,MAAM,CAACI,OAAD,CAAjB;EAEA;AACF;AACA;;EACE,eAAeE,QAAf,GAAuC;IAAA,IAAdF,OAAc,uEAAJ,EAAI;IACrC,MAAMG,GAAG,GAAG,MAAMF,EAAE,CAACD,OAAD,CAApB;IAEA,OAAOI,OAAO,CAACD,GAAG,IAAIA,GAAG,CAACE,SAAX,IAAwBF,GAAG,CAACE,SAAJ,CAAcC,MAAvC,CAAd;EACD;;EACD,OAAOJ,QAAP;AACD,CAZD"},"metadata":{},"sourceType":"script"}