{"ast":null,"code":"function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nimport { CompileError } from \"@webassemblyjs/helper-api-error\";\nimport * as ieee754 from \"@webassemblyjs/ieee754\";\nimport * as utf8 from \"@webassemblyjs/utf8\";\nimport * as t from \"@webassemblyjs/ast\";\nimport { decodeInt32, decodeUInt32, MAX_NUMBER_OF_BYTE_U32, decodeInt64, decodeUInt64, MAX_NUMBER_OF_BYTE_U64 } from \"@webassemblyjs/leb128\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\n\nfunction toHex(n) {\n  return \"0x\" + Number(n).toString(16);\n}\n\nfunction byteArrayEq(l, r) {\n  if (l.length !== r.length) {\n    return false;\n  }\n\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] !== r[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function decode(ab, opts) {\n  var buf = new Uint8Array(ab);\n  var getUniqueName = t.getUniqueNameGenerator();\n  var offset = 0;\n\n  function getPosition() {\n    return {\n      line: -1,\n      column: offset\n    };\n  }\n\n  function dump(b, msg) {\n    if (opts.dump === false) return;\n    var pad = \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\";\n    var str = \"\";\n\n    if (b.length < 5) {\n      str = b.map(toHex).join(\" \");\n    } else {\n      str = \"...\";\n    }\n\n    console.log(toHex(offset) + \":\\t\", str, pad, \";\", msg);\n  }\n\n  function dumpSep(msg) {\n    if (opts.dump === false) return;\n    console.log(\";\", msg);\n  }\n  /**\n   * TODO(sven): we can atually use a same structure\n   * we are adding incrementally new features\n   */\n\n\n  var state = {\n    elementsInFuncSection: [],\n    elementsInExportSection: [],\n    elementsInCodeSection: [],\n\n    /**\n     * Decode memory from:\n     * - Memory section\n     */\n    memoriesInModule: [],\n\n    /**\n     * Decoded types from:\n     * - Type section\n     */\n    typesInModule: [],\n\n    /**\n     * Decoded functions from:\n     * - Function section\n     * - Import section\n     */\n    functionsInModule: [],\n\n    /**\n     * Decoded tables from:\n     * - Table section\n     */\n    tablesInModule: [],\n\n    /**\n     * Decoded globals from:\n     * - Global section\n     */\n    globalsInModule: []\n  };\n\n  function isEOF() {\n    return offset >= buf.length;\n  }\n\n  function eatBytes(n) {\n    offset = offset + n;\n  }\n\n  function readBytesAtOffset(_offset, numberOfBytes) {\n    var arr = [];\n\n    for (var i = 0; i < numberOfBytes; i++) {\n      arr.push(buf[_offset + i]);\n    }\n\n    return arr;\n  }\n\n  function readBytes(numberOfBytes) {\n    return readBytesAtOffset(offset, numberOfBytes);\n  }\n\n  function readF64() {\n    var bytes = readBytes(ieee754.NUMBER_OF_BYTE_F64);\n    var value = ieee754.decodeF64(bytes);\n\n    if (Math.sign(value) * value === Infinity) {\n      return {\n        value: Math.sign(value),\n        inf: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F64\n      };\n    }\n\n    if (isNaN(value)) {\n      var sign = bytes[bytes.length - 1] >> 7 ? -1 : 1;\n      var mantissa = 0;\n\n      for (var i = 0; i < bytes.length - 2; ++i) {\n        mantissa += bytes[i] * Math.pow(256, i);\n      }\n\n      mantissa += bytes[bytes.length - 2] % 16 * Math.pow(256, bytes.length - 2);\n      return {\n        value: sign * mantissa,\n        nan: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F64\n      };\n    }\n\n    return {\n      value: value,\n      nextIndex: ieee754.NUMBER_OF_BYTE_F64\n    };\n  }\n\n  function readF32() {\n    var bytes = readBytes(ieee754.NUMBER_OF_BYTE_F32);\n    var value = ieee754.decodeF32(bytes);\n\n    if (Math.sign(value) * value === Infinity) {\n      return {\n        value: Math.sign(value),\n        inf: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F32\n      };\n    }\n\n    if (isNaN(value)) {\n      var sign = bytes[bytes.length - 1] >> 7 ? -1 : 1;\n      var mantissa = 0;\n\n      for (var i = 0; i < bytes.length - 2; ++i) {\n        mantissa += bytes[i] * Math.pow(256, i);\n      }\n\n      mantissa += bytes[bytes.length - 2] % 128 * Math.pow(256, bytes.length - 2);\n      return {\n        value: sign * mantissa,\n        nan: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F32\n      };\n    }\n\n    return {\n      value: value,\n      nextIndex: ieee754.NUMBER_OF_BYTE_F32\n    };\n  }\n\n  function readUTF8String() {\n    var lenu32 = readU32(); // Don't eat any bytes. Instead, peek ahead of the current offset using\n    // readBytesAtOffset below. This keeps readUTF8String neutral with respect\n    // to the current offset, just like the other readX functions.\n\n    var strlen = lenu32.value;\n    dump([strlen], \"string length\");\n    var bytes = readBytesAtOffset(offset + lenu32.nextIndex, strlen);\n    var value = utf8.decode(bytes);\n    return {\n      value: value,\n      nextIndex: strlen + lenu32.nextIndex\n    };\n  }\n  /**\n   * Decode an unsigned 32bits integer\n   *\n   * The length will be handled by the leb librairy, we pass the max number of\n   * byte.\n   */\n\n\n  function readU32() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U32);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n\n  function readVaruint32() {\n    // where 32 bits = max 4 bytes\n    var bytes = readBytes(4);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n\n  function readVaruint7() {\n    // where 7 bits = max 1 bytes\n    var bytes = readBytes(1);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n  /**\n   * Decode a signed 32bits interger\n   */\n\n\n  function read32() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U32);\n    var buffer = Buffer.from(bytes);\n    return decodeInt32(buffer);\n  }\n  /**\n   * Decode a signed 64bits integer\n   */\n\n\n  function read64() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U64);\n    var buffer = Buffer.from(bytes);\n    return decodeInt64(buffer);\n  }\n\n  function readU64() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U64);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt64(buffer);\n  }\n\n  function readByte() {\n    return readBytes(1)[0];\n  }\n\n  function parseModuleHeader() {\n    if (isEOF() === true || offset + 4 > buf.length) {\n      throw new Error(\"unexpected end\");\n    }\n\n    var header = readBytes(4);\n\n    if (byteArrayEq(constants.magicModuleHeader, header) === false) {\n      throw new CompileError(\"magic header not detected\");\n    }\n\n    dump(header, \"wasm magic header\");\n    eatBytes(4);\n  }\n\n  function parseVersion() {\n    if (isEOF() === true || offset + 4 > buf.length) {\n      throw new Error(\"unexpected end\");\n    }\n\n    var version = readBytes(4);\n\n    if (byteArrayEq(constants.moduleVersion, version) === false) {\n      throw new CompileError(\"unknown binary version\");\n    }\n\n    dump(version, \"wasm version\");\n    eatBytes(4);\n  }\n\n  function parseVec(cast) {\n    var u32 = readU32();\n    var length = u32.value;\n    eatBytes(u32.nextIndex);\n    dump([length], \"number\");\n\n    if (length === 0) {\n      return [];\n    }\n\n    var elements = [];\n\n    for (var i = 0; i < length; i++) {\n      var byte = readByte();\n      eatBytes(1);\n      var value = cast(byte);\n      dump([byte], value);\n\n      if (typeof value === \"undefined\") {\n        throw new CompileError(\"Internal failure: parseVec could not cast the value\");\n      }\n\n      elements.push(value);\n    }\n\n    return elements;\n  } // Type section\n  // https://webassembly.github.io/spec/binary/modules.html#binary-typesec\n\n\n  function parseTypeSection(numberOfTypes) {\n    var typeInstructionNodes = [];\n    dump([numberOfTypes], \"num types\");\n\n    for (var i = 0; i < numberOfTypes; i++) {\n      var _startLoc = getPosition();\n\n      dumpSep(\"type \" + i);\n      var type = readByte();\n      eatBytes(1);\n\n      if (type == constants.types.func) {\n        dump([type], \"func\");\n        var paramValtypes = parseVec(function (b) {\n          return constants.valtypes[b];\n        });\n        var params = paramValtypes.map(function (v) {\n          return t.funcParam(\n          /*valtype*/\n          v);\n        });\n        var result = parseVec(function (b) {\n          return constants.valtypes[b];\n        });\n        typeInstructionNodes.push(function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.typeInstruction(undefined, t.signature(params, result)), endLoc, _startLoc);\n        }());\n        state.typesInModule.push({\n          params: params,\n          result: result\n        });\n      } else {\n        throw new Error(\"Unsupported type: \" + toHex(type));\n      }\n    }\n\n    return typeInstructionNodes;\n  } // Import section\n  // https://webassembly.github.io/spec/binary/modules.html#binary-importsec\n\n\n  function parseImportSection(numberOfImports) {\n    var imports = [];\n\n    for (var i = 0; i < numberOfImports; i++) {\n      dumpSep(\"import header \" + i);\n\n      var _startLoc2 = getPosition();\n      /**\n       * Module name\n       */\n\n\n      var moduleName = readUTF8String();\n      eatBytes(moduleName.nextIndex);\n      dump([], \"module name (\".concat(moduleName.value, \")\"));\n      /**\n       * Name\n       */\n\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      dump([], \"name (\".concat(name.value, \")\"));\n      /**\n       * Import descr\n       */\n\n      var descrTypeByte = readByte();\n      eatBytes(1);\n      var descrType = constants.importTypes[descrTypeByte];\n      dump([descrTypeByte], \"import kind\");\n\n      if (typeof descrType === \"undefined\") {\n        throw new CompileError(\"Unknown import description type: \" + toHex(descrTypeByte));\n      }\n\n      var importDescr = void 0;\n\n      if (descrType === \"func\") {\n        var indexU32 = readU32();\n        var typeindex = indexU32.value;\n        eatBytes(indexU32.nextIndex);\n        dump([typeindex], \"type index\");\n        var signature = state.typesInModule[typeindex];\n\n        if (typeof signature === \"undefined\") {\n          throw new CompileError(\"function signature not found (\".concat(typeindex, \")\"));\n        }\n\n        var id = getUniqueName(\"func\");\n        importDescr = t.funcImportDescr(id, t.signature(signature.params, signature.result));\n        state.functionsInModule.push({\n          id: t.identifier(name.value),\n          signature: signature,\n          isExternal: true\n        });\n      } else if (descrType === \"global\") {\n        importDescr = parseGlobalType();\n        var globalNode = t.global(importDescr, []);\n        state.globalsInModule.push(globalNode);\n      } else if (descrType === \"table\") {\n        importDescr = parseTableType(i);\n      } else if (descrType === \"mem\") {\n        var memoryNode = parseMemoryType(0);\n        state.memoriesInModule.push(memoryNode);\n        importDescr = memoryNode;\n      } else {\n        throw new CompileError(\"Unsupported import of type: \" + descrType);\n      }\n\n      imports.push(function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.moduleImport(moduleName.value, name.value, importDescr), endLoc, _startLoc2);\n      }());\n    }\n\n    return imports;\n  } // Function section\n  // https://webassembly.github.io/spec/binary/modules.html#function-section\n\n\n  function parseFuncSection(numberOfFunctions) {\n    dump([numberOfFunctions], \"num funcs\");\n\n    for (var i = 0; i < numberOfFunctions; i++) {\n      var indexU32 = readU32();\n      var typeindex = indexU32.value;\n      eatBytes(indexU32.nextIndex);\n      dump([typeindex], \"type index\");\n      var signature = state.typesInModule[typeindex];\n\n      if (typeof signature === \"undefined\") {\n        throw new CompileError(\"function signature not found (\".concat(typeindex, \")\"));\n      } // preserve anonymous, a name might be resolved later\n\n\n      var id = t.withRaw(t.identifier(getUniqueName(\"func\")), \"\");\n      state.functionsInModule.push({\n        id: id,\n        signature: signature,\n        isExternal: false\n      });\n    }\n  } // Export section\n  // https://webassembly.github.io/spec/binary/modules.html#export-section\n\n\n  function parseExportSection(numberOfExport) {\n    dump([numberOfExport], \"num exports\"); // Parse vector of exports\n\n    for (var i = 0; i < numberOfExport; i++) {\n      var _startLoc3 = getPosition();\n      /**\n       * Name\n       */\n\n\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      dump([], \"export name (\".concat(name.value, \")\"));\n      /**\n       * exportdescr\n       */\n\n      var typeIndex = readByte();\n      eatBytes(1);\n      dump([typeIndex], \"export kind\");\n      var indexu32 = readU32();\n      var index = indexu32.value;\n      eatBytes(indexu32.nextIndex);\n      dump([index], \"export index\");\n      var id = void 0,\n          signature = void 0;\n\n      if (constants.exportTypes[typeIndex] === \"Func\") {\n        var func = state.functionsInModule[index];\n\n        if (typeof func === \"undefined\") {\n          throw new CompileError(\"unknown function (\".concat(index, \")\"));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = func.signature;\n      } else if (constants.exportTypes[typeIndex] === \"Table\") {\n        var table = state.tablesInModule[index];\n\n        if (typeof table === \"undefined\") {\n          throw new CompileError(\"unknown table \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else if (constants.exportTypes[typeIndex] === \"Mem\") {\n        var memNode = state.memoriesInModule[index];\n\n        if (typeof memNode === \"undefined\") {\n          throw new CompileError(\"unknown memory \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else if (constants.exportTypes[typeIndex] === \"Global\") {\n        var global = state.globalsInModule[index];\n\n        if (typeof global === \"undefined\") {\n          throw new CompileError(\"unknown global \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else {\n        console.warn(\"Unsupported export type: \" + toHex(typeIndex));\n        return;\n      }\n\n      var endLoc = getPosition();\n      state.elementsInExportSection.push({\n        name: name.value,\n        type: constants.exportTypes[typeIndex],\n        signature: signature,\n        id: id,\n        index: index,\n        endLoc: endLoc,\n        startLoc: _startLoc3\n      });\n    }\n  } // Code section\n  // https://webassembly.github.io/spec/binary/modules.html#code-section\n\n\n  function parseCodeSection(numberOfFuncs) {\n    dump([numberOfFuncs], \"number functions\"); // Parse vector of function\n\n    for (var i = 0; i < numberOfFuncs; i++) {\n      var _startLoc4 = getPosition();\n\n      dumpSep(\"function body \" + i); // the u32 size of the function code in bytes\n      // Ignore it for now\n\n      var bodySizeU32 = readU32();\n      eatBytes(bodySizeU32.nextIndex);\n      dump([bodySizeU32.value], \"function body size\");\n      var code = [];\n      /**\n       * Parse locals\n       */\n\n      var funcLocalNumU32 = readU32();\n      var funcLocalNum = funcLocalNumU32.value;\n      eatBytes(funcLocalNumU32.nextIndex);\n      dump([funcLocalNum], \"num locals\");\n      var locals = [];\n\n      for (var _i = 0; _i < funcLocalNum; _i++) {\n        var _startLoc5 = getPosition();\n\n        var localCountU32 = readU32();\n        var localCount = localCountU32.value;\n        eatBytes(localCountU32.nextIndex);\n        dump([localCount], \"num local\");\n        var valtypeByte = readByte();\n        eatBytes(1);\n        var type = constants.valtypes[valtypeByte];\n        var args = [];\n\n        for (var _i2 = 0; _i2 < localCount; _i2++) {\n          args.push(t.valtypeLiteral(type));\n        }\n\n        var localNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.instruction(\"local\", args), endLoc, _startLoc5);\n        }();\n\n        locals.push(localNode);\n        dump([valtypeByte], type);\n\n        if (typeof type === \"undefined\") {\n          throw new CompileError(\"Unexpected valtype: \" + toHex(valtypeByte));\n        }\n      }\n\n      code.push.apply(code, locals); // Decode instructions until the end\n\n      parseInstructionBlock(code);\n      var endLoc = getPosition();\n      state.elementsInCodeSection.push({\n        code: code,\n        locals: locals,\n        endLoc: endLoc,\n        startLoc: _startLoc4,\n        bodySize: bodySizeU32.value\n      });\n    }\n  }\n\n  function parseInstructionBlock(code) {\n    while (true) {\n      var _startLoc6 = getPosition();\n\n      var instructionAlreadyCreated = false;\n      var instructionByte = readByte();\n      eatBytes(1);\n\n      if (instructionByte === 0xfe) {\n        throw new CompileError(\"Atomic instructions are not implemented\");\n      }\n\n      var instruction = constants.symbolsByByte[instructionByte];\n\n      if (typeof instruction === \"undefined\") {\n        throw new CompileError(\"Unexpected instruction: \" + toHex(instructionByte));\n      }\n\n      if (typeof instruction.object === \"string\") {\n        dump([instructionByte], \"\".concat(instruction.object, \".\").concat(instruction.name));\n      } else {\n        dump([instructionByte], instruction.name);\n      }\n      /**\n       * End of the function\n       */\n\n\n      if (instruction.name === \"end\") {\n        var node = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.instruction(instruction.name), endLoc, _startLoc6);\n        }();\n\n        code.push(node);\n        break;\n      }\n\n      var args = [];\n\n      if (instruction.name === \"loop\") {\n        var _startLoc7 = getPosition();\n\n        var blocktypeByte = readByte();\n        eatBytes(1);\n        var blocktype = constants.blockTypes[blocktypeByte];\n        dump([blocktypeByte], \"blocktype\");\n\n        if (typeof blocktype === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(blocktypeByte));\n        }\n\n        var instr = [];\n        parseInstructionBlock(instr); // preserve anonymous\n\n        var label = t.withRaw(t.identifier(getUniqueName(\"loop\")), \"\");\n\n        var loopNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.loopInstruction(label, blocktype, instr), endLoc, _startLoc7);\n        }();\n\n        code.push(loopNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"if\") {\n        var _startLoc8 = getPosition();\n\n        var _blocktypeByte = readByte();\n\n        eatBytes(1);\n        var _blocktype = constants.blockTypes[_blocktypeByte];\n        dump([_blocktypeByte], \"blocktype\");\n\n        if (typeof _blocktype === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(_blocktypeByte));\n        }\n\n        var testIndex = t.withRaw(t.identifier(getUniqueName(\"if\")), \"\");\n        var ifBody = [];\n        parseInstructionBlock(ifBody); // Defaults to no alternate\n\n        var elseIndex = 0;\n\n        for (elseIndex = 0; elseIndex < ifBody.length; ++elseIndex) {\n          var _instr = ifBody[elseIndex];\n\n          if (_instr.type === \"Instr\" && _instr.id === \"else\") {\n            break;\n          }\n        }\n\n        var consequentInstr = ifBody.slice(0, elseIndex);\n        var alternate = ifBody.slice(elseIndex + 1); // wast sugar\n\n        var testInstrs = [];\n\n        var ifNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.ifInstruction(testIndex, testInstrs, _blocktype, consequentInstr, alternate), endLoc, _startLoc8);\n        }();\n\n        code.push(ifNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"block\") {\n        var _startLoc9 = getPosition();\n\n        var _blocktypeByte2 = readByte();\n\n        eatBytes(1);\n        var _blocktype2 = constants.blockTypes[_blocktypeByte2];\n        dump([_blocktypeByte2], \"blocktype\");\n\n        if (typeof _blocktype2 === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(_blocktypeByte2));\n        }\n\n        var _instr2 = [];\n        parseInstructionBlock(_instr2); // preserve anonymous\n\n        var _label = t.withRaw(t.identifier(getUniqueName(\"block\")), \"\");\n\n        var blockNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.blockInstruction(_label, _instr2, _blocktype2), endLoc, _startLoc9);\n        }();\n\n        code.push(blockNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"call\") {\n        var indexu32 = readU32();\n        var index = indexu32.value;\n        eatBytes(indexu32.nextIndex);\n        dump([index], \"index\");\n\n        var callNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.callInstruction(t.indexLiteral(index)), endLoc, _startLoc6);\n        }();\n\n        code.push(callNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"call_indirect\") {\n        var _startLoc10 = getPosition();\n\n        var indexU32 = readU32();\n        var typeindex = indexU32.value;\n        eatBytes(indexU32.nextIndex);\n        dump([typeindex], \"type index\");\n        var signature = state.typesInModule[typeindex];\n\n        if (typeof signature === \"undefined\") {\n          throw new CompileError(\"call_indirect signature not found (\".concat(typeindex, \")\"));\n        }\n\n        var _callNode = t.callIndirectInstruction(t.signature(signature.params, signature.result), []);\n\n        var flagU32 = readU32();\n        var flag = flagU32.value; // 0x00 - reserved byte\n\n        eatBytes(flagU32.nextIndex);\n\n        if (flag !== 0) {\n          throw new CompileError(\"zero flag expected\");\n        }\n\n        code.push(function () {\n          var endLoc = getPosition();\n          return t.withLoc(_callNode, endLoc, _startLoc10);\n        }());\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"br_table\") {\n        var indicesu32 = readU32();\n        var indices = indicesu32.value;\n        eatBytes(indicesu32.nextIndex);\n        dump([indices], \"num indices\");\n\n        for (var i = 0; i <= indices; i++) {\n          var _indexu = readU32();\n\n          var _index = _indexu.value;\n          eatBytes(_indexu.nextIndex);\n          dump([_index], \"index\");\n          args.push(t.numberLiteralFromRaw(_indexu.value.toString(), \"u32\"));\n        }\n      } else if (instructionByte >= 0x28 && instructionByte <= 0x40) {\n        /**\n         * Memory instructions\n         */\n        if (instruction.name === \"grow_memory\" || instruction.name === \"current_memory\") {\n          var _indexU = readU32();\n\n          var _index2 = _indexU.value;\n          eatBytes(_indexU.nextIndex);\n\n          if (_index2 !== 0) {\n            throw new Error(\"zero flag expected\");\n          }\n\n          dump([_index2], \"index\");\n        } else {\n          var aligun32 = readU32();\n          var align = aligun32.value;\n          eatBytes(aligun32.nextIndex);\n          dump([align], \"align\");\n          var offsetu32 = readU32();\n          var _offset2 = offsetu32.value;\n          eatBytes(offsetu32.nextIndex);\n          dump([_offset2], \"offset\");\n        }\n      } else if (instructionByte >= 0x41 && instructionByte <= 0x44) {\n        /**\n         * Numeric instructions\n         */\n        if (instruction.object === \"i32\") {\n          var value32 = read32();\n          var value = value32.value;\n          eatBytes(value32.nextIndex);\n          dump([value], \"i32 value\");\n          args.push(t.numberLiteralFromRaw(value));\n        }\n\n        if (instruction.object === \"u32\") {\n          var valueu32 = readU32();\n          var _value = valueu32.value;\n          eatBytes(valueu32.nextIndex);\n          dump([_value], \"u32 value\");\n          args.push(t.numberLiteralFromRaw(_value));\n        }\n\n        if (instruction.object === \"i64\") {\n          var value64 = read64();\n          var _value2 = value64.value;\n          eatBytes(value64.nextIndex);\n          dump([Number(_value2.toString())], \"i64 value\");\n          var high = _value2.high,\n              low = _value2.low;\n          var _node = {\n            type: \"LongNumberLiteral\",\n            value: {\n              high: high,\n              low: low\n            }\n          };\n          args.push(_node);\n        }\n\n        if (instruction.object === \"u64\") {\n          var valueu64 = readU64();\n          var _value3 = valueu64.value;\n          eatBytes(valueu64.nextIndex);\n          dump([Number(_value3.toString())], \"u64 value\");\n          var _high = _value3.high,\n              _low = _value3.low;\n          var _node2 = {\n            type: \"LongNumberLiteral\",\n            value: {\n              high: _high,\n              low: _low\n            }\n          };\n          args.push(_node2);\n        }\n\n        if (instruction.object === \"f32\") {\n          var valuef32 = readF32();\n          var _value4 = valuef32.value;\n          eatBytes(valuef32.nextIndex);\n          dump([_value4], \"f32 value\");\n          args.push( // $FlowIgnore\n          t.floatLiteral(_value4, valuef32.nan, valuef32.inf, String(_value4)));\n        }\n\n        if (instruction.object === \"f64\") {\n          var valuef64 = readF64();\n          var _value5 = valuef64.value;\n          eatBytes(valuef64.nextIndex);\n          dump([_value5], \"f64 value\");\n          args.push( // $FlowIgnore\n          t.floatLiteral(_value5, valuef64.nan, valuef64.inf, String(_value5)));\n        }\n      } else {\n        for (var _i3 = 0; _i3 < instruction.numberOfArgs; _i3++) {\n          var u32 = readU32();\n          eatBytes(u32.nextIndex);\n          dump([u32.value], \"argument \" + _i3);\n          args.push(t.numberLiteralFromRaw(u32.value));\n        }\n      }\n\n      if (instructionAlreadyCreated === false) {\n        if (typeof instruction.object === \"string\") {\n          var _node3 = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.objectInstruction(instruction.name, instruction.object, args), endLoc, _startLoc6);\n          }();\n\n          code.push(_node3);\n        } else {\n          var _node4 = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.instruction(instruction.name, args), endLoc, _startLoc6);\n          }();\n\n          code.push(_node4);\n        }\n      }\n    }\n  } // https://webassembly.github.io/spec/core/binary/types.html#limits\n\n\n  function parseLimits() {\n    var limitType = readByte();\n    eatBytes(1);\n    dump([limitType], \"limit type\");\n    var min, max;\n\n    if (limitType === 0x01 || limitType === 0x03 // shared limits\n    ) {\n      var u32min = readU32();\n      min = parseInt(u32min.value);\n      eatBytes(u32min.nextIndex);\n      dump([min], \"min\");\n      var u32max = readU32();\n      max = parseInt(u32max.value);\n      eatBytes(u32max.nextIndex);\n      dump([max], \"max\");\n    }\n\n    if (limitType === 0x00) {\n      var _u32min = readU32();\n\n      min = parseInt(_u32min.value);\n      eatBytes(_u32min.nextIndex);\n      dump([min], \"min\");\n    }\n\n    return t.limit(min, max);\n  } // https://webassembly.github.io/spec/core/binary/types.html#binary-tabletype\n\n\n  function parseTableType(index) {\n    var name = t.withRaw(t.identifier(getUniqueName(\"table\")), String(index));\n    var elementTypeByte = readByte();\n    eatBytes(1);\n    dump([elementTypeByte], \"element type\");\n    var elementType = constants.tableTypes[elementTypeByte];\n\n    if (typeof elementType === \"undefined\") {\n      throw new CompileError(\"Unknown element type in table: \" + toHex(elementType));\n    }\n\n    var limits = parseLimits();\n    return t.table(elementType, limits, name);\n  } // https://webassembly.github.io/spec/binary/types.html#global-types\n\n\n  function parseGlobalType() {\n    var valtypeByte = readByte();\n    eatBytes(1);\n    var type = constants.valtypes[valtypeByte];\n    dump([valtypeByte], type);\n\n    if (typeof type === \"undefined\") {\n      throw new CompileError(\"Unknown valtype: \" + toHex(valtypeByte));\n    }\n\n    var globalTypeByte = readByte();\n    eatBytes(1);\n    var globalType = constants.globalTypes[globalTypeByte];\n    dump([globalTypeByte], \"global type (\".concat(globalType, \")\"));\n\n    if (typeof globalType === \"undefined\") {\n      throw new CompileError(\"Invalid mutability: \" + toHex(globalTypeByte));\n    }\n\n    return t.globalType(type, globalType);\n  } // function parseNameModule() {\n  //   const lenu32 = readVaruint32();\n  //   eatBytes(lenu32.nextIndex);\n  //   console.log(\"len\", lenu32);\n  //   const strlen = lenu32.value;\n  //   dump([strlen], \"string length\");\n  //   const bytes = readBytes(strlen);\n  //   eatBytes(strlen);\n  //   const value = utf8.decode(bytes);\n  //   return [t.moduleNameMetadata(value)];\n  // }\n  // this section contains an array of function names and indices\n\n\n  function parseNameSectionFunctions() {\n    var functionNames = [];\n    var numberOfFunctionsu32 = readU32();\n    var numbeOfFunctions = numberOfFunctionsu32.value;\n    eatBytes(numberOfFunctionsu32.nextIndex);\n\n    for (var i = 0; i < numbeOfFunctions; i++) {\n      var indexu32 = readU32();\n      var index = indexu32.value;\n      eatBytes(indexu32.nextIndex);\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      functionNames.push(t.functionNameMetadata(name.value, index));\n    }\n\n    return functionNames;\n  }\n\n  function parseNameSectionLocals() {\n    var localNames = [];\n    var numbeOfFunctionsu32 = readU32();\n    var numbeOfFunctions = numbeOfFunctionsu32.value;\n    eatBytes(numbeOfFunctionsu32.nextIndex);\n\n    for (var i = 0; i < numbeOfFunctions; i++) {\n      var functionIndexu32 = readU32();\n      var functionIndex = functionIndexu32.value;\n      eatBytes(functionIndexu32.nextIndex);\n      var numLocalsu32 = readU32();\n      var numLocals = numLocalsu32.value;\n      eatBytes(numLocalsu32.nextIndex);\n\n      for (var _i4 = 0; _i4 < numLocals; _i4++) {\n        var localIndexu32 = readU32();\n        var localIndex = localIndexu32.value;\n        eatBytes(localIndexu32.nextIndex);\n        var name = readUTF8String();\n        eatBytes(name.nextIndex);\n        localNames.push(t.localNameMetadata(name.value, localIndex, functionIndex));\n      }\n    }\n\n    return localNames;\n  } // this is a custom section used for name resolution\n  // https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section\n\n\n  function parseNameSection(remainingBytes) {\n    var nameMetadata = [];\n    var initialOffset = offset;\n\n    while (offset - initialOffset < remainingBytes) {\n      // name_type\n      var sectionTypeByte = readVaruint7();\n      eatBytes(sectionTypeByte.nextIndex); // name_payload_len\n\n      var subSectionSizeInBytesu32 = readVaruint32();\n      eatBytes(subSectionSizeInBytesu32.nextIndex);\n\n      switch (sectionTypeByte.value) {\n        // case 0: {\n        // TODO(sven): re-enable that\n        // Current status: it seems that when we decode the module's name\n        // no name_payload_len is used.\n        //\n        // See https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section\n        //\n        // nameMetadata.push(...parseNameModule());\n        // break;\n        // }\n        case 1:\n          {\n            nameMetadata.push.apply(nameMetadata, _toConsumableArray(parseNameSectionFunctions()));\n            break;\n          }\n\n        case 2:\n          {\n            nameMetadata.push.apply(nameMetadata, _toConsumableArray(parseNameSectionLocals()));\n            break;\n          }\n\n        default:\n          {\n            // skip unknown subsection\n            eatBytes(subSectionSizeInBytesu32.value);\n          }\n      }\n    }\n\n    return nameMetadata;\n  } // this is a custom section used for information about the producers\n  // https://github.com/WebAssembly/tool-conventions/blob/master/ProducersSection.md\n\n\n  function parseProducersSection() {\n    var metadata = t.producersSectionMetadata([]); // field_count\n\n    var sectionTypeByte = readVaruint32();\n    eatBytes(sectionTypeByte.nextIndex);\n    dump([sectionTypeByte.value], \"num of producers\");\n    var fields = {\n      language: [],\n      \"processed-by\": [],\n      sdk: []\n    }; // fields\n\n    for (var fieldI = 0; fieldI < sectionTypeByte.value; fieldI++) {\n      // field_name\n      var fieldName = readUTF8String();\n      eatBytes(fieldName.nextIndex); // field_value_count\n\n      var valueCount = readVaruint32();\n      eatBytes(valueCount.nextIndex); // field_values\n\n      for (var producerI = 0; producerI < valueCount.value; producerI++) {\n        var producerName = readUTF8String();\n        eatBytes(producerName.nextIndex);\n        var producerVersion = readUTF8String();\n        eatBytes(producerVersion.nextIndex);\n        fields[fieldName.value].push(t.producerMetadataVersionedName(producerName.value, producerVersion.value));\n      }\n\n      metadata.producers.push(fields[fieldName.value]);\n    }\n\n    return metadata;\n  }\n\n  function parseGlobalSection(numberOfGlobals) {\n    var globals = [];\n    dump([numberOfGlobals], \"num globals\");\n\n    for (var i = 0; i < numberOfGlobals; i++) {\n      var _startLoc11 = getPosition();\n\n      var globalType = parseGlobalType();\n      /**\n       * Global expressions\n       */\n\n      var init = [];\n      parseInstructionBlock(init);\n\n      var node = function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.global(globalType, init), endLoc, _startLoc11);\n      }();\n\n      globals.push(node);\n      state.globalsInModule.push(node);\n    }\n\n    return globals;\n  }\n\n  function parseElemSection(numberOfElements) {\n    var elems = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var _startLoc12 = getPosition();\n\n      var tableindexu32 = readU32();\n      var tableindex = tableindexu32.value;\n      eatBytes(tableindexu32.nextIndex);\n      dump([tableindex], \"table index\");\n      /**\n       * Parse instructions\n       */\n\n      var instr = [];\n      parseInstructionBlock(instr);\n      /**\n       * Parse ( vector function index ) *\n       */\n\n      var indicesu32 = readU32();\n      var indices = indicesu32.value;\n      eatBytes(indicesu32.nextIndex);\n      dump([indices], \"num indices\");\n      var indexValues = [];\n\n      for (var _i5 = 0; _i5 < indices; _i5++) {\n        var indexu32 = readU32();\n        var index = indexu32.value;\n        eatBytes(indexu32.nextIndex);\n        dump([index], \"index\");\n        indexValues.push(t.indexLiteral(index));\n      }\n\n      var elemNode = function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.elem(t.indexLiteral(tableindex), instr, indexValues), endLoc, _startLoc12);\n      }();\n\n      elems.push(elemNode);\n    }\n\n    return elems;\n  } // https://webassembly.github.io/spec/core/binary/types.html#memory-types\n\n\n  function parseMemoryType(i) {\n    var limits = parseLimits();\n    return t.memory(limits, t.indexLiteral(i));\n  } // https://webassembly.github.io/spec/binary/modules.html#table-section\n\n\n  function parseTableSection(numberOfElements) {\n    var tables = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var tablesNode = parseTableType(i);\n      state.tablesInModule.push(tablesNode);\n      tables.push(tablesNode);\n    }\n\n    return tables;\n  } // https://webassembly.github.io/spec/binary/modules.html#memory-section\n\n\n  function parseMemorySection(numberOfElements) {\n    var memories = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var memoryNode = parseMemoryType(i);\n      state.memoriesInModule.push(memoryNode);\n      memories.push(memoryNode);\n    }\n\n    return memories;\n  } // https://webassembly.github.io/spec/binary/modules.html#binary-startsec\n\n\n  function parseStartSection() {\n    var startLoc = getPosition();\n    var u32 = readU32();\n    var startFuncIndex = u32.value;\n    eatBytes(u32.nextIndex);\n    dump([startFuncIndex], \"index\");\n    return function () {\n      var endLoc = getPosition();\n      return t.withLoc(t.start(t.indexLiteral(startFuncIndex)), endLoc, startLoc);\n    }();\n  } // https://webassembly.github.io/spec/binary/modules.html#data-section\n\n\n  function parseDataSection(numberOfElements) {\n    var dataEntries = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var memoryIndexu32 = readU32();\n      var memoryIndex = memoryIndexu32.value;\n      eatBytes(memoryIndexu32.nextIndex);\n      dump([memoryIndex], \"memory index\");\n      var instrs = [];\n      parseInstructionBlock(instrs);\n      var hasExtraInstrs = instrs.filter(function (i) {\n        return i.id !== \"end\";\n      }).length !== 1;\n\n      if (hasExtraInstrs) {\n        throw new CompileError(\"data section offset must be a single instruction\");\n      }\n\n      var bytes = parseVec(function (b) {\n        return b;\n      });\n      dump([], \"init\");\n      dataEntries.push(t.data(t.memIndexLiteral(memoryIndex), instrs[0], t.byteArray(bytes)));\n    }\n\n    return dataEntries;\n  } // https://webassembly.github.io/spec/binary/modules.html#binary-section\n\n\n  function parseSection(sectionIndex) {\n    var sectionId = readByte();\n    eatBytes(1);\n\n    if (sectionId >= sectionIndex || sectionIndex === constants.sections.custom) {\n      sectionIndex = sectionId + 1;\n    } else {\n      if (sectionId !== constants.sections.custom) throw new CompileError(\"Unexpected section: \" + toHex(sectionId));\n    }\n\n    var nextSectionIndex = sectionIndex;\n    var startOffset = offset;\n    var startLoc = getPosition();\n    var u32 = readU32();\n    var sectionSizeInBytes = u32.value;\n    eatBytes(u32.nextIndex);\n\n    var sectionSizeInBytesNode = function () {\n      var endLoc = getPosition();\n      return t.withLoc(t.numberLiteralFromRaw(sectionSizeInBytes), endLoc, startLoc);\n    }();\n\n    switch (sectionId) {\n      case constants.sections.type:\n        {\n          dumpSep(\"section Type\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc13 = getPosition();\n\n          var _u = readU32();\n\n          var numberOfTypes = _u.value;\n          eatBytes(_u.nextIndex);\n\n          var _metadata = t.sectionMetadata(\"type\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfTypes), endLoc, _startLoc13);\n          }());\n\n          var _nodes = parseTypeSection(numberOfTypes);\n\n          return {\n            nodes: _nodes,\n            metadata: _metadata,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.table:\n        {\n          dumpSep(\"section Table\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc14 = getPosition();\n\n          var _u2 = readU32();\n\n          var numberOfTable = _u2.value;\n          eatBytes(_u2.nextIndex);\n          dump([numberOfTable], \"num tables\");\n\n          var _metadata2 = t.sectionMetadata(\"table\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfTable), endLoc, _startLoc14);\n          }());\n\n          var _nodes2 = parseTableSection(numberOfTable);\n\n          return {\n            nodes: _nodes2,\n            metadata: _metadata2,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.import:\n        {\n          dumpSep(\"section Import\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc15 = getPosition();\n\n          var numberOfImportsu32 = readU32();\n          var numberOfImports = numberOfImportsu32.value;\n          eatBytes(numberOfImportsu32.nextIndex);\n          dump([numberOfImports], \"number of imports\");\n\n          var _metadata3 = t.sectionMetadata(\"import\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfImports), endLoc, _startLoc15);\n          }());\n\n          var _nodes3 = parseImportSection(numberOfImports);\n\n          return {\n            nodes: _nodes3,\n            metadata: _metadata3,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.func:\n        {\n          dumpSep(\"section Function\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc16 = getPosition();\n\n          var numberOfFunctionsu32 = readU32();\n          var numberOfFunctions = numberOfFunctionsu32.value;\n          eatBytes(numberOfFunctionsu32.nextIndex);\n\n          var _metadata4 = t.sectionMetadata(\"func\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfFunctions), endLoc, _startLoc16);\n          }());\n\n          parseFuncSection(numberOfFunctions);\n          var _nodes4 = [];\n          return {\n            nodes: _nodes4,\n            metadata: _metadata4,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.export:\n        {\n          dumpSep(\"section Export\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc17 = getPosition();\n\n          var _u3 = readU32();\n\n          var numberOfExport = _u3.value;\n          eatBytes(_u3.nextIndex);\n\n          var _metadata5 = t.sectionMetadata(\"export\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfExport), endLoc, _startLoc17);\n          }());\n\n          parseExportSection(numberOfExport);\n          var _nodes5 = [];\n          return {\n            nodes: _nodes5,\n            metadata: _metadata5,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.code:\n        {\n          dumpSep(\"section Code\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc18 = getPosition();\n\n          var _u4 = readU32();\n\n          var numberOfFuncs = _u4.value;\n          eatBytes(_u4.nextIndex);\n\n          var _metadata6 = t.sectionMetadata(\"code\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfFuncs), endLoc, _startLoc18);\n          }());\n\n          if (opts.ignoreCodeSection === true) {\n            var remainingBytes = sectionSizeInBytes - _u4.nextIndex;\n            eatBytes(remainingBytes); // eat the entire section\n          } else {\n            parseCodeSection(numberOfFuncs);\n          }\n\n          var _nodes6 = [];\n          return {\n            nodes: _nodes6,\n            metadata: _metadata6,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.start:\n        {\n          dumpSep(\"section Start\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _metadata7 = t.sectionMetadata(\"start\", startOffset, sectionSizeInBytesNode);\n\n          var _nodes7 = [parseStartSection()];\n          return {\n            nodes: _nodes7,\n            metadata: _metadata7,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.element:\n        {\n          dumpSep(\"section Element\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc19 = getPosition();\n\n          var numberOfElementsu32 = readU32();\n          var numberOfElements = numberOfElementsu32.value;\n          eatBytes(numberOfElementsu32.nextIndex);\n\n          var _metadata8 = t.sectionMetadata(\"element\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfElements), endLoc, _startLoc19);\n          }());\n\n          var _nodes8 = parseElemSection(numberOfElements);\n\n          return {\n            nodes: _nodes8,\n            metadata: _metadata8,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.global:\n        {\n          dumpSep(\"section Global\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc20 = getPosition();\n\n          var numberOfGlobalsu32 = readU32();\n          var numberOfGlobals = numberOfGlobalsu32.value;\n          eatBytes(numberOfGlobalsu32.nextIndex);\n\n          var _metadata9 = t.sectionMetadata(\"global\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfGlobals), endLoc, _startLoc20);\n          }());\n\n          var _nodes9 = parseGlobalSection(numberOfGlobals);\n\n          return {\n            nodes: _nodes9,\n            metadata: _metadata9,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.memory:\n        {\n          dumpSep(\"section Memory\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc21 = getPosition();\n\n          var _numberOfElementsu = readU32();\n\n          var _numberOfElements = _numberOfElementsu.value;\n          eatBytes(_numberOfElementsu.nextIndex);\n\n          var _metadata10 = t.sectionMetadata(\"memory\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(_numberOfElements), endLoc, _startLoc21);\n          }());\n\n          var _nodes10 = parseMemorySection(_numberOfElements);\n\n          return {\n            nodes: _nodes10,\n            metadata: _metadata10,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.data:\n        {\n          dumpSep(\"section Data\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _metadata11 = t.sectionMetadata(\"data\", startOffset, sectionSizeInBytesNode);\n\n          var _startLoc22 = getPosition();\n\n          var _numberOfElementsu2 = readU32();\n\n          var _numberOfElements2 = _numberOfElementsu2.value;\n          eatBytes(_numberOfElementsu2.nextIndex);\n\n          _metadata11.vectorOfSize = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(_numberOfElements2), endLoc, _startLoc22);\n          }();\n\n          if (opts.ignoreDataSection === true) {\n            var _remainingBytes = sectionSizeInBytes - _numberOfElementsu2.nextIndex;\n\n            eatBytes(_remainingBytes); // eat the entire section\n\n            dumpSep(\"ignore data (\" + sectionSizeInBytes + \" bytes)\");\n            return {\n              nodes: [],\n              metadata: _metadata11,\n              nextSectionIndex: nextSectionIndex\n            };\n          } else {\n            var _nodes11 = parseDataSection(_numberOfElements2);\n\n            return {\n              nodes: _nodes11,\n              metadata: _metadata11,\n              nextSectionIndex: nextSectionIndex\n            };\n          }\n        }\n\n      case constants.sections.custom:\n        {\n          dumpSep(\"section Custom\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _metadata12 = [t.sectionMetadata(\"custom\", startOffset, sectionSizeInBytesNode)];\n          var sectionName = readUTF8String();\n          eatBytes(sectionName.nextIndex);\n          dump([], \"section name (\".concat(sectionName.value, \")\"));\n\n          var _remainingBytes2 = sectionSizeInBytes - sectionName.nextIndex;\n\n          if (sectionName.value === \"name\") {\n            var initialOffset = offset;\n\n            try {\n              _metadata12.push.apply(_metadata12, _toConsumableArray(parseNameSection(_remainingBytes2)));\n            } catch (e) {\n              console.warn(\"Failed to decode custom \\\"name\\\" section @\".concat(offset, \"; ignoring (\").concat(e.message, \").\"));\n              eatBytes(offset - (initialOffset + _remainingBytes2));\n            }\n          } else if (sectionName.value === \"producers\") {\n            var _initialOffset = offset;\n\n            try {\n              _metadata12.push(parseProducersSection());\n            } catch (e) {\n              console.warn(\"Failed to decode custom \\\"producers\\\" section @\".concat(offset, \"; ignoring (\").concat(e.message, \").\"));\n              eatBytes(offset - (_initialOffset + _remainingBytes2));\n            }\n          } else {\n            // We don't parse the custom section\n            eatBytes(_remainingBytes2);\n            dumpSep(\"ignore custom \" + JSON.stringify(sectionName.value) + \" section (\" + _remainingBytes2 + \" bytes)\");\n          }\n\n          return {\n            nodes: [],\n            metadata: _metadata12,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n    }\n\n    throw new CompileError(\"Unexpected section: \" + toHex(sectionId));\n  }\n\n  parseModuleHeader();\n  parseVersion();\n  var moduleFields = [];\n  var sectionIndex = 0;\n  var moduleMetadata = {\n    sections: [],\n    functionNames: [],\n    localNames: [],\n    producers: []\n  };\n  /**\n   * All the generate declaration are going to be stored in our state\n   */\n\n  while (offset < buf.length) {\n    var _parseSection = parseSection(sectionIndex),\n        _nodes12 = _parseSection.nodes,\n        _metadata13 = _parseSection.metadata,\n        nextSectionIndex = _parseSection.nextSectionIndex;\n\n    moduleFields.push.apply(moduleFields, _toConsumableArray(_nodes12));\n    var metadataArray = Array.isArray(_metadata13) ? _metadata13 : [_metadata13];\n    metadataArray.forEach(function (metadataItem) {\n      if (metadataItem.type === \"FunctionNameMetadata\") {\n        moduleMetadata.functionNames.push(metadataItem);\n      } else if (metadataItem.type === \"LocalNameMetadata\") {\n        moduleMetadata.localNames.push(metadataItem);\n      } else if (metadataItem.type === \"ProducersSectionMetadata\") {\n        moduleMetadata.producers.push(metadataItem);\n      } else {\n        moduleMetadata.sections.push(metadataItem);\n      }\n    }); // Ignore custom section\n\n    if (nextSectionIndex) {\n      sectionIndex = nextSectionIndex;\n    }\n  }\n  /**\n   * Transform the state into AST nodes\n   */\n\n\n  var funcIndex = 0;\n  state.functionsInModule.forEach(function (func) {\n    var params = func.signature.params;\n    var result = func.signature.result;\n    var body = []; // External functions doesn't provide any code, can skip it here\n\n    if (func.isExternal === true) {\n      return;\n    }\n\n    var decodedElementInCodeSection = state.elementsInCodeSection[funcIndex];\n\n    if (opts.ignoreCodeSection === false) {\n      if (typeof decodedElementInCodeSection === \"undefined\") {\n        throw new CompileError(\"func \" + toHex(funcIndex) + \" code not found\");\n      }\n\n      body = decodedElementInCodeSection.code;\n    }\n\n    funcIndex++;\n    var funcNode = t.func(func.id, t.signature(params, result), body);\n\n    if (func.isExternal === true) {\n      funcNode.isExternal = func.isExternal;\n    } // Add function position in the binary if possible\n\n\n    if (opts.ignoreCodeSection === false) {\n      var _startLoc23 = decodedElementInCodeSection.startLoc,\n          endLoc = decodedElementInCodeSection.endLoc,\n          bodySize = decodedElementInCodeSection.bodySize;\n      funcNode = t.withLoc(funcNode, endLoc, _startLoc23);\n      funcNode.metadata = {\n        bodySize: bodySize\n      };\n    }\n\n    moduleFields.push(funcNode);\n  });\n  state.elementsInExportSection.forEach(function (moduleExport) {\n    /**\n     * If the export has no id, we won't be able to call it from the outside\n     * so we can omit it\n     */\n    if (moduleExport.id != null) {\n      moduleFields.push(t.withLoc(t.moduleExport(moduleExport.name, t.moduleExportDescr(moduleExport.type, moduleExport.id)), moduleExport.endLoc, moduleExport.startLoc));\n    }\n  });\n  dumpSep(\"end of program\");\n  var module = t.module(null, moduleFields, t.moduleMetadata(moduleMetadata.sections, moduleMetadata.functionNames, moduleMetadata.localNames, moduleMetadata.producers));\n  return t.program([module]);\n}","map":{"version":3,"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","CompileError","ieee754","utf8","t","decodeInt32","decodeUInt32","MAX_NUMBER_OF_BYTE_U32","decodeInt64","decodeUInt64","MAX_NUMBER_OF_BYTE_U64","constants","toHex","n","Number","toString","byteArrayEq","l","r","decode","ab","opts","buf","Uint8Array","getUniqueName","getUniqueNameGenerator","offset","getPosition","line","column","dump","b","msg","pad","str","map","join","console","log","dumpSep","state","elementsInFuncSection","elementsInExportSection","elementsInCodeSection","memoriesInModule","typesInModule","functionsInModule","tablesInModule","globalsInModule","isEOF","eatBytes","readBytesAtOffset","_offset","numberOfBytes","push","readBytes","readF64","bytes","NUMBER_OF_BYTE_F64","value","decodeF64","Math","sign","Infinity","inf","nextIndex","isNaN","mantissa","pow","nan","readF32","NUMBER_OF_BYTE_F32","decodeF32","readUTF8String","lenu32","readU32","strlen","buffer","Buffer","readVaruint32","readVaruint7","read32","read64","readU64","readByte","parseModuleHeader","Error","header","magicModuleHeader","parseVersion","version","moduleVersion","parseVec","cast","u32","elements","byte","parseTypeSection","numberOfTypes","typeInstructionNodes","_startLoc","type","types","func","paramValtypes","valtypes","params","v","funcParam","result","endLoc","withLoc","typeInstruction","undefined","signature","parseImportSection","numberOfImports","imports","_startLoc2","moduleName","concat","name","descrTypeByte","descrType","importTypes","importDescr","indexU32","typeindex","id","funcImportDescr","identifier","isExternal","parseGlobalType","globalNode","global","parseTableType","memoryNode","parseMemoryType","moduleImport","parseFuncSection","numberOfFunctions","withRaw","parseExportSection","numberOfExport","_startLoc3","typeIndex","indexu32","index","exportTypes","numberLiteralFromRaw","String","table","memNode","warn","startLoc","parseCodeSection","numberOfFuncs","_startLoc4","bodySizeU32","code","funcLocalNumU32","funcLocalNum","locals","_i","_startLoc5","localCountU32","localCount","valtypeByte","args","_i2","valtypeLiteral","localNode","instruction","apply","parseInstructionBlock","bodySize","_startLoc6","instructionAlreadyCreated","instructionByte","symbolsByByte","object","node","_startLoc7","blocktypeByte","blocktype","blockTypes","instr","label","loopNode","loopInstruction","_startLoc8","_blocktypeByte","_blocktype","testIndex","ifBody","elseIndex","_instr","consequentInstr","slice","alternate","testInstrs","ifNode","ifInstruction","_startLoc9","_blocktypeByte2","_blocktype2","_instr2","_label","blockNode","blockInstruction","callNode","callInstruction","indexLiteral","_startLoc10","_callNode","callIndirectInstruction","flagU32","flag","indicesu32","indices","_indexu","_index","_indexU","_index2","aligun32","align","offsetu32","_offset2","value32","valueu32","_value","value64","_value2","high","low","_node","valueu64","_value3","_high","_low","_node2","valuef32","_value4","floatLiteral","valuef64","_value5","_i3","numberOfArgs","_node3","objectInstruction","_node4","parseLimits","limitType","min","max","u32min","parseInt","u32max","_u32min","limit","elementTypeByte","elementType","tableTypes","limits","globalTypeByte","globalType","globalTypes","parseNameSectionFunctions","functionNames","numberOfFunctionsu32","numbeOfFunctions","functionNameMetadata","parseNameSectionLocals","localNames","numbeOfFunctionsu32","functionIndexu32","functionIndex","numLocalsu32","numLocals","_i4","localIndexu32","localIndex","localNameMetadata","parseNameSection","remainingBytes","nameMetadata","initialOffset","sectionTypeByte","subSectionSizeInBytesu32","parseProducersSection","metadata","producersSectionMetadata","fields","language","sdk","fieldI","fieldName","valueCount","producerI","producerName","producerVersion","producerMetadataVersionedName","producers","parseGlobalSection","numberOfGlobals","globals","_startLoc11","init","parseElemSection","numberOfElements","elems","_startLoc12","tableindexu32","tableindex","indexValues","_i5","elemNode","elem","memory","parseTableSection","tables","tablesNode","parseMemorySection","memories","parseStartSection","startFuncIndex","start","parseDataSection","dataEntries","memoryIndexu32","memoryIndex","instrs","hasExtraInstrs","filter","data","memIndexLiteral","byteArray","parseSection","sectionIndex","sectionId","sections","custom","nextSectionIndex","startOffset","sectionSizeInBytes","sectionSizeInBytesNode","_startLoc13","_u","_metadata","sectionMetadata","_nodes","nodes","_startLoc14","_u2","numberOfTable","_metadata2","_nodes2","import","_startLoc15","numberOfImportsu32","_metadata3","_nodes3","_startLoc16","_metadata4","_nodes4","export","_startLoc17","_u3","_metadata5","_nodes5","_startLoc18","_u4","_metadata6","ignoreCodeSection","_nodes6","_metadata7","_nodes7","element","_startLoc19","numberOfElementsu32","_metadata8","_nodes8","_startLoc20","numberOfGlobalsu32","_metadata9","_nodes9","_startLoc21","_numberOfElementsu","_numberOfElements","_metadata10","_nodes10","_metadata11","_startLoc22","_numberOfElementsu2","_numberOfElements2","vectorOfSize","ignoreDataSection","_remainingBytes","_nodes11","_metadata12","sectionName","_remainingBytes2","e","message","_initialOffset","JSON","stringify","moduleFields","moduleMetadata","_parseSection","_nodes12","_metadata13","metadataArray","forEach","metadataItem","funcIndex","body","decodedElementInCodeSection","funcNode","_startLoc23","moduleExport","moduleExportDescr","module","program"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/@webassemblyjs/wasm-parser/esm/decoder.js"],"sourcesContent":["function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport { CompileError } from \"@webassemblyjs/helper-api-error\";\nimport * as ieee754 from \"@webassemblyjs/ieee754\";\nimport * as utf8 from \"@webassemblyjs/utf8\";\nimport * as t from \"@webassemblyjs/ast\";\nimport { decodeInt32, decodeUInt32, MAX_NUMBER_OF_BYTE_U32, decodeInt64, decodeUInt64, MAX_NUMBER_OF_BYTE_U64 } from \"@webassemblyjs/leb128\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\n\nfunction toHex(n) {\n  return \"0x\" + Number(n).toString(16);\n}\n\nfunction byteArrayEq(l, r) {\n  if (l.length !== r.length) {\n    return false;\n  }\n\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] !== r[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function decode(ab, opts) {\n  var buf = new Uint8Array(ab);\n  var getUniqueName = t.getUniqueNameGenerator();\n  var offset = 0;\n\n  function getPosition() {\n    return {\n      line: -1,\n      column: offset\n    };\n  }\n\n  function dump(b, msg) {\n    if (opts.dump === false) return;\n    var pad = \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\";\n    var str = \"\";\n\n    if (b.length < 5) {\n      str = b.map(toHex).join(\" \");\n    } else {\n      str = \"...\";\n    }\n\n    console.log(toHex(offset) + \":\\t\", str, pad, \";\", msg);\n  }\n\n  function dumpSep(msg) {\n    if (opts.dump === false) return;\n    console.log(\";\", msg);\n  }\n  /**\n   * TODO(sven): we can atually use a same structure\n   * we are adding incrementally new features\n   */\n\n\n  var state = {\n    elementsInFuncSection: [],\n    elementsInExportSection: [],\n    elementsInCodeSection: [],\n\n    /**\n     * Decode memory from:\n     * - Memory section\n     */\n    memoriesInModule: [],\n\n    /**\n     * Decoded types from:\n     * - Type section\n     */\n    typesInModule: [],\n\n    /**\n     * Decoded functions from:\n     * - Function section\n     * - Import section\n     */\n    functionsInModule: [],\n\n    /**\n     * Decoded tables from:\n     * - Table section\n     */\n    tablesInModule: [],\n\n    /**\n     * Decoded globals from:\n     * - Global section\n     */\n    globalsInModule: []\n  };\n\n  function isEOF() {\n    return offset >= buf.length;\n  }\n\n  function eatBytes(n) {\n    offset = offset + n;\n  }\n\n  function readBytesAtOffset(_offset, numberOfBytes) {\n    var arr = [];\n\n    for (var i = 0; i < numberOfBytes; i++) {\n      arr.push(buf[_offset + i]);\n    }\n\n    return arr;\n  }\n\n  function readBytes(numberOfBytes) {\n    return readBytesAtOffset(offset, numberOfBytes);\n  }\n\n  function readF64() {\n    var bytes = readBytes(ieee754.NUMBER_OF_BYTE_F64);\n    var value = ieee754.decodeF64(bytes);\n\n    if (Math.sign(value) * value === Infinity) {\n      return {\n        value: Math.sign(value),\n        inf: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F64\n      };\n    }\n\n    if (isNaN(value)) {\n      var sign = bytes[bytes.length - 1] >> 7 ? -1 : 1;\n      var mantissa = 0;\n\n      for (var i = 0; i < bytes.length - 2; ++i) {\n        mantissa += bytes[i] * Math.pow(256, i);\n      }\n\n      mantissa += bytes[bytes.length - 2] % 16 * Math.pow(256, bytes.length - 2);\n      return {\n        value: sign * mantissa,\n        nan: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F64\n      };\n    }\n\n    return {\n      value: value,\n      nextIndex: ieee754.NUMBER_OF_BYTE_F64\n    };\n  }\n\n  function readF32() {\n    var bytes = readBytes(ieee754.NUMBER_OF_BYTE_F32);\n    var value = ieee754.decodeF32(bytes);\n\n    if (Math.sign(value) * value === Infinity) {\n      return {\n        value: Math.sign(value),\n        inf: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F32\n      };\n    }\n\n    if (isNaN(value)) {\n      var sign = bytes[bytes.length - 1] >> 7 ? -1 : 1;\n      var mantissa = 0;\n\n      for (var i = 0; i < bytes.length - 2; ++i) {\n        mantissa += bytes[i] * Math.pow(256, i);\n      }\n\n      mantissa += bytes[bytes.length - 2] % 128 * Math.pow(256, bytes.length - 2);\n      return {\n        value: sign * mantissa,\n        nan: true,\n        nextIndex: ieee754.NUMBER_OF_BYTE_F32\n      };\n    }\n\n    return {\n      value: value,\n      nextIndex: ieee754.NUMBER_OF_BYTE_F32\n    };\n  }\n\n  function readUTF8String() {\n    var lenu32 = readU32(); // Don't eat any bytes. Instead, peek ahead of the current offset using\n    // readBytesAtOffset below. This keeps readUTF8String neutral with respect\n    // to the current offset, just like the other readX functions.\n\n    var strlen = lenu32.value;\n    dump([strlen], \"string length\");\n    var bytes = readBytesAtOffset(offset + lenu32.nextIndex, strlen);\n    var value = utf8.decode(bytes);\n    return {\n      value: value,\n      nextIndex: strlen + lenu32.nextIndex\n    };\n  }\n  /**\n   * Decode an unsigned 32bits integer\n   *\n   * The length will be handled by the leb librairy, we pass the max number of\n   * byte.\n   */\n\n\n  function readU32() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U32);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n\n  function readVaruint32() {\n    // where 32 bits = max 4 bytes\n    var bytes = readBytes(4);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n\n  function readVaruint7() {\n    // where 7 bits = max 1 bytes\n    var bytes = readBytes(1);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt32(buffer);\n  }\n  /**\n   * Decode a signed 32bits interger\n   */\n\n\n  function read32() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U32);\n    var buffer = Buffer.from(bytes);\n    return decodeInt32(buffer);\n  }\n  /**\n   * Decode a signed 64bits integer\n   */\n\n\n  function read64() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U64);\n    var buffer = Buffer.from(bytes);\n    return decodeInt64(buffer);\n  }\n\n  function readU64() {\n    var bytes = readBytes(MAX_NUMBER_OF_BYTE_U64);\n    var buffer = Buffer.from(bytes);\n    return decodeUInt64(buffer);\n  }\n\n  function readByte() {\n    return readBytes(1)[0];\n  }\n\n  function parseModuleHeader() {\n    if (isEOF() === true || offset + 4 > buf.length) {\n      throw new Error(\"unexpected end\");\n    }\n\n    var header = readBytes(4);\n\n    if (byteArrayEq(constants.magicModuleHeader, header) === false) {\n      throw new CompileError(\"magic header not detected\");\n    }\n\n    dump(header, \"wasm magic header\");\n    eatBytes(4);\n  }\n\n  function parseVersion() {\n    if (isEOF() === true || offset + 4 > buf.length) {\n      throw new Error(\"unexpected end\");\n    }\n\n    var version = readBytes(4);\n\n    if (byteArrayEq(constants.moduleVersion, version) === false) {\n      throw new CompileError(\"unknown binary version\");\n    }\n\n    dump(version, \"wasm version\");\n    eatBytes(4);\n  }\n\n  function parseVec(cast) {\n    var u32 = readU32();\n    var length = u32.value;\n    eatBytes(u32.nextIndex);\n    dump([length], \"number\");\n\n    if (length === 0) {\n      return [];\n    }\n\n    var elements = [];\n\n    for (var i = 0; i < length; i++) {\n      var byte = readByte();\n      eatBytes(1);\n      var value = cast(byte);\n      dump([byte], value);\n\n      if (typeof value === \"undefined\") {\n        throw new CompileError(\"Internal failure: parseVec could not cast the value\");\n      }\n\n      elements.push(value);\n    }\n\n    return elements;\n  } // Type section\n  // https://webassembly.github.io/spec/binary/modules.html#binary-typesec\n\n\n  function parseTypeSection(numberOfTypes) {\n    var typeInstructionNodes = [];\n    dump([numberOfTypes], \"num types\");\n\n    for (var i = 0; i < numberOfTypes; i++) {\n      var _startLoc = getPosition();\n\n      dumpSep(\"type \" + i);\n      var type = readByte();\n      eatBytes(1);\n\n      if (type == constants.types.func) {\n        dump([type], \"func\");\n        var paramValtypes = parseVec(function (b) {\n          return constants.valtypes[b];\n        });\n        var params = paramValtypes.map(function (v) {\n          return t.funcParam(\n          /*valtype*/\n          v);\n        });\n        var result = parseVec(function (b) {\n          return constants.valtypes[b];\n        });\n        typeInstructionNodes.push(function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.typeInstruction(undefined, t.signature(params, result)), endLoc, _startLoc);\n        }());\n        state.typesInModule.push({\n          params: params,\n          result: result\n        });\n      } else {\n        throw new Error(\"Unsupported type: \" + toHex(type));\n      }\n    }\n\n    return typeInstructionNodes;\n  } // Import section\n  // https://webassembly.github.io/spec/binary/modules.html#binary-importsec\n\n\n  function parseImportSection(numberOfImports) {\n    var imports = [];\n\n    for (var i = 0; i < numberOfImports; i++) {\n      dumpSep(\"import header \" + i);\n\n      var _startLoc2 = getPosition();\n      /**\n       * Module name\n       */\n\n\n      var moduleName = readUTF8String();\n      eatBytes(moduleName.nextIndex);\n      dump([], \"module name (\".concat(moduleName.value, \")\"));\n      /**\n       * Name\n       */\n\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      dump([], \"name (\".concat(name.value, \")\"));\n      /**\n       * Import descr\n       */\n\n      var descrTypeByte = readByte();\n      eatBytes(1);\n      var descrType = constants.importTypes[descrTypeByte];\n      dump([descrTypeByte], \"import kind\");\n\n      if (typeof descrType === \"undefined\") {\n        throw new CompileError(\"Unknown import description type: \" + toHex(descrTypeByte));\n      }\n\n      var importDescr = void 0;\n\n      if (descrType === \"func\") {\n        var indexU32 = readU32();\n        var typeindex = indexU32.value;\n        eatBytes(indexU32.nextIndex);\n        dump([typeindex], \"type index\");\n        var signature = state.typesInModule[typeindex];\n\n        if (typeof signature === \"undefined\") {\n          throw new CompileError(\"function signature not found (\".concat(typeindex, \")\"));\n        }\n\n        var id = getUniqueName(\"func\");\n        importDescr = t.funcImportDescr(id, t.signature(signature.params, signature.result));\n        state.functionsInModule.push({\n          id: t.identifier(name.value),\n          signature: signature,\n          isExternal: true\n        });\n      } else if (descrType === \"global\") {\n        importDescr = parseGlobalType();\n        var globalNode = t.global(importDescr, []);\n        state.globalsInModule.push(globalNode);\n      } else if (descrType === \"table\") {\n        importDescr = parseTableType(i);\n      } else if (descrType === \"mem\") {\n        var memoryNode = parseMemoryType(0);\n        state.memoriesInModule.push(memoryNode);\n        importDescr = memoryNode;\n      } else {\n        throw new CompileError(\"Unsupported import of type: \" + descrType);\n      }\n\n      imports.push(function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.moduleImport(moduleName.value, name.value, importDescr), endLoc, _startLoc2);\n      }());\n    }\n\n    return imports;\n  } // Function section\n  // https://webassembly.github.io/spec/binary/modules.html#function-section\n\n\n  function parseFuncSection(numberOfFunctions) {\n    dump([numberOfFunctions], \"num funcs\");\n\n    for (var i = 0; i < numberOfFunctions; i++) {\n      var indexU32 = readU32();\n      var typeindex = indexU32.value;\n      eatBytes(indexU32.nextIndex);\n      dump([typeindex], \"type index\");\n      var signature = state.typesInModule[typeindex];\n\n      if (typeof signature === \"undefined\") {\n        throw new CompileError(\"function signature not found (\".concat(typeindex, \")\"));\n      } // preserve anonymous, a name might be resolved later\n\n\n      var id = t.withRaw(t.identifier(getUniqueName(\"func\")), \"\");\n      state.functionsInModule.push({\n        id: id,\n        signature: signature,\n        isExternal: false\n      });\n    }\n  } // Export section\n  // https://webassembly.github.io/spec/binary/modules.html#export-section\n\n\n  function parseExportSection(numberOfExport) {\n    dump([numberOfExport], \"num exports\"); // Parse vector of exports\n\n    for (var i = 0; i < numberOfExport; i++) {\n      var _startLoc3 = getPosition();\n      /**\n       * Name\n       */\n\n\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      dump([], \"export name (\".concat(name.value, \")\"));\n      /**\n       * exportdescr\n       */\n\n      var typeIndex = readByte();\n      eatBytes(1);\n      dump([typeIndex], \"export kind\");\n      var indexu32 = readU32();\n      var index = indexu32.value;\n      eatBytes(indexu32.nextIndex);\n      dump([index], \"export index\");\n      var id = void 0,\n          signature = void 0;\n\n      if (constants.exportTypes[typeIndex] === \"Func\") {\n        var func = state.functionsInModule[index];\n\n        if (typeof func === \"undefined\") {\n          throw new CompileError(\"unknown function (\".concat(index, \")\"));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = func.signature;\n      } else if (constants.exportTypes[typeIndex] === \"Table\") {\n        var table = state.tablesInModule[index];\n\n        if (typeof table === \"undefined\") {\n          throw new CompileError(\"unknown table \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else if (constants.exportTypes[typeIndex] === \"Mem\") {\n        var memNode = state.memoriesInModule[index];\n\n        if (typeof memNode === \"undefined\") {\n          throw new CompileError(\"unknown memory \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else if (constants.exportTypes[typeIndex] === \"Global\") {\n        var global = state.globalsInModule[index];\n\n        if (typeof global === \"undefined\") {\n          throw new CompileError(\"unknown global \".concat(index));\n        }\n\n        id = t.numberLiteralFromRaw(index, String(index));\n        signature = null;\n      } else {\n        console.warn(\"Unsupported export type: \" + toHex(typeIndex));\n        return;\n      }\n\n      var endLoc = getPosition();\n      state.elementsInExportSection.push({\n        name: name.value,\n        type: constants.exportTypes[typeIndex],\n        signature: signature,\n        id: id,\n        index: index,\n        endLoc: endLoc,\n        startLoc: _startLoc3\n      });\n    }\n  } // Code section\n  // https://webassembly.github.io/spec/binary/modules.html#code-section\n\n\n  function parseCodeSection(numberOfFuncs) {\n    dump([numberOfFuncs], \"number functions\"); // Parse vector of function\n\n    for (var i = 0; i < numberOfFuncs; i++) {\n      var _startLoc4 = getPosition();\n\n      dumpSep(\"function body \" + i); // the u32 size of the function code in bytes\n      // Ignore it for now\n\n      var bodySizeU32 = readU32();\n      eatBytes(bodySizeU32.nextIndex);\n      dump([bodySizeU32.value], \"function body size\");\n      var code = [];\n      /**\n       * Parse locals\n       */\n\n      var funcLocalNumU32 = readU32();\n      var funcLocalNum = funcLocalNumU32.value;\n      eatBytes(funcLocalNumU32.nextIndex);\n      dump([funcLocalNum], \"num locals\");\n      var locals = [];\n\n      for (var _i = 0; _i < funcLocalNum; _i++) {\n        var _startLoc5 = getPosition();\n\n        var localCountU32 = readU32();\n        var localCount = localCountU32.value;\n        eatBytes(localCountU32.nextIndex);\n        dump([localCount], \"num local\");\n        var valtypeByte = readByte();\n        eatBytes(1);\n        var type = constants.valtypes[valtypeByte];\n        var args = [];\n\n        for (var _i2 = 0; _i2 < localCount; _i2++) {\n          args.push(t.valtypeLiteral(type));\n        }\n\n        var localNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.instruction(\"local\", args), endLoc, _startLoc5);\n        }();\n\n        locals.push(localNode);\n        dump([valtypeByte], type);\n\n        if (typeof type === \"undefined\") {\n          throw new CompileError(\"Unexpected valtype: \" + toHex(valtypeByte));\n        }\n      }\n\n      code.push.apply(code, locals); // Decode instructions until the end\n\n      parseInstructionBlock(code);\n      var endLoc = getPosition();\n      state.elementsInCodeSection.push({\n        code: code,\n        locals: locals,\n        endLoc: endLoc,\n        startLoc: _startLoc4,\n        bodySize: bodySizeU32.value\n      });\n    }\n  }\n\n  function parseInstructionBlock(code) {\n    while (true) {\n      var _startLoc6 = getPosition();\n\n      var instructionAlreadyCreated = false;\n      var instructionByte = readByte();\n      eatBytes(1);\n\n      if (instructionByte === 0xfe) {\n        throw new CompileError(\"Atomic instructions are not implemented\");\n      }\n\n      var instruction = constants.symbolsByByte[instructionByte];\n\n      if (typeof instruction === \"undefined\") {\n        throw new CompileError(\"Unexpected instruction: \" + toHex(instructionByte));\n      }\n\n      if (typeof instruction.object === \"string\") {\n        dump([instructionByte], \"\".concat(instruction.object, \".\").concat(instruction.name));\n      } else {\n        dump([instructionByte], instruction.name);\n      }\n      /**\n       * End of the function\n       */\n\n\n      if (instruction.name === \"end\") {\n        var node = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.instruction(instruction.name), endLoc, _startLoc6);\n        }();\n\n        code.push(node);\n        break;\n      }\n\n      var args = [];\n\n      if (instruction.name === \"loop\") {\n        var _startLoc7 = getPosition();\n\n        var blocktypeByte = readByte();\n        eatBytes(1);\n        var blocktype = constants.blockTypes[blocktypeByte];\n        dump([blocktypeByte], \"blocktype\");\n\n        if (typeof blocktype === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(blocktypeByte));\n        }\n\n        var instr = [];\n        parseInstructionBlock(instr); // preserve anonymous\n\n        var label = t.withRaw(t.identifier(getUniqueName(\"loop\")), \"\");\n\n        var loopNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.loopInstruction(label, blocktype, instr), endLoc, _startLoc7);\n        }();\n\n        code.push(loopNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"if\") {\n        var _startLoc8 = getPosition();\n\n        var _blocktypeByte = readByte();\n\n        eatBytes(1);\n        var _blocktype = constants.blockTypes[_blocktypeByte];\n        dump([_blocktypeByte], \"blocktype\");\n\n        if (typeof _blocktype === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(_blocktypeByte));\n        }\n\n        var testIndex = t.withRaw(t.identifier(getUniqueName(\"if\")), \"\");\n        var ifBody = [];\n        parseInstructionBlock(ifBody); // Defaults to no alternate\n\n        var elseIndex = 0;\n\n        for (elseIndex = 0; elseIndex < ifBody.length; ++elseIndex) {\n          var _instr = ifBody[elseIndex];\n\n          if (_instr.type === \"Instr\" && _instr.id === \"else\") {\n            break;\n          }\n        }\n\n        var consequentInstr = ifBody.slice(0, elseIndex);\n        var alternate = ifBody.slice(elseIndex + 1); // wast sugar\n\n        var testInstrs = [];\n\n        var ifNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.ifInstruction(testIndex, testInstrs, _blocktype, consequentInstr, alternate), endLoc, _startLoc8);\n        }();\n\n        code.push(ifNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"block\") {\n        var _startLoc9 = getPosition();\n\n        var _blocktypeByte2 = readByte();\n\n        eatBytes(1);\n        var _blocktype2 = constants.blockTypes[_blocktypeByte2];\n        dump([_blocktypeByte2], \"blocktype\");\n\n        if (typeof _blocktype2 === \"undefined\") {\n          throw new CompileError(\"Unexpected blocktype: \" + toHex(_blocktypeByte2));\n        }\n\n        var _instr2 = [];\n        parseInstructionBlock(_instr2); // preserve anonymous\n\n        var _label = t.withRaw(t.identifier(getUniqueName(\"block\")), \"\");\n\n        var blockNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.blockInstruction(_label, _instr2, _blocktype2), endLoc, _startLoc9);\n        }();\n\n        code.push(blockNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"call\") {\n        var indexu32 = readU32();\n        var index = indexu32.value;\n        eatBytes(indexu32.nextIndex);\n        dump([index], \"index\");\n\n        var callNode = function () {\n          var endLoc = getPosition();\n          return t.withLoc(t.callInstruction(t.indexLiteral(index)), endLoc, _startLoc6);\n        }();\n\n        code.push(callNode);\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"call_indirect\") {\n        var _startLoc10 = getPosition();\n\n        var indexU32 = readU32();\n        var typeindex = indexU32.value;\n        eatBytes(indexU32.nextIndex);\n        dump([typeindex], \"type index\");\n        var signature = state.typesInModule[typeindex];\n\n        if (typeof signature === \"undefined\") {\n          throw new CompileError(\"call_indirect signature not found (\".concat(typeindex, \")\"));\n        }\n\n        var _callNode = t.callIndirectInstruction(t.signature(signature.params, signature.result), []);\n\n        var flagU32 = readU32();\n        var flag = flagU32.value; // 0x00 - reserved byte\n\n        eatBytes(flagU32.nextIndex);\n\n        if (flag !== 0) {\n          throw new CompileError(\"zero flag expected\");\n        }\n\n        code.push(function () {\n          var endLoc = getPosition();\n          return t.withLoc(_callNode, endLoc, _startLoc10);\n        }());\n        instructionAlreadyCreated = true;\n      } else if (instruction.name === \"br_table\") {\n        var indicesu32 = readU32();\n        var indices = indicesu32.value;\n        eatBytes(indicesu32.nextIndex);\n        dump([indices], \"num indices\");\n\n        for (var i = 0; i <= indices; i++) {\n          var _indexu = readU32();\n\n          var _index = _indexu.value;\n          eatBytes(_indexu.nextIndex);\n          dump([_index], \"index\");\n          args.push(t.numberLiteralFromRaw(_indexu.value.toString(), \"u32\"));\n        }\n      } else if (instructionByte >= 0x28 && instructionByte <= 0x40) {\n        /**\n         * Memory instructions\n         */\n        if (instruction.name === \"grow_memory\" || instruction.name === \"current_memory\") {\n          var _indexU = readU32();\n\n          var _index2 = _indexU.value;\n          eatBytes(_indexU.nextIndex);\n\n          if (_index2 !== 0) {\n            throw new Error(\"zero flag expected\");\n          }\n\n          dump([_index2], \"index\");\n        } else {\n          var aligun32 = readU32();\n          var align = aligun32.value;\n          eatBytes(aligun32.nextIndex);\n          dump([align], \"align\");\n          var offsetu32 = readU32();\n          var _offset2 = offsetu32.value;\n          eatBytes(offsetu32.nextIndex);\n          dump([_offset2], \"offset\");\n        }\n      } else if (instructionByte >= 0x41 && instructionByte <= 0x44) {\n        /**\n         * Numeric instructions\n         */\n        if (instruction.object === \"i32\") {\n          var value32 = read32();\n          var value = value32.value;\n          eatBytes(value32.nextIndex);\n          dump([value], \"i32 value\");\n          args.push(t.numberLiteralFromRaw(value));\n        }\n\n        if (instruction.object === \"u32\") {\n          var valueu32 = readU32();\n          var _value = valueu32.value;\n          eatBytes(valueu32.nextIndex);\n          dump([_value], \"u32 value\");\n          args.push(t.numberLiteralFromRaw(_value));\n        }\n\n        if (instruction.object === \"i64\") {\n          var value64 = read64();\n          var _value2 = value64.value;\n          eatBytes(value64.nextIndex);\n          dump([Number(_value2.toString())], \"i64 value\");\n          var high = _value2.high,\n              low = _value2.low;\n          var _node = {\n            type: \"LongNumberLiteral\",\n            value: {\n              high: high,\n              low: low\n            }\n          };\n          args.push(_node);\n        }\n\n        if (instruction.object === \"u64\") {\n          var valueu64 = readU64();\n          var _value3 = valueu64.value;\n          eatBytes(valueu64.nextIndex);\n          dump([Number(_value3.toString())], \"u64 value\");\n          var _high = _value3.high,\n              _low = _value3.low;\n          var _node2 = {\n            type: \"LongNumberLiteral\",\n            value: {\n              high: _high,\n              low: _low\n            }\n          };\n          args.push(_node2);\n        }\n\n        if (instruction.object === \"f32\") {\n          var valuef32 = readF32();\n          var _value4 = valuef32.value;\n          eatBytes(valuef32.nextIndex);\n          dump([_value4], \"f32 value\");\n          args.push( // $FlowIgnore\n          t.floatLiteral(_value4, valuef32.nan, valuef32.inf, String(_value4)));\n        }\n\n        if (instruction.object === \"f64\") {\n          var valuef64 = readF64();\n          var _value5 = valuef64.value;\n          eatBytes(valuef64.nextIndex);\n          dump([_value5], \"f64 value\");\n          args.push( // $FlowIgnore\n          t.floatLiteral(_value5, valuef64.nan, valuef64.inf, String(_value5)));\n        }\n      } else {\n        for (var _i3 = 0; _i3 < instruction.numberOfArgs; _i3++) {\n          var u32 = readU32();\n          eatBytes(u32.nextIndex);\n          dump([u32.value], \"argument \" + _i3);\n          args.push(t.numberLiteralFromRaw(u32.value));\n        }\n      }\n\n      if (instructionAlreadyCreated === false) {\n        if (typeof instruction.object === \"string\") {\n          var _node3 = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.objectInstruction(instruction.name, instruction.object, args), endLoc, _startLoc6);\n          }();\n\n          code.push(_node3);\n        } else {\n          var _node4 = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.instruction(instruction.name, args), endLoc, _startLoc6);\n          }();\n\n          code.push(_node4);\n        }\n      }\n    }\n  } // https://webassembly.github.io/spec/core/binary/types.html#limits\n\n\n  function parseLimits() {\n    var limitType = readByte();\n    eatBytes(1);\n    dump([limitType], \"limit type\");\n    var min, max;\n\n    if (limitType === 0x01 || limitType === 0x03 // shared limits\n    ) {\n        var u32min = readU32();\n        min = parseInt(u32min.value);\n        eatBytes(u32min.nextIndex);\n        dump([min], \"min\");\n        var u32max = readU32();\n        max = parseInt(u32max.value);\n        eatBytes(u32max.nextIndex);\n        dump([max], \"max\");\n      }\n\n    if (limitType === 0x00) {\n      var _u32min = readU32();\n\n      min = parseInt(_u32min.value);\n      eatBytes(_u32min.nextIndex);\n      dump([min], \"min\");\n    }\n\n    return t.limit(min, max);\n  } // https://webassembly.github.io/spec/core/binary/types.html#binary-tabletype\n\n\n  function parseTableType(index) {\n    var name = t.withRaw(t.identifier(getUniqueName(\"table\")), String(index));\n    var elementTypeByte = readByte();\n    eatBytes(1);\n    dump([elementTypeByte], \"element type\");\n    var elementType = constants.tableTypes[elementTypeByte];\n\n    if (typeof elementType === \"undefined\") {\n      throw new CompileError(\"Unknown element type in table: \" + toHex(elementType));\n    }\n\n    var limits = parseLimits();\n    return t.table(elementType, limits, name);\n  } // https://webassembly.github.io/spec/binary/types.html#global-types\n\n\n  function parseGlobalType() {\n    var valtypeByte = readByte();\n    eatBytes(1);\n    var type = constants.valtypes[valtypeByte];\n    dump([valtypeByte], type);\n\n    if (typeof type === \"undefined\") {\n      throw new CompileError(\"Unknown valtype: \" + toHex(valtypeByte));\n    }\n\n    var globalTypeByte = readByte();\n    eatBytes(1);\n    var globalType = constants.globalTypes[globalTypeByte];\n    dump([globalTypeByte], \"global type (\".concat(globalType, \")\"));\n\n    if (typeof globalType === \"undefined\") {\n      throw new CompileError(\"Invalid mutability: \" + toHex(globalTypeByte));\n    }\n\n    return t.globalType(type, globalType);\n  } // function parseNameModule() {\n  //   const lenu32 = readVaruint32();\n  //   eatBytes(lenu32.nextIndex);\n  //   console.log(\"len\", lenu32);\n  //   const strlen = lenu32.value;\n  //   dump([strlen], \"string length\");\n  //   const bytes = readBytes(strlen);\n  //   eatBytes(strlen);\n  //   const value = utf8.decode(bytes);\n  //   return [t.moduleNameMetadata(value)];\n  // }\n  // this section contains an array of function names and indices\n\n\n  function parseNameSectionFunctions() {\n    var functionNames = [];\n    var numberOfFunctionsu32 = readU32();\n    var numbeOfFunctions = numberOfFunctionsu32.value;\n    eatBytes(numberOfFunctionsu32.nextIndex);\n\n    for (var i = 0; i < numbeOfFunctions; i++) {\n      var indexu32 = readU32();\n      var index = indexu32.value;\n      eatBytes(indexu32.nextIndex);\n      var name = readUTF8String();\n      eatBytes(name.nextIndex);\n      functionNames.push(t.functionNameMetadata(name.value, index));\n    }\n\n    return functionNames;\n  }\n\n  function parseNameSectionLocals() {\n    var localNames = [];\n    var numbeOfFunctionsu32 = readU32();\n    var numbeOfFunctions = numbeOfFunctionsu32.value;\n    eatBytes(numbeOfFunctionsu32.nextIndex);\n\n    for (var i = 0; i < numbeOfFunctions; i++) {\n      var functionIndexu32 = readU32();\n      var functionIndex = functionIndexu32.value;\n      eatBytes(functionIndexu32.nextIndex);\n      var numLocalsu32 = readU32();\n      var numLocals = numLocalsu32.value;\n      eatBytes(numLocalsu32.nextIndex);\n\n      for (var _i4 = 0; _i4 < numLocals; _i4++) {\n        var localIndexu32 = readU32();\n        var localIndex = localIndexu32.value;\n        eatBytes(localIndexu32.nextIndex);\n        var name = readUTF8String();\n        eatBytes(name.nextIndex);\n        localNames.push(t.localNameMetadata(name.value, localIndex, functionIndex));\n      }\n    }\n\n    return localNames;\n  } // this is a custom section used for name resolution\n  // https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section\n\n\n  function parseNameSection(remainingBytes) {\n    var nameMetadata = [];\n    var initialOffset = offset;\n\n    while (offset - initialOffset < remainingBytes) {\n      // name_type\n      var sectionTypeByte = readVaruint7();\n      eatBytes(sectionTypeByte.nextIndex); // name_payload_len\n\n      var subSectionSizeInBytesu32 = readVaruint32();\n      eatBytes(subSectionSizeInBytesu32.nextIndex);\n\n      switch (sectionTypeByte.value) {\n        // case 0: {\n        // TODO(sven): re-enable that\n        // Current status: it seems that when we decode the module's name\n        // no name_payload_len is used.\n        //\n        // See https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-section\n        //\n        // nameMetadata.push(...parseNameModule());\n        // break;\n        // }\n        case 1:\n          {\n            nameMetadata.push.apply(nameMetadata, _toConsumableArray(parseNameSectionFunctions()));\n            break;\n          }\n\n        case 2:\n          {\n            nameMetadata.push.apply(nameMetadata, _toConsumableArray(parseNameSectionLocals()));\n            break;\n          }\n\n        default:\n          {\n            // skip unknown subsection\n            eatBytes(subSectionSizeInBytesu32.value);\n          }\n      }\n    }\n\n    return nameMetadata;\n  } // this is a custom section used for information about the producers\n  // https://github.com/WebAssembly/tool-conventions/blob/master/ProducersSection.md\n\n\n  function parseProducersSection() {\n    var metadata = t.producersSectionMetadata([]); // field_count\n\n    var sectionTypeByte = readVaruint32();\n    eatBytes(sectionTypeByte.nextIndex);\n    dump([sectionTypeByte.value], \"num of producers\");\n    var fields = {\n      language: [],\n      \"processed-by\": [],\n      sdk: []\n    }; // fields\n\n    for (var fieldI = 0; fieldI < sectionTypeByte.value; fieldI++) {\n      // field_name\n      var fieldName = readUTF8String();\n      eatBytes(fieldName.nextIndex); // field_value_count\n\n      var valueCount = readVaruint32();\n      eatBytes(valueCount.nextIndex); // field_values\n\n      for (var producerI = 0; producerI < valueCount.value; producerI++) {\n        var producerName = readUTF8String();\n        eatBytes(producerName.nextIndex);\n        var producerVersion = readUTF8String();\n        eatBytes(producerVersion.nextIndex);\n        fields[fieldName.value].push(t.producerMetadataVersionedName(producerName.value, producerVersion.value));\n      }\n\n      metadata.producers.push(fields[fieldName.value]);\n    }\n\n    return metadata;\n  }\n\n  function parseGlobalSection(numberOfGlobals) {\n    var globals = [];\n    dump([numberOfGlobals], \"num globals\");\n\n    for (var i = 0; i < numberOfGlobals; i++) {\n      var _startLoc11 = getPosition();\n\n      var globalType = parseGlobalType();\n      /**\n       * Global expressions\n       */\n\n      var init = [];\n      parseInstructionBlock(init);\n\n      var node = function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.global(globalType, init), endLoc, _startLoc11);\n      }();\n\n      globals.push(node);\n      state.globalsInModule.push(node);\n    }\n\n    return globals;\n  }\n\n  function parseElemSection(numberOfElements) {\n    var elems = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var _startLoc12 = getPosition();\n\n      var tableindexu32 = readU32();\n      var tableindex = tableindexu32.value;\n      eatBytes(tableindexu32.nextIndex);\n      dump([tableindex], \"table index\");\n      /**\n       * Parse instructions\n       */\n\n      var instr = [];\n      parseInstructionBlock(instr);\n      /**\n       * Parse ( vector function index ) *\n       */\n\n      var indicesu32 = readU32();\n      var indices = indicesu32.value;\n      eatBytes(indicesu32.nextIndex);\n      dump([indices], \"num indices\");\n      var indexValues = [];\n\n      for (var _i5 = 0; _i5 < indices; _i5++) {\n        var indexu32 = readU32();\n        var index = indexu32.value;\n        eatBytes(indexu32.nextIndex);\n        dump([index], \"index\");\n        indexValues.push(t.indexLiteral(index));\n      }\n\n      var elemNode = function () {\n        var endLoc = getPosition();\n        return t.withLoc(t.elem(t.indexLiteral(tableindex), instr, indexValues), endLoc, _startLoc12);\n      }();\n\n      elems.push(elemNode);\n    }\n\n    return elems;\n  } // https://webassembly.github.io/spec/core/binary/types.html#memory-types\n\n\n  function parseMemoryType(i) {\n    var limits = parseLimits();\n    return t.memory(limits, t.indexLiteral(i));\n  } // https://webassembly.github.io/spec/binary/modules.html#table-section\n\n\n  function parseTableSection(numberOfElements) {\n    var tables = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var tablesNode = parseTableType(i);\n      state.tablesInModule.push(tablesNode);\n      tables.push(tablesNode);\n    }\n\n    return tables;\n  } // https://webassembly.github.io/spec/binary/modules.html#memory-section\n\n\n  function parseMemorySection(numberOfElements) {\n    var memories = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var memoryNode = parseMemoryType(i);\n      state.memoriesInModule.push(memoryNode);\n      memories.push(memoryNode);\n    }\n\n    return memories;\n  } // https://webassembly.github.io/spec/binary/modules.html#binary-startsec\n\n\n  function parseStartSection() {\n    var startLoc = getPosition();\n    var u32 = readU32();\n    var startFuncIndex = u32.value;\n    eatBytes(u32.nextIndex);\n    dump([startFuncIndex], \"index\");\n    return function () {\n      var endLoc = getPosition();\n      return t.withLoc(t.start(t.indexLiteral(startFuncIndex)), endLoc, startLoc);\n    }();\n  } // https://webassembly.github.io/spec/binary/modules.html#data-section\n\n\n  function parseDataSection(numberOfElements) {\n    var dataEntries = [];\n    dump([numberOfElements], \"num elements\");\n\n    for (var i = 0; i < numberOfElements; i++) {\n      var memoryIndexu32 = readU32();\n      var memoryIndex = memoryIndexu32.value;\n      eatBytes(memoryIndexu32.nextIndex);\n      dump([memoryIndex], \"memory index\");\n      var instrs = [];\n      parseInstructionBlock(instrs);\n      var hasExtraInstrs = instrs.filter(function (i) {\n        return i.id !== \"end\";\n      }).length !== 1;\n\n      if (hasExtraInstrs) {\n        throw new CompileError(\"data section offset must be a single instruction\");\n      }\n\n      var bytes = parseVec(function (b) {\n        return b;\n      });\n      dump([], \"init\");\n      dataEntries.push(t.data(t.memIndexLiteral(memoryIndex), instrs[0], t.byteArray(bytes)));\n    }\n\n    return dataEntries;\n  } // https://webassembly.github.io/spec/binary/modules.html#binary-section\n\n\n  function parseSection(sectionIndex) {\n    var sectionId = readByte();\n    eatBytes(1);\n\n    if (sectionId >= sectionIndex || sectionIndex === constants.sections.custom) {\n      sectionIndex = sectionId + 1;\n    } else {\n      if (sectionId !== constants.sections.custom) throw new CompileError(\"Unexpected section: \" + toHex(sectionId));\n    }\n\n    var nextSectionIndex = sectionIndex;\n    var startOffset = offset;\n    var startLoc = getPosition();\n    var u32 = readU32();\n    var sectionSizeInBytes = u32.value;\n    eatBytes(u32.nextIndex);\n\n    var sectionSizeInBytesNode = function () {\n      var endLoc = getPosition();\n      return t.withLoc(t.numberLiteralFromRaw(sectionSizeInBytes), endLoc, startLoc);\n    }();\n\n    switch (sectionId) {\n      case constants.sections.type:\n        {\n          dumpSep(\"section Type\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc13 = getPosition();\n\n          var _u = readU32();\n\n          var numberOfTypes = _u.value;\n          eatBytes(_u.nextIndex);\n\n          var _metadata = t.sectionMetadata(\"type\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfTypes), endLoc, _startLoc13);\n          }());\n\n          var _nodes = parseTypeSection(numberOfTypes);\n\n          return {\n            nodes: _nodes,\n            metadata: _metadata,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.table:\n        {\n          dumpSep(\"section Table\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc14 = getPosition();\n\n          var _u2 = readU32();\n\n          var numberOfTable = _u2.value;\n          eatBytes(_u2.nextIndex);\n          dump([numberOfTable], \"num tables\");\n\n          var _metadata2 = t.sectionMetadata(\"table\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfTable), endLoc, _startLoc14);\n          }());\n\n          var _nodes2 = parseTableSection(numberOfTable);\n\n          return {\n            nodes: _nodes2,\n            metadata: _metadata2,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.import:\n        {\n          dumpSep(\"section Import\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc15 = getPosition();\n\n          var numberOfImportsu32 = readU32();\n          var numberOfImports = numberOfImportsu32.value;\n          eatBytes(numberOfImportsu32.nextIndex);\n          dump([numberOfImports], \"number of imports\");\n\n          var _metadata3 = t.sectionMetadata(\"import\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfImports), endLoc, _startLoc15);\n          }());\n\n          var _nodes3 = parseImportSection(numberOfImports);\n\n          return {\n            nodes: _nodes3,\n            metadata: _metadata3,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.func:\n        {\n          dumpSep(\"section Function\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc16 = getPosition();\n\n          var numberOfFunctionsu32 = readU32();\n          var numberOfFunctions = numberOfFunctionsu32.value;\n          eatBytes(numberOfFunctionsu32.nextIndex);\n\n          var _metadata4 = t.sectionMetadata(\"func\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfFunctions), endLoc, _startLoc16);\n          }());\n\n          parseFuncSection(numberOfFunctions);\n          var _nodes4 = [];\n          return {\n            nodes: _nodes4,\n            metadata: _metadata4,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.export:\n        {\n          dumpSep(\"section Export\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc17 = getPosition();\n\n          var _u3 = readU32();\n\n          var numberOfExport = _u3.value;\n          eatBytes(_u3.nextIndex);\n\n          var _metadata5 = t.sectionMetadata(\"export\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfExport), endLoc, _startLoc17);\n          }());\n\n          parseExportSection(numberOfExport);\n          var _nodes5 = [];\n          return {\n            nodes: _nodes5,\n            metadata: _metadata5,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.code:\n        {\n          dumpSep(\"section Code\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc18 = getPosition();\n\n          var _u4 = readU32();\n\n          var numberOfFuncs = _u4.value;\n          eatBytes(_u4.nextIndex);\n\n          var _metadata6 = t.sectionMetadata(\"code\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfFuncs), endLoc, _startLoc18);\n          }());\n\n          if (opts.ignoreCodeSection === true) {\n            var remainingBytes = sectionSizeInBytes - _u4.nextIndex;\n            eatBytes(remainingBytes); // eat the entire section\n          } else {\n            parseCodeSection(numberOfFuncs);\n          }\n\n          var _nodes6 = [];\n          return {\n            nodes: _nodes6,\n            metadata: _metadata6,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.start:\n        {\n          dumpSep(\"section Start\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _metadata7 = t.sectionMetadata(\"start\", startOffset, sectionSizeInBytesNode);\n\n          var _nodes7 = [parseStartSection()];\n          return {\n            nodes: _nodes7,\n            metadata: _metadata7,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.element:\n        {\n          dumpSep(\"section Element\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc19 = getPosition();\n\n          var numberOfElementsu32 = readU32();\n          var numberOfElements = numberOfElementsu32.value;\n          eatBytes(numberOfElementsu32.nextIndex);\n\n          var _metadata8 = t.sectionMetadata(\"element\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfElements), endLoc, _startLoc19);\n          }());\n\n          var _nodes8 = parseElemSection(numberOfElements);\n\n          return {\n            nodes: _nodes8,\n            metadata: _metadata8,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.global:\n        {\n          dumpSep(\"section Global\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc20 = getPosition();\n\n          var numberOfGlobalsu32 = readU32();\n          var numberOfGlobals = numberOfGlobalsu32.value;\n          eatBytes(numberOfGlobalsu32.nextIndex);\n\n          var _metadata9 = t.sectionMetadata(\"global\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(numberOfGlobals), endLoc, _startLoc20);\n          }());\n\n          var _nodes9 = parseGlobalSection(numberOfGlobals);\n\n          return {\n            nodes: _nodes9,\n            metadata: _metadata9,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.memory:\n        {\n          dumpSep(\"section Memory\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _startLoc21 = getPosition();\n\n          var _numberOfElementsu = readU32();\n\n          var _numberOfElements = _numberOfElementsu.value;\n          eatBytes(_numberOfElementsu.nextIndex);\n\n          var _metadata10 = t.sectionMetadata(\"memory\", startOffset, sectionSizeInBytesNode, function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(_numberOfElements), endLoc, _startLoc21);\n          }());\n\n          var _nodes10 = parseMemorySection(_numberOfElements);\n\n          return {\n            nodes: _nodes10,\n            metadata: _metadata10,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n\n      case constants.sections.data:\n        {\n          dumpSep(\"section Data\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n\n          var _metadata11 = t.sectionMetadata(\"data\", startOffset, sectionSizeInBytesNode);\n\n          var _startLoc22 = getPosition();\n\n          var _numberOfElementsu2 = readU32();\n\n          var _numberOfElements2 = _numberOfElementsu2.value;\n          eatBytes(_numberOfElementsu2.nextIndex);\n\n          _metadata11.vectorOfSize = function () {\n            var endLoc = getPosition();\n            return t.withLoc(t.numberLiteralFromRaw(_numberOfElements2), endLoc, _startLoc22);\n          }();\n\n          if (opts.ignoreDataSection === true) {\n            var _remainingBytes = sectionSizeInBytes - _numberOfElementsu2.nextIndex;\n\n            eatBytes(_remainingBytes); // eat the entire section\n\n            dumpSep(\"ignore data (\" + sectionSizeInBytes + \" bytes)\");\n            return {\n              nodes: [],\n              metadata: _metadata11,\n              nextSectionIndex: nextSectionIndex\n            };\n          } else {\n            var _nodes11 = parseDataSection(_numberOfElements2);\n\n            return {\n              nodes: _nodes11,\n              metadata: _metadata11,\n              nextSectionIndex: nextSectionIndex\n            };\n          }\n        }\n\n      case constants.sections.custom:\n        {\n          dumpSep(\"section Custom\");\n          dump([sectionId], \"section code\");\n          dump([sectionSizeInBytes], \"section size\");\n          var _metadata12 = [t.sectionMetadata(\"custom\", startOffset, sectionSizeInBytesNode)];\n          var sectionName = readUTF8String();\n          eatBytes(sectionName.nextIndex);\n          dump([], \"section name (\".concat(sectionName.value, \")\"));\n\n          var _remainingBytes2 = sectionSizeInBytes - sectionName.nextIndex;\n\n          if (sectionName.value === \"name\") {\n            var initialOffset = offset;\n\n            try {\n              _metadata12.push.apply(_metadata12, _toConsumableArray(parseNameSection(_remainingBytes2)));\n            } catch (e) {\n              console.warn(\"Failed to decode custom \\\"name\\\" section @\".concat(offset, \"; ignoring (\").concat(e.message, \").\"));\n              eatBytes(offset - (initialOffset + _remainingBytes2));\n            }\n          } else if (sectionName.value === \"producers\") {\n            var _initialOffset = offset;\n\n            try {\n              _metadata12.push(parseProducersSection());\n            } catch (e) {\n              console.warn(\"Failed to decode custom \\\"producers\\\" section @\".concat(offset, \"; ignoring (\").concat(e.message, \").\"));\n              eatBytes(offset - (_initialOffset + _remainingBytes2));\n            }\n          } else {\n            // We don't parse the custom section\n            eatBytes(_remainingBytes2);\n            dumpSep(\"ignore custom \" + JSON.stringify(sectionName.value) + \" section (\" + _remainingBytes2 + \" bytes)\");\n          }\n\n          return {\n            nodes: [],\n            metadata: _metadata12,\n            nextSectionIndex: nextSectionIndex\n          };\n        }\n    }\n\n    throw new CompileError(\"Unexpected section: \" + toHex(sectionId));\n  }\n\n  parseModuleHeader();\n  parseVersion();\n  var moduleFields = [];\n  var sectionIndex = 0;\n  var moduleMetadata = {\n    sections: [],\n    functionNames: [],\n    localNames: [],\n    producers: []\n  };\n  /**\n   * All the generate declaration are going to be stored in our state\n   */\n\n  while (offset < buf.length) {\n    var _parseSection = parseSection(sectionIndex),\n        _nodes12 = _parseSection.nodes,\n        _metadata13 = _parseSection.metadata,\n        nextSectionIndex = _parseSection.nextSectionIndex;\n\n    moduleFields.push.apply(moduleFields, _toConsumableArray(_nodes12));\n    var metadataArray = Array.isArray(_metadata13) ? _metadata13 : [_metadata13];\n    metadataArray.forEach(function (metadataItem) {\n      if (metadataItem.type === \"FunctionNameMetadata\") {\n        moduleMetadata.functionNames.push(metadataItem);\n      } else if (metadataItem.type === \"LocalNameMetadata\") {\n        moduleMetadata.localNames.push(metadataItem);\n      } else if (metadataItem.type === \"ProducersSectionMetadata\") {\n        moduleMetadata.producers.push(metadataItem);\n      } else {\n        moduleMetadata.sections.push(metadataItem);\n      }\n    }); // Ignore custom section\n\n    if (nextSectionIndex) {\n      sectionIndex = nextSectionIndex;\n    }\n  }\n  /**\n   * Transform the state into AST nodes\n   */\n\n\n  var funcIndex = 0;\n  state.functionsInModule.forEach(function (func) {\n    var params = func.signature.params;\n    var result = func.signature.result;\n    var body = []; // External functions doesn't provide any code, can skip it here\n\n    if (func.isExternal === true) {\n      return;\n    }\n\n    var decodedElementInCodeSection = state.elementsInCodeSection[funcIndex];\n\n    if (opts.ignoreCodeSection === false) {\n      if (typeof decodedElementInCodeSection === \"undefined\") {\n        throw new CompileError(\"func \" + toHex(funcIndex) + \" code not found\");\n      }\n\n      body = decodedElementInCodeSection.code;\n    }\n\n    funcIndex++;\n    var funcNode = t.func(func.id, t.signature(params, result), body);\n\n    if (func.isExternal === true) {\n      funcNode.isExternal = func.isExternal;\n    } // Add function position in the binary if possible\n\n\n    if (opts.ignoreCodeSection === false) {\n      var _startLoc23 = decodedElementInCodeSection.startLoc,\n          endLoc = decodedElementInCodeSection.endLoc,\n          bodySize = decodedElementInCodeSection.bodySize;\n      funcNode = t.withLoc(funcNode, endLoc, _startLoc23);\n      funcNode.metadata = {\n        bodySize: bodySize\n      };\n    }\n\n    moduleFields.push(funcNode);\n  });\n  state.elementsInExportSection.forEach(function (moduleExport) {\n    /**\n     * If the export has no id, we won't be able to call it from the outside\n     * so we can omit it\n     */\n    if (moduleExport.id != null) {\n      moduleFields.push(t.withLoc(t.moduleExport(moduleExport.name, t.moduleExportDescr(moduleExport.type, moduleExport.id)), moduleExport.endLoc, moduleExport.startLoc));\n    }\n  });\n  dumpSep(\"end of program\");\n  var module = t.module(null, moduleFields, t.moduleMetadata(moduleMetadata.sections, moduleMetadata.functionNames, moduleMetadata.localNames, moduleMetadata.producers));\n  return t.program([module]);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}