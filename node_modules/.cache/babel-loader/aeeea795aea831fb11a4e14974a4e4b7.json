{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ChunkGroup = require(\"./ChunkGroup\");\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/**\n * Entrypoint serves as an encapsulation primitive for chunks that are\n * a part of a single ChunkGroup. They represent all bundles that need to be loaded for a\n * single instance of a page. Multi-page application architectures will typically yield multiple Entrypoint objects\n * inside of the compilation, whereas a Single Page App may only contain one with many lazy-loaded chunks.\n */\n\n\nclass Entrypoint extends ChunkGroup {\n  /**\n   * Creates an instance of Entrypoint.\n   * @param {string} name the name of the entrypoint\n   */\n  constructor(name) {\n    super(name);\n    /** @type {Chunk=} */\n\n    this.runtimeChunk = undefined;\n  }\n  /**\n   * isInitial will always return true for Entrypoint ChunkGroup.\n   * @returns {true} returns true as all entrypoints are initial ChunkGroups\n   */\n\n\n  isInitial() {\n    return true;\n  }\n  /**\n   * Sets the runtimeChunk for an entrypoint.\n   * @param {Chunk} chunk the chunk being set as the runtime chunk.\n   * @returns {void}\n   */\n\n\n  setRuntimeChunk(chunk) {\n    this.runtimeChunk = chunk;\n  }\n  /**\n   * Fetches the chunk reference containing the webpack bootstrap code\n   * @returns {Chunk} returns the runtime chunk or first chunk in `this.chunks`\n   */\n\n\n  getRuntimeChunk() {\n    return this.runtimeChunk || this.chunks[0];\n  }\n  /**\n   * @param {Chunk} oldChunk chunk to be replaced\n   * @param {Chunk} newChunk New chunk that will be replaced with\n   * @returns {boolean} returns true if the replacement was successful\n   */\n\n\n  replaceChunk(oldChunk, newChunk) {\n    if (this.runtimeChunk === oldChunk) this.runtimeChunk = newChunk;\n    return super.replaceChunk(oldChunk, newChunk);\n  }\n\n}\n\nmodule.exports = Entrypoint;","map":{"version":3,"names":["ChunkGroup","require","Entrypoint","constructor","name","runtimeChunk","undefined","isInitial","setRuntimeChunk","chunk","getRuntimeChunk","chunks","replaceChunk","oldChunk","newChunk","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/Entrypoint.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ChunkGroup = require(\"./ChunkGroup\");\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/**\n * Entrypoint serves as an encapsulation primitive for chunks that are\n * a part of a single ChunkGroup. They represent all bundles that need to be loaded for a\n * single instance of a page. Multi-page application architectures will typically yield multiple Entrypoint objects\n * inside of the compilation, whereas a Single Page App may only contain one with many lazy-loaded chunks.\n */\nclass Entrypoint extends ChunkGroup {\n\t/**\n\t * Creates an instance of Entrypoint.\n\t * @param {string} name the name of the entrypoint\n\t */\n\tconstructor(name) {\n\t\tsuper(name);\n\t\t/** @type {Chunk=} */\n\t\tthis.runtimeChunk = undefined;\n\t}\n\n\t/**\n\t * isInitial will always return true for Entrypoint ChunkGroup.\n\t * @returns {true} returns true as all entrypoints are initial ChunkGroups\n\t */\n\tisInitial() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Sets the runtimeChunk for an entrypoint.\n\t * @param {Chunk} chunk the chunk being set as the runtime chunk.\n\t * @returns {void}\n\t */\n\tsetRuntimeChunk(chunk) {\n\t\tthis.runtimeChunk = chunk;\n\t}\n\n\t/**\n\t * Fetches the chunk reference containing the webpack bootstrap code\n\t * @returns {Chunk} returns the runtime chunk or first chunk in `this.chunks`\n\t */\n\tgetRuntimeChunk() {\n\t\treturn this.runtimeChunk || this.chunks[0];\n\t}\n\n\t/**\n\t * @param {Chunk} oldChunk chunk to be replaced\n\t * @param {Chunk} newChunk New chunk that will be replaced with\n\t * @returns {boolean} returns true if the replacement was successful\n\t */\n\treplaceChunk(oldChunk, newChunk) {\n\t\tif (this.runtimeChunk === oldChunk) this.runtimeChunk = newChunk;\n\t\treturn super.replaceChunk(oldChunk, newChunk);\n\t}\n}\n\nmodule.exports = Entrypoint;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,UAAN,SAAyBF,UAAzB,CAAoC;EACnC;AACD;AACA;AACA;EACCG,WAAW,CAACC,IAAD,EAAO;IACjB,MAAMA,IAAN;IACA;;IACA,KAAKC,YAAL,GAAoBC,SAApB;EACA;EAED;AACD;AACA;AACA;;;EACCC,SAAS,GAAG;IACX,OAAO,IAAP;EACA;EAED;AACD;AACA;AACA;AACA;;;EACCC,eAAe,CAACC,KAAD,EAAQ;IACtB,KAAKJ,YAAL,GAAoBI,KAApB;EACA;EAED;AACD;AACA;AACA;;;EACCC,eAAe,GAAG;IACjB,OAAO,KAAKL,YAAL,IAAqB,KAAKM,MAAL,CAAY,CAAZ,CAA5B;EACA;EAED;AACD;AACA;AACA;AACA;;;EACCC,YAAY,CAACC,QAAD,EAAWC,QAAX,EAAqB;IAChC,IAAI,KAAKT,YAAL,KAAsBQ,QAA1B,EAAoC,KAAKR,YAAL,GAAoBS,QAApB;IACpC,OAAO,MAAMF,YAAN,CAAmBC,QAAnB,EAA6BC,QAA7B,CAAP;EACA;;AA5CkC;;AA+CpCC,MAAM,CAACC,OAAP,GAAiBd,UAAjB"},"metadata":{},"sourceType":"script"}