{"ast":null,"code":"'use strict';\n\nconst {\n  TimeoutError,\n  AbortError\n} = require('./error');\n\nconst {\n  Response,\n  Request,\n  Headers,\n  default: fetch\n} = require('../fetch');\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\n\n\nconst fetchWithProgress = function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const request = new XMLHttpRequest();\n  request.open(options.method || 'GET', url.toString(), true);\n  const {\n    timeout,\n    headers\n  } = options;\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout;\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType);\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value);\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort();\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress;\n  } // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n\n\n  request.responseType = 'arraybuffer';\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = event => {\n      switch (event.type) {\n        case 'error':\n          {\n            resolve(Response.error());\n            break;\n          }\n\n        case 'load':\n          {\n            resolve(new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            }));\n            break;\n          }\n\n        case 'timeout':\n          {\n            reject(new TimeoutError());\n            break;\n          }\n\n        case 'abort':\n          {\n            reject(new AbortError());\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    };\n\n    request.onerror = handleEvent;\n    request.onload = handleEvent;\n    request.ontimeout = handleEvent;\n    request.onabort = handleEvent; // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n\n    request.send(options.body);\n  });\n};\n\nconst fetchWithStreaming = fetch;\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\n\nconst fetchWith = function (url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return options.onUploadProgress != null ? fetchWithProgress(url, options) : fetchWithStreaming(url, options);\n};\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\n\n\nconst parseHeaders = input => {\n  const headers = new Headers();\n\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ');\n\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1));\n    }\n  }\n\n  return headers;\n};\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor(url, body, options) {\n    super(body, options);\n    Object.defineProperty(this, 'url', {\n      value: url\n    });\n  }\n\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n};","map":{"version":3,"names":["TimeoutError","AbortError","require","Response","Request","Headers","default","fetch","fetchWithProgress","url","options","request","XMLHttpRequest","open","method","toString","timeout","headers","Infinity","overrideMimeType","name","value","setRequestHeader","signal","onabort","abort","onUploadProgress","upload","onprogress","responseType","Promise","resolve","reject","handleEvent","event","type","error","ResponseWithURL","responseURL","response","status","statusText","parseHeaders","getAllResponseHeaders","onerror","onload","ontimeout","send","body","fetchWithStreaming","fetchWith","input","line","trim","split","index","indexOf","set","slice","constructor","Object","defineProperty","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-utils/src/http/fetch.browser.js"],"sourcesContent":["'use strict'\n\nconst { TimeoutError, AbortError } = require('./error')\nconst { Response, Request, Headers, default: fetch } = require('../fetch')\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout, headers } = options\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer'\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body)\n  })\n}\n\nconst fetchWithStreaming = fetch\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nconst fetchWith = (url, options = {}) =>\n  (options.onUploadProgress != null)\n    ? fetchWithProgress(url, options)\n    : fetchWithStreaming(url, options)\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}