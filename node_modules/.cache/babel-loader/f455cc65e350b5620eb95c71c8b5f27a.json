{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../../schemas/plugins/optimize/MinChunkSizePlugin.json\");\n/** @typedef {import(\"../../declarations/plugins/optimize/MinChunkSizePlugin\").MinChunkSizePluginOptions} MinChunkSizePluginOptions */\n\n\nclass MinChunkSizePlugin {\n  /**\n   * @param {MinChunkSizePluginOptions} options options object\n   */\n  constructor(options) {\n    validateOptions(schema, options, \"Min Chunk Size Plugin\");\n    this.options = options;\n  }\n\n  apply(compiler) {\n    const options = this.options;\n    const minChunkSize = options.minChunkSize;\n    compiler.hooks.compilation.tap(\"MinChunkSizePlugin\", compilation => {\n      compilation.hooks.optimizeChunksAdvanced.tap(\"MinChunkSizePlugin\", chunks => {\n        const equalOptions = {\n          chunkOverhead: 1,\n          entryChunkMultiplicator: 1\n        };\n        const sortedSizeFilteredExtendedPairCombinations = chunks.reduce((combinations, a, idx) => {\n          // create combination pairs\n          for (let i = 0; i < idx; i++) {\n            const b = chunks[i];\n            combinations.push([b, a]);\n          }\n\n          return combinations;\n        }, []).filter(pair => {\n          // check if one of the chunks sizes is smaller than the minChunkSize\n          const p0SmallerThanMinChunkSize = pair[0].size(equalOptions) < minChunkSize;\n          const p1SmallerThanMinChunkSize = pair[1].size(equalOptions) < minChunkSize;\n          return p0SmallerThanMinChunkSize || p1SmallerThanMinChunkSize;\n        }).map(pair => {\n          // extend combination pairs with size and integrated size\n          const a = pair[0].size(options);\n          const b = pair[1].size(options);\n          const ab = pair[0].integratedSize(pair[1], options);\n          return [a + b - ab, ab, pair[0], pair[1]];\n        }).filter(pair => {\n          // filter pairs that do not have an integratedSize\n          // meaning they can NOT be integrated!\n          return pair[1] !== false;\n        }).sort((a, b) => {\n          // sadly javascript does an inplace sort here\n          // sort by size\n          const diff = b[0] - a[0];\n          if (diff !== 0) return diff;\n          return a[1] - b[1];\n        });\n        if (sortedSizeFilteredExtendedPairCombinations.length === 0) return;\n        const pair = sortedSizeFilteredExtendedPairCombinations[0];\n        pair[2].integrate(pair[3], \"min-size\");\n        chunks.splice(chunks.indexOf(pair[3]), 1);\n        return true;\n      });\n    });\n  }\n\n}\n\nmodule.exports = MinChunkSizePlugin;","map":{"version":3,"names":["validateOptions","require","schema","MinChunkSizePlugin","constructor","options","apply","compiler","minChunkSize","hooks","compilation","tap","optimizeChunksAdvanced","chunks","equalOptions","chunkOverhead","entryChunkMultiplicator","sortedSizeFilteredExtendedPairCombinations","reduce","combinations","a","idx","i","b","push","filter","pair","p0SmallerThanMinChunkSize","size","p1SmallerThanMinChunkSize","map","ab","integratedSize","sort","diff","length","integrate","splice","indexOf","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/optimize/MinChunkSizePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../../schemas/plugins/optimize/MinChunkSizePlugin.json\");\n\n/** @typedef {import(\"../../declarations/plugins/optimize/MinChunkSizePlugin\").MinChunkSizePluginOptions} MinChunkSizePluginOptions */\n\nclass MinChunkSizePlugin {\n\t/**\n\t * @param {MinChunkSizePluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidateOptions(schema, options, \"Min Chunk Size Plugin\");\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tconst minChunkSize = options.minChunkSize;\n\t\tcompiler.hooks.compilation.tap(\"MinChunkSizePlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeChunksAdvanced.tap(\n\t\t\t\t\"MinChunkSizePlugin\",\n\t\t\t\tchunks => {\n\t\t\t\t\tconst equalOptions = {\n\t\t\t\t\t\tchunkOverhead: 1,\n\t\t\t\t\t\tentryChunkMultiplicator: 1\n\t\t\t\t\t};\n\n\t\t\t\t\tconst sortedSizeFilteredExtendedPairCombinations = chunks\n\t\t\t\t\t\t.reduce((combinations, a, idx) => {\n\t\t\t\t\t\t\t// create combination pairs\n\t\t\t\t\t\t\tfor (let i = 0; i < idx; i++) {\n\t\t\t\t\t\t\t\tconst b = chunks[i];\n\t\t\t\t\t\t\t\tcombinations.push([b, a]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn combinations;\n\t\t\t\t\t\t}, [])\n\t\t\t\t\t\t.filter(pair => {\n\t\t\t\t\t\t\t// check if one of the chunks sizes is smaller than the minChunkSize\n\t\t\t\t\t\t\tconst p0SmallerThanMinChunkSize =\n\t\t\t\t\t\t\t\tpair[0].size(equalOptions) < minChunkSize;\n\t\t\t\t\t\t\tconst p1SmallerThanMinChunkSize =\n\t\t\t\t\t\t\t\tpair[1].size(equalOptions) < minChunkSize;\n\t\t\t\t\t\t\treturn p0SmallerThanMinChunkSize || p1SmallerThanMinChunkSize;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.map(pair => {\n\t\t\t\t\t\t\t// extend combination pairs with size and integrated size\n\t\t\t\t\t\t\tconst a = pair[0].size(options);\n\t\t\t\t\t\t\tconst b = pair[1].size(options);\n\t\t\t\t\t\t\tconst ab = pair[0].integratedSize(pair[1], options);\n\t\t\t\t\t\t\treturn [a + b - ab, ab, pair[0], pair[1]];\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter(pair => {\n\t\t\t\t\t\t\t// filter pairs that do not have an integratedSize\n\t\t\t\t\t\t\t// meaning they can NOT be integrated!\n\t\t\t\t\t\t\treturn pair[1] !== false;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.sort((a, b) => {\n\t\t\t\t\t\t\t// sadly javascript does an inplace sort here\n\t\t\t\t\t\t\t// sort by size\n\t\t\t\t\t\t\tconst diff = b[0] - a[0];\n\t\t\t\t\t\t\tif (diff !== 0) return diff;\n\t\t\t\t\t\t\treturn a[1] - b[1];\n\t\t\t\t\t\t});\n\n\t\t\t\t\tif (sortedSizeFilteredExtendedPairCombinations.length === 0) return;\n\n\t\t\t\t\tconst pair = sortedSizeFilteredExtendedPairCombinations[0];\n\n\t\t\t\t\tpair[2].integrate(pair[3], \"min-size\");\n\t\t\t\t\tchunks.splice(chunks.indexOf(pair[3]), 1);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\nmodule.exports = MinChunkSizePlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}