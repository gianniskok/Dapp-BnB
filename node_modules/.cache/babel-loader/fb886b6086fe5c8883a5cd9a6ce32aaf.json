{"ast":null,"code":"'use strict';\n/**\n * Local dependencies\n */\n\nvar compilers = require('./lib/compilers');\n\nvar parsers = require('./lib/parsers');\n/**\n * Module dependencies\n */\n\n\nvar debug = require('debug')('expand-brackets');\n\nvar extend = require('extend-shallow');\n\nvar Snapdragon = require('snapdragon');\n\nvar toRegex = require('to-regex');\n/**\n * Parses the given POSIX character class `pattern` and returns a\n * string that can be used for creating regular expressions for matching.\n *\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object}\n * @api public\n */\n\n\nfunction brackets(pattern, options) {\n  debug('initializing from <%s>', __filename);\n  var res = brackets.create(pattern, options);\n  return res.output;\n}\n/**\n * Takes an array of strings and a POSIX character class pattern, and returns a new\n * array with only the strings that matched the pattern.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]'));\n * //=> ['a']\n *\n * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]+'));\n * //=> ['a', 'ab']\n * ```\n * @param {Array} `arr` Array of strings to match\n * @param {String} `pattern` POSIX character class pattern(s)\n * @param {Object} `options`\n * @return {Array}\n * @api public\n */\n\n\nbrackets.match = function (arr, pattern, options) {\n  arr = [].concat(arr);\n  var opts = extend({}, options);\n  var isMatch = brackets.matcher(pattern, opts);\n  var len = arr.length;\n  var idx = -1;\n  var res = [];\n\n  while (++idx < len) {\n    var ele = arr[idx];\n\n    if (isMatch(ele)) {\n      res.push(ele);\n    }\n  }\n\n  if (res.length === 0) {\n    if (opts.failglob === true) {\n      throw new Error('no matches found for \"' + pattern + '\"');\n    }\n\n    if (opts.nonull === true || opts.nullglob === true) {\n      return [pattern.split('\\\\').join('')];\n    }\n  }\n\n  return res;\n};\n/**\n * Returns true if the specified `string` matches the given\n * brackets `pattern`.\n *\n * ```js\n * var brackets = require('expand-brackets');\n *\n * console.log(brackets.isMatch('a.a', '[[:alpha:]].[[:alpha:]]'));\n * //=> true\n * console.log(brackets.isMatch('1.2', '[[:alpha:]].[[:alpha:]]'));\n * //=> false\n * ```\n * @param {String} `string` String to match\n * @param {String} `pattern` Poxis pattern\n * @param {String} `options`\n * @return {Boolean}\n * @api public\n */\n\n\nbrackets.isMatch = function (str, pattern, options) {\n  return brackets.matcher(pattern, options)(str);\n};\n/**\n * Takes a POSIX character class pattern and returns a matcher function. The returned\n * function takes the string to match as its only argument.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * var isMatch = brackets.matcher('[[:lower:]].[[:upper:]]');\n *\n * console.log(isMatch('a.a'));\n * //=> false\n * console.log(isMatch('a.A'));\n * //=> true\n * ```\n * @param {String} `pattern` Poxis pattern\n * @param {String} `options`\n * @return {Boolean}\n * @api public\n */\n\n\nbrackets.matcher = function (pattern, options) {\n  var re = brackets.makeRe(pattern, options);\n  return function (str) {\n    return re.test(str);\n  };\n};\n/**\n * Create a regular expression from the given `pattern`.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * var re = brackets.makeRe('[[:alpha:]]');\n * console.log(re);\n * //=> /^(?:[a-zA-Z])$/\n * ```\n * @param {String} `pattern` The pattern to convert to regex.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\n\nbrackets.makeRe = function (pattern, options) {\n  var res = brackets.create(pattern, options);\n  var opts = extend({\n    strictErrors: false\n  }, options);\n  return toRegex(res.output, opts);\n};\n/**\n * Parses the given POSIX character class `pattern` and returns an object\n * with the compiled `output` and optional source `map`.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * console.log(brackets('[[:alpha:]]'));\n * // { options: { source: 'string' },\n * //   input: '[[:alpha:]]',\n * //   state: {},\n * //   compilers:\n * //    { eos: [Function],\n * //      noop: [Function],\n * //      bos: [Function],\n * //      not: [Function],\n * //      escape: [Function],\n * //      text: [Function],\n * //      posix: [Function],\n * //      bracket: [Function],\n * //      'bracket.open': [Function],\n * //      'bracket.inner': [Function],\n * //      'bracket.literal': [Function],\n * //      'bracket.close': [Function] },\n * //   output: '[a-zA-Z]',\n * //   ast:\n * //    { type: 'root',\n * //      errors: [],\n * //      nodes: [ [Object], [Object], [Object] ] },\n * //   parsingErrors: [] }\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object}\n * @api public\n */\n\n\nbrackets.create = function (pattern, options) {\n  var snapdragon = options && options.snapdragon || new Snapdragon(options);\n  compilers(snapdragon);\n  parsers(snapdragon);\n  var ast = snapdragon.parse(pattern, options);\n  ast.input = pattern;\n  var res = snapdragon.compile(ast, options);\n  res.input = pattern;\n  return res;\n};\n/**\n * Expose `brackets` constructor, parsers and compilers\n */\n\n\nbrackets.compilers = compilers;\nbrackets.parsers = parsers;\n/**\n * Expose `brackets`\n * @type {Function}\n */\n\nmodule.exports = brackets;","map":{"version":3,"names":["compilers","require","parsers","debug","extend","Snapdragon","toRegex","brackets","pattern","options","__filename","res","create","output","match","arr","concat","opts","isMatch","matcher","len","length","idx","ele","push","failglob","Error","nonull","nullglob","split","join","str","re","makeRe","test","strictErrors","snapdragon","ast","parse","input","compile","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/expand-brackets/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Local dependencies\n */\n\nvar compilers = require('./lib/compilers');\nvar parsers = require('./lib/parsers');\n\n/**\n * Module dependencies\n */\n\nvar debug = require('debug')('expand-brackets');\nvar extend = require('extend-shallow');\nvar Snapdragon = require('snapdragon');\nvar toRegex = require('to-regex');\n\n/**\n * Parses the given POSIX character class `pattern` and returns a\n * string that can be used for creating regular expressions for matching.\n *\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object}\n * @api public\n */\n\nfunction brackets(pattern, options) {\n  debug('initializing from <%s>', __filename);\n  var res = brackets.create(pattern, options);\n  return res.output;\n}\n\n/**\n * Takes an array of strings and a POSIX character class pattern, and returns a new\n * array with only the strings that matched the pattern.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]'));\n * //=> ['a']\n *\n * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]+'));\n * //=> ['a', 'ab']\n * ```\n * @param {Array} `arr` Array of strings to match\n * @param {String} `pattern` POSIX character class pattern(s)\n * @param {Object} `options`\n * @return {Array}\n * @api public\n */\n\nbrackets.match = function(arr, pattern, options) {\n  arr = [].concat(arr);\n  var opts = extend({}, options);\n  var isMatch = brackets.matcher(pattern, opts);\n  var len = arr.length;\n  var idx = -1;\n  var res = [];\n\n  while (++idx < len) {\n    var ele = arr[idx];\n    if (isMatch(ele)) {\n      res.push(ele);\n    }\n  }\n\n  if (res.length === 0) {\n    if (opts.failglob === true) {\n      throw new Error('no matches found for \"' + pattern + '\"');\n    }\n\n    if (opts.nonull === true || opts.nullglob === true) {\n      return [pattern.split('\\\\').join('')];\n    }\n  }\n  return res;\n};\n\n/**\n * Returns true if the specified `string` matches the given\n * brackets `pattern`.\n *\n * ```js\n * var brackets = require('expand-brackets');\n *\n * console.log(brackets.isMatch('a.a', '[[:alpha:]].[[:alpha:]]'));\n * //=> true\n * console.log(brackets.isMatch('1.2', '[[:alpha:]].[[:alpha:]]'));\n * //=> false\n * ```\n * @param {String} `string` String to match\n * @param {String} `pattern` Poxis pattern\n * @param {String} `options`\n * @return {Boolean}\n * @api public\n */\n\nbrackets.isMatch = function(str, pattern, options) {\n  return brackets.matcher(pattern, options)(str);\n};\n\n/**\n * Takes a POSIX character class pattern and returns a matcher function. The returned\n * function takes the string to match as its only argument.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * var isMatch = brackets.matcher('[[:lower:]].[[:upper:]]');\n *\n * console.log(isMatch('a.a'));\n * //=> false\n * console.log(isMatch('a.A'));\n * //=> true\n * ```\n * @param {String} `pattern` Poxis pattern\n * @param {String} `options`\n * @return {Boolean}\n * @api public\n */\n\nbrackets.matcher = function(pattern, options) {\n  var re = brackets.makeRe(pattern, options);\n  return function(str) {\n    return re.test(str);\n  };\n};\n\n/**\n * Create a regular expression from the given `pattern`.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * var re = brackets.makeRe('[[:alpha:]]');\n * console.log(re);\n * //=> /^(?:[a-zA-Z])$/\n * ```\n * @param {String} `pattern` The pattern to convert to regex.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\nbrackets.makeRe = function(pattern, options) {\n  var res = brackets.create(pattern, options);\n  var opts = extend({strictErrors: false}, options);\n  return toRegex(res.output, opts);\n};\n\n/**\n * Parses the given POSIX character class `pattern` and returns an object\n * with the compiled `output` and optional source `map`.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * console.log(brackets('[[:alpha:]]'));\n * // { options: { source: 'string' },\n * //   input: '[[:alpha:]]',\n * //   state: {},\n * //   compilers:\n * //    { eos: [Function],\n * //      noop: [Function],\n * //      bos: [Function],\n * //      not: [Function],\n * //      escape: [Function],\n * //      text: [Function],\n * //      posix: [Function],\n * //      bracket: [Function],\n * //      'bracket.open': [Function],\n * //      'bracket.inner': [Function],\n * //      'bracket.literal': [Function],\n * //      'bracket.close': [Function] },\n * //   output: '[a-zA-Z]',\n * //   ast:\n * //    { type: 'root',\n * //      errors: [],\n * //      nodes: [ [Object], [Object], [Object] ] },\n * //   parsingErrors: [] }\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object}\n * @api public\n */\n\nbrackets.create = function(pattern, options) {\n  var snapdragon = (options && options.snapdragon) || new Snapdragon(options);\n  compilers(snapdragon);\n  parsers(snapdragon);\n\n  var ast = snapdragon.parse(pattern, options);\n  ast.input = pattern;\n  var res = snapdragon.compile(ast, options);\n  res.input = pattern;\n  return res;\n};\n\n/**\n * Expose `brackets` constructor, parsers and compilers\n */\n\nbrackets.compilers = compilers;\nbrackets.parsers = parsers;\n\n/**\n * Expose `brackets`\n * @type {Function}\n */\n\nmodule.exports = brackets;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}