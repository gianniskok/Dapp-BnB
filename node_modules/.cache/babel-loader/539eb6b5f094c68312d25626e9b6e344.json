{"ast":null,"code":"/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./DependenciesBlock\")} DependenciesBlock */\n\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n\n/**\n * @param {ChunkGroup} chunkGroup the ChunkGroup to connect\n * @param {Chunk} chunk chunk to tie to ChunkGroup\n * @returns {void}\n */\nconst connectChunkGroupAndChunk = (chunkGroup, chunk) => {\n  if (chunkGroup.pushChunk(chunk)) {\n    chunk.addGroup(chunkGroup);\n  }\n};\n/**\n * @param {ChunkGroup} parent parent ChunkGroup to connect\n * @param {ChunkGroup} child child ChunkGroup to connect\n * @returns {void}\n */\n\n\nconst connectChunkGroupParentAndChild = (parent, child) => {\n  if (parent.addChild(child)) {\n    child.addParent(parent);\n  }\n};\n/**\n * @param {Chunk} chunk Chunk to connect to Module\n * @param {Module} module Module to connect to Chunk\n * @returns {void}\n */\n\n\nconst connectChunkAndModule = (chunk, module) => {\n  if (module.addChunk(chunk)) {\n    chunk.addModule(module);\n  }\n};\n/**\n * @param {Chunk} chunk Chunk being disconnected\n * @param {Module} module Module being disconnected\n * @returns {void}\n */\n\n\nconst disconnectChunkAndModule = (chunk, module) => {\n  chunk.removeModule(module);\n  module.removeChunk(chunk);\n};\n/**\n * @param {AsyncDependenciesBlock} depBlock DepBlock being tied to ChunkGroup\n * @param {ChunkGroup} chunkGroup ChunkGroup being tied to DepBlock\n * @returns {void}\n */\n\n\nconst connectDependenciesBlockAndChunkGroup = (depBlock, chunkGroup) => {\n  if (chunkGroup.addBlock(depBlock)) {\n    depBlock.chunkGroup = chunkGroup;\n  }\n};\n\nexports.connectChunkGroupAndChunk = connectChunkGroupAndChunk;\nexports.connectChunkGroupParentAndChild = connectChunkGroupParentAndChild;\nexports.connectChunkAndModule = connectChunkAndModule;\nexports.disconnectChunkAndModule = disconnectChunkAndModule;\nexports.connectDependenciesBlockAndChunkGroup = connectDependenciesBlockAndChunkGroup;","map":{"version":3,"names":["connectChunkGroupAndChunk","chunkGroup","chunk","pushChunk","addGroup","connectChunkGroupParentAndChild","parent","child","addChild","addParent","connectChunkAndModule","module","addChunk","addModule","disconnectChunkAndModule","removeModule","removeChunk","connectDependenciesBlockAndChunkGroup","depBlock","addBlock","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/GraphHelpers.js"],"sourcesContent":["/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./DependenciesBlock\")} DependenciesBlock */\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n\n/**\n * @param {ChunkGroup} chunkGroup the ChunkGroup to connect\n * @param {Chunk} chunk chunk to tie to ChunkGroup\n * @returns {void}\n */\nconst connectChunkGroupAndChunk = (chunkGroup, chunk) => {\n\tif (chunkGroup.pushChunk(chunk)) {\n\t\tchunk.addGroup(chunkGroup);\n\t}\n};\n\n/**\n * @param {ChunkGroup} parent parent ChunkGroup to connect\n * @param {ChunkGroup} child child ChunkGroup to connect\n * @returns {void}\n */\nconst connectChunkGroupParentAndChild = (parent, child) => {\n\tif (parent.addChild(child)) {\n\t\tchild.addParent(parent);\n\t}\n};\n\n/**\n * @param {Chunk} chunk Chunk to connect to Module\n * @param {Module} module Module to connect to Chunk\n * @returns {void}\n */\nconst connectChunkAndModule = (chunk, module) => {\n\tif (module.addChunk(chunk)) {\n\t\tchunk.addModule(module);\n\t}\n};\n\n/**\n * @param {Chunk} chunk Chunk being disconnected\n * @param {Module} module Module being disconnected\n * @returns {void}\n */\nconst disconnectChunkAndModule = (chunk, module) => {\n\tchunk.removeModule(module);\n\tmodule.removeChunk(chunk);\n};\n\n/**\n * @param {AsyncDependenciesBlock} depBlock DepBlock being tied to ChunkGroup\n * @param {ChunkGroup} chunkGroup ChunkGroup being tied to DepBlock\n * @returns {void}\n */\nconst connectDependenciesBlockAndChunkGroup = (depBlock, chunkGroup) => {\n\tif (chunkGroup.addBlock(depBlock)) {\n\t\tdepBlock.chunkGroup = chunkGroup;\n\t}\n};\n\nexports.connectChunkGroupAndChunk = connectChunkGroupAndChunk;\nexports.connectChunkGroupParentAndChild = connectChunkGroupParentAndChild;\nexports.connectChunkAndModule = connectChunkAndModule;\nexports.disconnectChunkAndModule = disconnectChunkAndModule;\nexports.connectDependenciesBlockAndChunkGroup = connectDependenciesBlockAndChunkGroup;\n"],"mappings":"AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,yBAAyB,GAAG,CAACC,UAAD,EAAaC,KAAb,KAAuB;EACxD,IAAID,UAAU,CAACE,SAAX,CAAqBD,KAArB,CAAJ,EAAiC;IAChCA,KAAK,CAACE,QAAN,CAAeH,UAAf;EACA;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,+BAA+B,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;EAC1D,IAAID,MAAM,CAACE,QAAP,CAAgBD,KAAhB,CAAJ,EAA4B;IAC3BA,KAAK,CAACE,SAAN,CAAgBH,MAAhB;EACA;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,qBAAqB,GAAG,CAACR,KAAD,EAAQS,MAAR,KAAmB;EAChD,IAAIA,MAAM,CAACC,QAAP,CAAgBV,KAAhB,CAAJ,EAA4B;IAC3BA,KAAK,CAACW,SAAN,CAAgBF,MAAhB;EACA;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,wBAAwB,GAAG,CAACZ,KAAD,EAAQS,MAAR,KAAmB;EACnDT,KAAK,CAACa,YAAN,CAAmBJ,MAAnB;EACAA,MAAM,CAACK,WAAP,CAAmBd,KAAnB;AACA,CAHD;AAKA;AACA;AACA;AACA;AACA;;;AACA,MAAMe,qCAAqC,GAAG,CAACC,QAAD,EAAWjB,UAAX,KAA0B;EACvE,IAAIA,UAAU,CAACkB,QAAX,CAAoBD,QAApB,CAAJ,EAAmC;IAClCA,QAAQ,CAACjB,UAAT,GAAsBA,UAAtB;EACA;AACD,CAJD;;AAMAmB,OAAO,CAACpB,yBAAR,GAAoCA,yBAApC;AACAoB,OAAO,CAACf,+BAAR,GAA0CA,+BAA1C;AACAe,OAAO,CAACV,qBAAR,GAAgCA,qBAAhC;AACAU,OAAO,CAACN,wBAAR,GAAmCA,wBAAnC;AACAM,OAAO,CAACH,qCAAR,GAAgDA,qCAAhD"},"metadata":{},"sourceType":"script"}