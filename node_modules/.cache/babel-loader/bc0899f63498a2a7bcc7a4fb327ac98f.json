{"ast":null,"code":"import * as crypto from \"@walletconnect/crypto\";\nimport * as encoding from \"@walletconnect/encoding\";\nimport { convertArrayBufferToBuffer, convertBufferToArrayBuffer } from \"@walletconnect/utils\";\nexport async function generateKey(length) {\n  const _length = (length || 256) / 8;\n\n  const bytes = crypto.randomBytes(_length);\n  const result = convertBufferToArrayBuffer(encoding.arrayToBuffer(bytes));\n  return result;\n}\nexport async function verifyHmac(payload, key) {\n  const cipherText = encoding.hexToArray(payload.data);\n  const iv = encoding.hexToArray(payload.iv);\n  const hmac = encoding.hexToArray(payload.hmac);\n  const hmacHex = encoding.arrayToHex(hmac, false);\n  const unsigned = encoding.concatArrays(cipherText, iv);\n  const chmac = await crypto.hmacSha256Sign(key, unsigned);\n  const chmacHex = encoding.arrayToHex(chmac, false);\n\n  if (encoding.removeHexPrefix(hmacHex) === encoding.removeHexPrefix(chmacHex)) {\n    return true;\n  }\n\n  return false;\n}\nexport async function encrypt(data, key, providedIv) {\n  const _key = encoding.bufferToArray(convertArrayBufferToBuffer(key));\n\n  const ivArrayBuffer = providedIv || (await generateKey(128));\n  const iv = encoding.bufferToArray(convertArrayBufferToBuffer(ivArrayBuffer));\n  const ivHex = encoding.arrayToHex(iv, false);\n  const contentString = JSON.stringify(data);\n  const content = encoding.utf8ToArray(contentString);\n  const cipherText = await crypto.aesCbcEncrypt(iv, _key, content);\n  const cipherTextHex = encoding.arrayToHex(cipherText, false);\n  const unsigned = encoding.concatArrays(cipherText, iv);\n  const hmac = await crypto.hmacSha256Sign(_key, unsigned);\n  const hmacHex = encoding.arrayToHex(hmac, false);\n  return {\n    data: cipherTextHex,\n    hmac: hmacHex,\n    iv: ivHex\n  };\n}\nexport async function decrypt(payload, key) {\n  const _key = encoding.bufferToArray(convertArrayBufferToBuffer(key));\n\n  if (!_key) {\n    throw new Error(\"Missing key: required for decryption\");\n  }\n\n  const verified = await verifyHmac(payload, _key);\n\n  if (!verified) {\n    return null;\n  }\n\n  const cipherText = encoding.hexToArray(payload.data);\n  const iv = encoding.hexToArray(payload.iv);\n  const buffer = await crypto.aesCbcDecrypt(iv, _key, cipherText);\n  const utf8 = encoding.arrayToUtf8(buffer);\n  let data;\n\n  try {\n    data = JSON.parse(utf8);\n  } catch (error) {\n    return null;\n  }\n\n  return data;\n}","map":{"version":3,"mappings":"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","names":["crypto","encoding","convertArrayBufferToBuffer","convertBufferToArrayBuffer","generateKey","length","_length","bytes","randomBytes","result","arrayToBuffer","verifyHmac","payload","key","cipherText","hexToArray","data","iv","hmac","hmacHex","arrayToHex","unsigned","concatArrays","chmac","hmacSha256Sign","chmacHex","removeHexPrefix","encrypt","providedIv","_key","bufferToArray","ivArrayBuffer","ivHex","contentString","JSON","stringify","content","utf8ToArray","aesCbcEncrypt","cipherTextHex","decrypt","Error","verified","buffer","aesCbcDecrypt","utf8","arrayToUtf8","parse","error"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}