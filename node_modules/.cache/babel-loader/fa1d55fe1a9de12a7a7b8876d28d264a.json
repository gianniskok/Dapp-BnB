{"ast":null,"code":"'use strict';\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"localAddrs\"]}\n   */\n  async function localAddrs() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('swarm/addrs/local', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n    /** @type {{ Strings: string[] }} */\n\n    const {\n      Strings\n    } = await res.json();\n    return (Strings || []).map(a => new Multiaddr(a));\n  }\n\n  return localAddrs;\n});","map":{"version":3,"names":["Multiaddr","require","configure","toUrlSearchParams","module","exports","api","localAddrs","options","res","post","signal","searchParams","headers","Strings","json","map","a"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/swarm/localAddrs.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const res = await api.post('swarm/addrs/local', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Strings: string[] }} */\n    const { Strings } = await res.json()\n\n    return (Strings || []).map(a => new Multiaddr(a))\n  }\n  return localAddrs\n})\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,UAAf,GAAyC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACvC,MAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,mBAAT,EAA8B;MAC9CC,MAAM,EAAEH,OAAO,CAACG,MAD8B;MAE9CC,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAFe;MAG9CK,OAAO,EAAEL,OAAO,CAACK;IAH6B,CAA9B,CAAlB;IAMA;;IACA,MAAM;MAAEC;IAAF,IAAc,MAAML,GAAG,CAACM,IAAJ,EAA1B;IAEA,OAAO,CAACD,OAAO,IAAI,EAAZ,EAAgBE,GAAhB,CAAoBC,CAAC,IAAI,IAAIjB,SAAJ,CAAciB,CAAd,CAAzB,CAAP;EACD;;EACD,OAAOV,UAAP;AACD,CAjByB,CAA1B"},"metadata":{},"sourceType":"script"}