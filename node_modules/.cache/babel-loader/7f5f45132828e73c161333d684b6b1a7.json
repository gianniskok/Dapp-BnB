{"ast":null,"code":"'use strict';\n\nconst BB = require('bluebird');\n\nconst contentPath = require('./content/path');\n\nconst figgyPudding = require('figgy-pudding');\n\nconst finished = BB.promisify(require('mississippi').finished);\n\nconst fixOwner = require('./util/fix-owner');\n\nconst fs = require('graceful-fs');\n\nconst glob = BB.promisify(require('glob'));\n\nconst index = require('./entry-index');\n\nconst path = require('path');\n\nconst rimraf = BB.promisify(require('rimraf'));\n\nconst ssri = require('ssri');\n\nBB.promisifyAll(fs);\nconst VerifyOpts = figgyPudding({\n  concurrency: {\n    default: 20\n  },\n  filter: {},\n  log: {\n    default: {\n      silly() {}\n\n    }\n  }\n});\nmodule.exports = verify;\n\nfunction verify(cache, opts) {\n  opts = VerifyOpts(opts);\n  opts.log.silly('verify', 'verifying cache at', cache);\n  return BB.reduce([markStartTime, fixPerms, garbageCollect, rebuildIndex, cleanTmp, writeVerifile, markEndTime], (stats, step, i) => {\n    const label = step.name || `step #${i}`;\n    const start = new Date();\n    return BB.resolve(step(cache, opts)).then(s => {\n      s && Object.keys(s).forEach(k => {\n        stats[k] = s[k];\n      });\n      const end = new Date();\n\n      if (!stats.runTime) {\n        stats.runTime = {};\n      }\n\n      stats.runTime[label] = end - start;\n      return stats;\n    });\n  }, {}).tap(stats => {\n    stats.runTime.total = stats.endTime - stats.startTime;\n    opts.log.silly('verify', 'verification finished for', cache, 'in', `${stats.runTime.total}ms`);\n  });\n}\n\nfunction markStartTime(cache, opts) {\n  return {\n    startTime: new Date()\n  };\n}\n\nfunction markEndTime(cache, opts) {\n  return {\n    endTime: new Date()\n  };\n}\n\nfunction fixPerms(cache, opts) {\n  opts.log.silly('verify', 'fixing cache permissions');\n  return fixOwner.mkdirfix(cache, cache).then(() => {\n    // TODO - fix file permissions too\n    return fixOwner.chownr(cache, cache);\n  }).then(() => null);\n} // Implements a naive mark-and-sweep tracing garbage collector.\n//\n// The algorithm is basically as follows:\n// 1. Read (and filter) all index entries (\"pointers\")\n// 2. Mark each integrity value as \"live\"\n// 3. Read entire filesystem tree in `content-vX/` dir\n// 4. If content is live, verify its checksum and delete it if it fails\n// 5. If content is not marked as live, rimraf it.\n//\n\n\nfunction garbageCollect(cache, opts) {\n  opts.log.silly('verify', 'garbage collecting content');\n  const indexStream = index.lsStream(cache);\n  const liveContent = new Set();\n  indexStream.on('data', entry => {\n    if (opts.filter && !opts.filter(entry)) {\n      return;\n    }\n\n    liveContent.add(entry.integrity.toString());\n  });\n  return finished(indexStream).then(() => {\n    const contentDir = contentPath._contentDir(cache);\n\n    return glob(path.join(contentDir, '**'), {\n      follow: false,\n      nodir: true,\n      nosort: true\n    }).then(files => {\n      return BB.resolve({\n        verifiedContent: 0,\n        reclaimedCount: 0,\n        reclaimedSize: 0,\n        badContentCount: 0,\n        keptSize: 0\n      }).tap(stats => BB.map(files, f => {\n        const split = f.split(/[/\\\\]/);\n        const digest = split.slice(split.length - 3).join('');\n        const algo = split[split.length - 4];\n        const integrity = ssri.fromHex(digest, algo);\n\n        if (liveContent.has(integrity.toString())) {\n          return verifyContent(f, integrity).then(info => {\n            if (!info.valid) {\n              stats.reclaimedCount++;\n              stats.badContentCount++;\n              stats.reclaimedSize += info.size;\n            } else {\n              stats.verifiedContent++;\n              stats.keptSize += info.size;\n            }\n\n            return stats;\n          });\n        } else {\n          // No entries refer to this content. We can delete.\n          stats.reclaimedCount++;\n          return fs.statAsync(f).then(s => {\n            return rimraf(f).then(() => {\n              stats.reclaimedSize += s.size;\n              return stats;\n            });\n          });\n        }\n      }, {\n        concurrency: opts.concurrency\n      }));\n    });\n  });\n}\n\nfunction verifyContent(filepath, sri) {\n  return fs.statAsync(filepath).then(stat => {\n    const contentInfo = {\n      size: stat.size,\n      valid: true\n    };\n    return ssri.checkStream(fs.createReadStream(filepath), sri).catch(err => {\n      if (err.code !== 'EINTEGRITY') {\n        throw err;\n      }\n\n      return rimraf(filepath).then(() => {\n        contentInfo.valid = false;\n      });\n    }).then(() => contentInfo);\n  }).catch({\n    code: 'ENOENT'\n  }, () => ({\n    size: 0,\n    valid: false\n  }));\n}\n\nfunction rebuildIndex(cache, opts) {\n  opts.log.silly('verify', 'rebuilding index');\n  return index.ls(cache).then(entries => {\n    const stats = {\n      missingContent: 0,\n      rejectedEntries: 0,\n      totalEntries: 0\n    };\n    const buckets = {};\n\n    for (let k in entries) {\n      if (entries.hasOwnProperty(k)) {\n        const hashed = index._hashKey(k);\n\n        const entry = entries[k];\n        const excluded = opts.filter && !opts.filter(entry);\n        excluded && stats.rejectedEntries++;\n\n        if (buckets[hashed] && !excluded) {\n          buckets[hashed].push(entry);\n        } else if (buckets[hashed] && excluded) {// skip\n        } else if (excluded) {\n          buckets[hashed] = [];\n          buckets[hashed]._path = index._bucketPath(cache, k);\n        } else {\n          buckets[hashed] = [entry];\n          buckets[hashed]._path = index._bucketPath(cache, k);\n        }\n      }\n    }\n\n    return BB.map(Object.keys(buckets), key => {\n      return rebuildBucket(cache, buckets[key], stats, opts);\n    }, {\n      concurrency: opts.concurrency\n    }).then(() => stats);\n  });\n}\n\nfunction rebuildBucket(cache, bucket, stats, opts) {\n  return fs.truncateAsync(bucket._path).then(() => {\n    // This needs to be serialized because cacache explicitly\n    // lets very racy bucket conflicts clobber each other.\n    return BB.mapSeries(bucket, entry => {\n      const content = contentPath(cache, entry.integrity);\n      return fs.statAsync(content).then(() => {\n        return index.insert(cache, entry.key, entry.integrity, {\n          metadata: entry.metadata,\n          size: entry.size\n        }).then(() => {\n          stats.totalEntries++;\n        });\n      }).catch({\n        code: 'ENOENT'\n      }, () => {\n        stats.rejectedEntries++;\n        stats.missingContent++;\n      });\n    });\n  });\n}\n\nfunction cleanTmp(cache, opts) {\n  opts.log.silly('verify', 'cleaning tmp directory');\n  return rimraf(path.join(cache, 'tmp'));\n}\n\nfunction writeVerifile(cache, opts) {\n  const verifile = path.join(cache, '_lastverified');\n  opts.log.silly('verify', 'writing verifile to ' + verifile);\n\n  try {\n    return fs.writeFileAsync(verifile, '' + +new Date());\n  } finally {\n    fixOwner.chownr.sync(cache, verifile);\n  }\n}\n\nmodule.exports.lastRun = lastRun;\n\nfunction lastRun(cache) {\n  return fs.readFileAsync(path.join(cache, '_lastverified'), 'utf8').then(data => new Date(+data));\n}","map":{"version":3,"names":["BB","require","contentPath","figgyPudding","finished","promisify","fixOwner","fs","glob","index","path","rimraf","ssri","promisifyAll","VerifyOpts","concurrency","default","filter","log","silly","module","exports","verify","cache","opts","reduce","markStartTime","fixPerms","garbageCollect","rebuildIndex","cleanTmp","writeVerifile","markEndTime","stats","step","i","label","name","start","Date","resolve","then","s","Object","keys","forEach","k","end","runTime","tap","total","endTime","startTime","mkdirfix","chownr","indexStream","lsStream","liveContent","Set","on","entry","add","integrity","toString","contentDir","_contentDir","join","follow","nodir","nosort","files","verifiedContent","reclaimedCount","reclaimedSize","badContentCount","keptSize","map","f","split","digest","slice","length","algo","fromHex","has","verifyContent","info","valid","size","statAsync","filepath","sri","stat","contentInfo","checkStream","createReadStream","catch","err","code","ls","entries","missingContent","rejectedEntries","totalEntries","buckets","hasOwnProperty","hashed","_hashKey","excluded","push","_path","_bucketPath","key","rebuildBucket","bucket","truncateAsync","mapSeries","content","insert","metadata","verifile","writeFileAsync","sync","lastRun","readFileAsync","data"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/node_modules/cacache/lib/verify.js"],"sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst contentPath = require('./content/path')\nconst figgyPudding = require('figgy-pudding')\nconst finished = BB.promisify(require('mississippi').finished)\nconst fixOwner = require('./util/fix-owner')\nconst fs = require('graceful-fs')\nconst glob = BB.promisify(require('glob'))\nconst index = require('./entry-index')\nconst path = require('path')\nconst rimraf = BB.promisify(require('rimraf'))\nconst ssri = require('ssri')\n\nBB.promisifyAll(fs)\n\nconst VerifyOpts = figgyPudding({\n  concurrency: {\n    default: 20\n  },\n  filter: {},\n  log: {\n    default: { silly () {} }\n  }\n})\n\nmodule.exports = verify\nfunction verify (cache, opts) {\n  opts = VerifyOpts(opts)\n  opts.log.silly('verify', 'verifying cache at', cache)\n  return BB.reduce([\n    markStartTime,\n    fixPerms,\n    garbageCollect,\n    rebuildIndex,\n    cleanTmp,\n    writeVerifile,\n    markEndTime\n  ], (stats, step, i) => {\n    const label = step.name || `step #${i}`\n    const start = new Date()\n    return BB.resolve(step(cache, opts)).then(s => {\n      s && Object.keys(s).forEach(k => {\n        stats[k] = s[k]\n      })\n      const end = new Date()\n      if (!stats.runTime) { stats.runTime = {} }\n      stats.runTime[label] = end - start\n      return stats\n    })\n  }, {}).tap(stats => {\n    stats.runTime.total = stats.endTime - stats.startTime\n    opts.log.silly('verify', 'verification finished for', cache, 'in', `${stats.runTime.total}ms`)\n  })\n}\n\nfunction markStartTime (cache, opts) {\n  return { startTime: new Date() }\n}\n\nfunction markEndTime (cache, opts) {\n  return { endTime: new Date() }\n}\n\nfunction fixPerms (cache, opts) {\n  opts.log.silly('verify', 'fixing cache permissions')\n  return fixOwner.mkdirfix(cache, cache).then(() => {\n    // TODO - fix file permissions too\n    return fixOwner.chownr(cache, cache)\n  }).then(() => null)\n}\n\n// Implements a naive mark-and-sweep tracing garbage collector.\n//\n// The algorithm is basically as follows:\n// 1. Read (and filter) all index entries (\"pointers\")\n// 2. Mark each integrity value as \"live\"\n// 3. Read entire filesystem tree in `content-vX/` dir\n// 4. If content is live, verify its checksum and delete it if it fails\n// 5. If content is not marked as live, rimraf it.\n//\nfunction garbageCollect (cache, opts) {\n  opts.log.silly('verify', 'garbage collecting content')\n  const indexStream = index.lsStream(cache)\n  const liveContent = new Set()\n  indexStream.on('data', entry => {\n    if (opts.filter && !opts.filter(entry)) { return }\n    liveContent.add(entry.integrity.toString())\n  })\n  return finished(indexStream).then(() => {\n    const contentDir = contentPath._contentDir(cache)\n    return glob(path.join(contentDir, '**'), {\n      follow: false,\n      nodir: true,\n      nosort: true\n    }).then(files => {\n      return BB.resolve({\n        verifiedContent: 0,\n        reclaimedCount: 0,\n        reclaimedSize: 0,\n        badContentCount: 0,\n        keptSize: 0\n      }).tap((stats) => BB.map(files, (f) => {\n        const split = f.split(/[/\\\\]/)\n        const digest = split.slice(split.length - 3).join('')\n        const algo = split[split.length - 4]\n        const integrity = ssri.fromHex(digest, algo)\n        if (liveContent.has(integrity.toString())) {\n          return verifyContent(f, integrity).then(info => {\n            if (!info.valid) {\n              stats.reclaimedCount++\n              stats.badContentCount++\n              stats.reclaimedSize += info.size\n            } else {\n              stats.verifiedContent++\n              stats.keptSize += info.size\n            }\n            return stats\n          })\n        } else {\n          // No entries refer to this content. We can delete.\n          stats.reclaimedCount++\n          return fs.statAsync(f).then(s => {\n            return rimraf(f).then(() => {\n              stats.reclaimedSize += s.size\n              return stats\n            })\n          })\n        }\n      }, { concurrency: opts.concurrency }))\n    })\n  })\n}\n\nfunction verifyContent (filepath, sri) {\n  return fs.statAsync(filepath).then(stat => {\n    const contentInfo = {\n      size: stat.size,\n      valid: true\n    }\n    return ssri.checkStream(\n      fs.createReadStream(filepath),\n      sri\n    ).catch(err => {\n      if (err.code !== 'EINTEGRITY') { throw err }\n      return rimraf(filepath).then(() => {\n        contentInfo.valid = false\n      })\n    }).then(() => contentInfo)\n  }).catch({ code: 'ENOENT' }, () => ({ size: 0, valid: false }))\n}\n\nfunction rebuildIndex (cache, opts) {\n  opts.log.silly('verify', 'rebuilding index')\n  return index.ls(cache).then(entries => {\n    const stats = {\n      missingContent: 0,\n      rejectedEntries: 0,\n      totalEntries: 0\n    }\n    const buckets = {}\n    for (let k in entries) {\n      if (entries.hasOwnProperty(k)) {\n        const hashed = index._hashKey(k)\n        const entry = entries[k]\n        const excluded = opts.filter && !opts.filter(entry)\n        excluded && stats.rejectedEntries++\n        if (buckets[hashed] && !excluded) {\n          buckets[hashed].push(entry)\n        } else if (buckets[hashed] && excluded) {\n          // skip\n        } else if (excluded) {\n          buckets[hashed] = []\n          buckets[hashed]._path = index._bucketPath(cache, k)\n        } else {\n          buckets[hashed] = [entry]\n          buckets[hashed]._path = index._bucketPath(cache, k)\n        }\n      }\n    }\n    return BB.map(Object.keys(buckets), key => {\n      return rebuildBucket(cache, buckets[key], stats, opts)\n    }, { concurrency: opts.concurrency }).then(() => stats)\n  })\n}\n\nfunction rebuildBucket (cache, bucket, stats, opts) {\n  return fs.truncateAsync(bucket._path).then(() => {\n    // This needs to be serialized because cacache explicitly\n    // lets very racy bucket conflicts clobber each other.\n    return BB.mapSeries(bucket, entry => {\n      const content = contentPath(cache, entry.integrity)\n      return fs.statAsync(content).then(() => {\n        return index.insert(cache, entry.key, entry.integrity, {\n          metadata: entry.metadata,\n          size: entry.size\n        }).then(() => { stats.totalEntries++ })\n      }).catch({ code: 'ENOENT' }, () => {\n        stats.rejectedEntries++\n        stats.missingContent++\n      })\n    })\n  })\n}\n\nfunction cleanTmp (cache, opts) {\n  opts.log.silly('verify', 'cleaning tmp directory')\n  return rimraf(path.join(cache, 'tmp'))\n}\n\nfunction writeVerifile (cache, opts) {\n  const verifile = path.join(cache, '_lastverified')\n  opts.log.silly('verify', 'writing verifile to ' + verifile)\n  try {\n    return fs.writeFileAsync(verifile, '' + (+(new Date())))\n  } finally {\n    fixOwner.chownr.sync(cache, verifile)\n  }\n}\n\nmodule.exports.lastRun = lastRun\nfunction lastRun (cache) {\n  return fs.readFileAsync(\n    path.join(cache, '_lastverified'), 'utf8'\n  ).then(data => new Date(+data))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}