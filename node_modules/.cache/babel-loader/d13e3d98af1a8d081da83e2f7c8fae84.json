{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../../lib/configure');\n\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"rmLink\"]}\n   */\n  async function rmLink(cid, dLink) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const res = await api.post('object/patch/rm-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [`${cid}`, // @ts-ignore loose types\n        dLink.Name || dLink.name || null],\n        ...options\n      }),\n      headers: options.headers\n    });\n    const {\n      Hash\n    } = await res.json();\n    return CID.parse(Hash);\n  }\n\n  return rmLink;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","rmLink","cid","dLink","options","res","post","signal","searchParams","arg","Name","name","headers","Hash","json","parse"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/object/patch/rm-link.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../../lib/configure')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"rmLink\"]}\n   */\n  async function rmLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/rm-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-ignore loose types\n          dLink.Name || dLink.name || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return rmLink\n})\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,gCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,MAAf,CAAuBC,GAAvB,EAA4BC,KAA5B,EAAiD;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC/C,MAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,sBAAT,EAAiC;MACjDC,MAAM,EAAEH,OAAO,CAACG,MADiC;MAEjDC,YAAY,EAAEX,iBAAiB,CAAC;QAC9BY,GAAG,EAAE,CACF,GAAEP,GAAI,EADJ,EAEH;QACAC,KAAK,CAACO,IAAN,IAAcP,KAAK,CAACQ,IAApB,IAA4B,IAHzB,CADyB;QAM9B,GAAGP;MAN2B,CAAD,CAFkB;MAUjDQ,OAAO,EAAER,OAAO,CAACQ;IAVgC,CAAjC,CAAlB;IAaA,MAAM;MAAEC;IAAF,IAAW,MAAMR,GAAG,CAACS,IAAJ,EAAvB;IAEA,OAAOpB,GAAG,CAACqB,KAAJ,CAAUF,IAAV,CAAP;EACD;;EACD,OAAOZ,MAAP;AACD,CAvByB,CAA1B"},"metadata":{},"sourceType":"script"}