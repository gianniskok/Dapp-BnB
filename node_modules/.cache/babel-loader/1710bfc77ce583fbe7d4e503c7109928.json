{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  async function* rm(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!Array.isArray(cid)) {\n      cid = [cid];\n    }\n\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed);\n    }\n  }\n\n  return rm;\n});\n/**\n * @param {*} removed\n */\n\nfunction toCoreInterface(removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  };\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n\n  return out;\n}","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","rm","cid","options","Array","isArray","res","post","signal","searchParams","arg","map","toString","headers","removed","ndjson","toCoreInterface","out","parse","Hash","Error","error"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/block/rm.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n\n  return rm\n})\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface (removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,EAAjB,CAAqBC,GAArB,EAAwC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IACtC,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAL,EAAyB;MACvBA,GAAG,GAAG,CAACA,GAAD,CAAN;IACD;;IAED,MAAMI,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAJ,CAAS,UAAT,EAAqB;MACrCC,MAAM,EAAEL,OAAO,CAACK,MADqB;MAErCC,YAAY,EAAEZ,iBAAiB,CAAC;QAC9Ba,GAAG,EAAER,GAAG,CAACS,GAAJ,CAAQT,GAAG,IAAIA,GAAG,CAACU,QAAJ,EAAf,CADyB;QAE9B,mBAAmB,IAFW;QAG9B,GAAGT;MAH2B,CAAD,CAFM;MAOrCU,OAAO,EAAEV,OAAO,CAACU;IAPoB,CAArB,CAAlB;;IAUA,WAAW,MAAMC,OAAjB,IAA4BR,GAAG,CAACS,MAAJ,EAA5B,EAA0C;MACxC,MAAMC,eAAe,CAACF,OAAD,CAArB;IACD;EACF;;EAED,OAAOb,EAAP;AACD,CAzByB,CAA1B;AA2BA;AACA;AACA;;AACA,SAASe,eAAT,CAA0BF,OAA1B,EAAmC;EACjC;EACA,MAAMG,GAAG,GAAG;IACVf,GAAG,EAAER,GAAG,CAACwB,KAAJ,CAAUJ,OAAO,CAACK,IAAlB;EADK,CAAZ;;EAIA,IAAIL,OAAO,CAACM,KAAZ,EAAmB;IACjBH,GAAG,CAACI,KAAJ,GAAY,IAAID,KAAJ,CAAUN,OAAO,CAACM,KAAlB,CAAZ;EACD;;EAED,OAAOH,GAAP;AACD"},"metadata":{},"sourceType":"script"}