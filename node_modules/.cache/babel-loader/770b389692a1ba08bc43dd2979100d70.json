{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n\nconst getPaths = require(\"./getPaths\");\n\nmodule.exports = class ModulesInHierachicDirectoriesPlugin {\n  constructor(source, directories, target) {\n    this.source = source;\n    this.directories = [].concat(directories);\n    this.target = target;\n  }\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"ModulesInHierachicDirectoriesPlugin\", (request, resolveContext, callback) => {\n      const fs = resolver.fileSystem;\n      const addrs = getPaths(request.path).paths.map(p => {\n        return this.directories.map(d => resolver.join(p, d));\n      }).reduce((array, p) => {\n        array.push.apply(array, p);\n        return array;\n      }, []);\n      forEachBail(addrs, (addr, callback) => {\n        fs.stat(addr, (err, stat) => {\n          if (!err && stat && stat.isDirectory()) {\n            const obj = Object.assign({}, request, {\n              path: addr,\n              request: \"./\" + request.request\n            });\n            const message = \"looking for modules in \" + addr;\n            return resolver.doResolve(target, obj, message, resolveContext, callback);\n          }\n\n          if (resolveContext.log) resolveContext.log(addr + \" doesn't exist or is not a directory\");\n          if (resolveContext.missing) resolveContext.missing.add(addr);\n          return callback();\n        });\n      }, callback);\n    });\n  }\n\n};","map":{"version":3,"names":["forEachBail","require","getPaths","module","exports","ModulesInHierachicDirectoriesPlugin","constructor","source","directories","target","concat","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","fs","fileSystem","addrs","path","paths","map","p","d","join","reduce","array","push","addr","stat","err","isDirectory","obj","Object","assign","message","doResolve","log","missing","add"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/enhanced-resolve/lib/ModulesInHierachicDirectoriesPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\nconst getPaths = require(\"./getPaths\");\n\nmodule.exports = class ModulesInHierachicDirectoriesPlugin {\n\tconstructor(source, directories, target) {\n\t\tthis.source = source;\n\t\tthis.directories = [].concat(directories);\n\t\tthis.target = target;\n\t}\n\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\n\t\t\t\t\"ModulesInHierachicDirectoriesPlugin\",\n\t\t\t\t(request, resolveContext, callback) => {\n\t\t\t\t\tconst fs = resolver.fileSystem;\n\t\t\t\t\tconst addrs = getPaths(request.path)\n\t\t\t\t\t\t.paths.map(p => {\n\t\t\t\t\t\t\treturn this.directories.map(d => resolver.join(p, d));\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.reduce((array, p) => {\n\t\t\t\t\t\t\tarray.push.apply(array, p);\n\t\t\t\t\t\t\treturn array;\n\t\t\t\t\t\t}, []);\n\t\t\t\t\tforEachBail(\n\t\t\t\t\t\taddrs,\n\t\t\t\t\t\t(addr, callback) => {\n\t\t\t\t\t\t\tfs.stat(addr, (err, stat) => {\n\t\t\t\t\t\t\t\tif (!err && stat && stat.isDirectory()) {\n\t\t\t\t\t\t\t\t\tconst obj = Object.assign({}, request, {\n\t\t\t\t\t\t\t\t\t\tpath: addr,\n\t\t\t\t\t\t\t\t\t\trequest: \"./\" + request.request\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tconst message = \"looking for modules in \" + addr;\n\t\t\t\t\t\t\t\t\treturn resolver.doResolve(\n\t\t\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t\t\t\taddr + \" doesn't exist or is not a directory\"\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (resolveContext.missing) resolveContext.missing.add(addr);\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcallback\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAxB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,mCAAN,CAA0C;EAC1DC,WAAW,CAACC,MAAD,EAASC,WAAT,EAAsBC,MAAtB,EAA8B;IACxC,KAAKF,MAAL,GAAcA,MAAd;IACA,KAAKC,WAAL,GAAmB,GAAGE,MAAH,CAAUF,WAAV,CAAnB;IACA,KAAKC,MAAL,GAAcA,MAAd;EACA;;EAEDE,KAAK,CAACC,QAAD,EAAW;IACf,MAAMH,MAAM,GAAGG,QAAQ,CAACC,UAAT,CAAoB,KAAKJ,MAAzB,CAAf;IACAG,QAAQ,CACNE,OADF,CACU,KAAKP,MADf,EAEEQ,QAFF,CAGE,qCAHF,EAIE,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;MACtC,MAAMC,EAAE,GAAGP,QAAQ,CAACQ,UAApB;MACA,MAAMC,KAAK,GAAGnB,QAAQ,CAACc,OAAO,CAACM,IAAT,CAAR,CACZC,KADY,CACNC,GADM,CACFC,CAAC,IAAI;QACf,OAAO,KAAKjB,WAAL,CAAiBgB,GAAjB,CAAqBE,CAAC,IAAId,QAAQ,CAACe,IAAT,CAAcF,CAAd,EAAiBC,CAAjB,CAA1B,CAAP;MACA,CAHY,EAIZE,MAJY,CAIL,CAACC,KAAD,EAAQJ,CAAR,KAAc;QACrBI,KAAK,CAACC,IAAN,CAAWnB,KAAX,CAAiBkB,KAAjB,EAAwBJ,CAAxB;QACA,OAAOI,KAAP;MACA,CAPY,EAOV,EAPU,CAAd;MAQA7B,WAAW,CACVqB,KADU,EAEV,CAACU,IAAD,EAAOb,QAAP,KAAoB;QACnBC,EAAE,CAACa,IAAH,CAAQD,IAAR,EAAc,CAACE,GAAD,EAAMD,IAAN,KAAe;UAC5B,IAAI,CAACC,GAAD,IAAQD,IAAR,IAAgBA,IAAI,CAACE,WAAL,EAApB,EAAwC;YACvC,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBrB,OAAlB,EAA2B;cACtCM,IAAI,EAAES,IADgC;cAEtCf,OAAO,EAAE,OAAOA,OAAO,CAACA;YAFc,CAA3B,CAAZ;YAIA,MAAMsB,OAAO,GAAG,4BAA4BP,IAA5C;YACA,OAAOnB,QAAQ,CAAC2B,SAAT,CACN9B,MADM,EAEN0B,GAFM,EAGNG,OAHM,EAINrB,cAJM,EAKNC,QALM,CAAP;UAOA;;UACD,IAAID,cAAc,CAACuB,GAAnB,EACCvB,cAAc,CAACuB,GAAf,CACCT,IAAI,GAAG,sCADR;UAGD,IAAId,cAAc,CAACwB,OAAnB,EAA4BxB,cAAc,CAACwB,OAAf,CAAuBC,GAAvB,CAA2BX,IAA3B;UAC5B,OAAOb,QAAQ,EAAf;QACA,CArBD;MAsBA,CAzBS,EA0BVA,QA1BU,CAAX;IA4BA,CA1CH;EA4CA;;AArDyD,CAA3D"},"metadata":{},"sourceType":"script"}