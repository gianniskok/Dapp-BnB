{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\"use strict\";\n\nconst EntrypointsOverSizeLimitWarning = require(\"./EntrypointsOverSizeLimitWarning\");\n\nconst AssetsOverSizeLimitWarning = require(\"./AssetsOverSizeLimitWarning\");\n\nconst NoAsyncChunksWarning = require(\"./NoAsyncChunksWarning\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n\n\nmodule.exports = class SizeLimitsPlugin {\n  constructor(options) {\n    this.hints = options.hints;\n    this.maxAssetSize = options.maxAssetSize;\n    this.maxEntrypointSize = options.maxEntrypointSize;\n    this.assetFilter = options.assetFilter;\n  }\n  /**\n   * @param {Compiler} compiler webpack compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const entrypointSizeLimit = this.maxEntrypointSize;\n    const assetSizeLimit = this.maxAssetSize;\n    const hints = this.hints;\n\n    const assetFilter = this.assetFilter || ((name, source, info) => !info.development);\n\n    compiler.hooks.afterEmit.tap(\"SizeLimitsPlugin\", compilation => {\n      const warnings = [];\n      /**\n       * @param {Entrypoint} entrypoint an entrypoint\n       * @returns {number} the size of the entrypoint\n       */\n\n      const getEntrypointSize = entrypoint => entrypoint.getFiles().reduce((currentSize, file) => {\n        const asset = compilation.getAsset(file);\n\n        if (asset && assetFilter(asset.name, asset.source, asset.info) && asset.source) {\n          return currentSize + (asset.info.size || asset.source.size());\n        }\n\n        return currentSize;\n      }, 0);\n\n      const assetsOverSizeLimit = [];\n\n      for (const {\n        name,\n        source,\n        info\n      } of compilation.getAssets()) {\n        if (!assetFilter(name, source, info) || !source) {\n          continue;\n        }\n\n        const size = info.size || source.size();\n\n        if (size > assetSizeLimit) {\n          assetsOverSizeLimit.push({\n            name,\n            size\n          });\n          /** @type {any} */\n\n          source.isOverSizeLimit = true;\n        }\n      }\n\n      const fileFilter = name => {\n        const asset = compilation.getAsset(name);\n        return asset && assetFilter(asset.name, asset.source, asset.info);\n      };\n\n      const entrypointsOverLimit = [];\n\n      for (const [name, entry] of compilation.entrypoints) {\n        const size = getEntrypointSize(entry);\n\n        if (size > entrypointSizeLimit) {\n          entrypointsOverLimit.push({\n            name: name,\n            size: size,\n            files: entry.getFiles().filter(fileFilter)\n          });\n          /** @type {any} */\n\n          entry.isOverSizeLimit = true;\n        }\n      }\n\n      if (hints) {\n        // 1. Individual Chunk: Size < 250kb\n        // 2. Collective Initial Chunks [entrypoint] (Each Set?): Size < 250kb\n        // 3. No Async Chunks\n        // if !1, then 2, if !2 return\n        if (assetsOverSizeLimit.length > 0) {\n          warnings.push(new AssetsOverSizeLimitWarning(assetsOverSizeLimit, assetSizeLimit));\n        }\n\n        if (entrypointsOverLimit.length > 0) {\n          warnings.push(new EntrypointsOverSizeLimitWarning(entrypointsOverLimit, entrypointSizeLimit));\n        }\n\n        if (warnings.length > 0) {\n          const hasAsyncChunks = compilation.chunks.filter(chunk => !chunk.canBeInitial()).length > 0;\n\n          if (!hasAsyncChunks) {\n            warnings.push(new NoAsyncChunksWarning());\n          }\n\n          if (hints === \"error\") {\n            compilation.errors.push(...warnings);\n          } else {\n            compilation.warnings.push(...warnings);\n          }\n        }\n      }\n    });\n  }\n\n};","map":{"version":3,"names":["EntrypointsOverSizeLimitWarning","require","AssetsOverSizeLimitWarning","NoAsyncChunksWarning","module","exports","SizeLimitsPlugin","constructor","options","hints","maxAssetSize","maxEntrypointSize","assetFilter","apply","compiler","entrypointSizeLimit","assetSizeLimit","name","source","info","development","hooks","afterEmit","tap","compilation","warnings","getEntrypointSize","entrypoint","getFiles","reduce","currentSize","file","asset","getAsset","size","assetsOverSizeLimit","getAssets","push","isOverSizeLimit","fileFilter","entrypointsOverLimit","entry","entrypoints","files","filter","length","hasAsyncChunks","chunks","chunk","canBeInitial","errors"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/performance/SizeLimitsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\"use strict\";\nconst EntrypointsOverSizeLimitWarning = require(\"./EntrypointsOverSizeLimitWarning\");\nconst AssetsOverSizeLimitWarning = require(\"./AssetsOverSizeLimitWarning\");\nconst NoAsyncChunksWarning = require(\"./NoAsyncChunksWarning\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n\nmodule.exports = class SizeLimitsPlugin {\n\tconstructor(options) {\n\t\tthis.hints = options.hints;\n\t\tthis.maxAssetSize = options.maxAssetSize;\n\t\tthis.maxEntrypointSize = options.maxEntrypointSize;\n\t\tthis.assetFilter = options.assetFilter;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler webpack compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst entrypointSizeLimit = this.maxEntrypointSize;\n\t\tconst assetSizeLimit = this.maxAssetSize;\n\t\tconst hints = this.hints;\n\t\tconst assetFilter =\n\t\t\tthis.assetFilter || ((name, source, info) => !info.development);\n\n\t\tcompiler.hooks.afterEmit.tap(\"SizeLimitsPlugin\", compilation => {\n\t\t\tconst warnings = [];\n\n\t\t\t/**\n\t\t\t * @param {Entrypoint} entrypoint an entrypoint\n\t\t\t * @returns {number} the size of the entrypoint\n\t\t\t */\n\t\t\tconst getEntrypointSize = entrypoint =>\n\t\t\t\tentrypoint.getFiles().reduce((currentSize, file) => {\n\t\t\t\t\tconst asset = compilation.getAsset(file);\n\t\t\t\t\tif (\n\t\t\t\t\t\tasset &&\n\t\t\t\t\t\tassetFilter(asset.name, asset.source, asset.info) &&\n\t\t\t\t\t\tasset.source\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn currentSize + (asset.info.size || asset.source.size());\n\t\t\t\t\t}\n\n\t\t\t\t\treturn currentSize;\n\t\t\t\t}, 0);\n\n\t\t\tconst assetsOverSizeLimit = [];\n\t\t\tfor (const { name, source, info } of compilation.getAssets()) {\n\t\t\t\tif (!assetFilter(name, source, info) || !source) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst size = info.size || source.size();\n\t\t\t\tif (size > assetSizeLimit) {\n\t\t\t\t\tassetsOverSizeLimit.push({\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tsize\n\t\t\t\t\t});\n\t\t\t\t\t/** @type {any} */ (source).isOverSizeLimit = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst fileFilter = name => {\n\t\t\t\tconst asset = compilation.getAsset(name);\n\t\t\t\treturn asset && assetFilter(asset.name, asset.source, asset.info);\n\t\t\t};\n\n\t\t\tconst entrypointsOverLimit = [];\n\t\t\tfor (const [name, entry] of compilation.entrypoints) {\n\t\t\t\tconst size = getEntrypointSize(entry);\n\n\t\t\t\tif (size > entrypointSizeLimit) {\n\t\t\t\t\tentrypointsOverLimit.push({\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tsize: size,\n\t\t\t\t\t\tfiles: entry.getFiles().filter(fileFilter)\n\t\t\t\t\t});\n\t\t\t\t\t/** @type {any} */ (entry).isOverSizeLimit = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hints) {\n\t\t\t\t// 1. Individual Chunk: Size < 250kb\n\t\t\t\t// 2. Collective Initial Chunks [entrypoint] (Each Set?): Size < 250kb\n\t\t\t\t// 3. No Async Chunks\n\t\t\t\t// if !1, then 2, if !2 return\n\t\t\t\tif (assetsOverSizeLimit.length > 0) {\n\t\t\t\t\twarnings.push(\n\t\t\t\t\t\tnew AssetsOverSizeLimitWarning(assetsOverSizeLimit, assetSizeLimit)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (entrypointsOverLimit.length > 0) {\n\t\t\t\t\twarnings.push(\n\t\t\t\t\t\tnew EntrypointsOverSizeLimitWarning(\n\t\t\t\t\t\t\tentrypointsOverLimit,\n\t\t\t\t\t\t\tentrypointSizeLimit\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (warnings.length > 0) {\n\t\t\t\t\tconst hasAsyncChunks =\n\t\t\t\t\t\tcompilation.chunks.filter(chunk => !chunk.canBeInitial()).length >\n\t\t\t\t\t\t0;\n\n\t\t\t\t\tif (!hasAsyncChunks) {\n\t\t\t\t\t\twarnings.push(new NoAsyncChunksWarning());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hints === \"error\") {\n\t\t\t\t\t\tcompilation.errors.push(...warnings);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcompilation.warnings.push(...warnings);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}