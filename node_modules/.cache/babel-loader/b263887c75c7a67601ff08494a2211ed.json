{"ast":null,"code":"import { traverse, shiftSection } from \"@webassemblyjs/ast\";\nimport { encodeU32 } from \"@webassemblyjs/wasm-gen/lib/encoder\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\n\nfunction shiftFollowingSections(ast, _ref, deltaInSizeEncoding) {\n  var section = _ref.section; // Once we hit our section every that is after needs to be shifted by the delta\n\n  var encounteredSection = false;\n  traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        shiftSection(ast, path.node, deltaInSizeEncoding);\n      }\n    }\n  });\n}\n\nexport function shrinkPaddedLEB128(ast, uint8Buffer) {\n  traverse(ast, {\n    SectionMetadata: function SectionMetadata(_ref2) {\n      var node = _ref2.node;\n      /**\n       * Section size\n       */\n\n      {\n        var newu32Encoded = encodeU32(node.size.value);\n        var newu32EncodedLen = newu32Encoded.length;\n        var start = node.size.loc.start.column;\n        var end = node.size.loc.end.column;\n        var oldu32EncodedLen = end - start;\n\n        if (newu32EncodedLen !== oldu32EncodedLen) {\n          var deltaInSizeEncoding = oldu32EncodedLen - newu32EncodedLen;\n          uint8Buffer = overrideBytesInBuffer(uint8Buffer, start, end, newu32Encoded);\n          shiftFollowingSections(ast, node, -deltaInSizeEncoding);\n        }\n      }\n    }\n  });\n  return uint8Buffer;\n}","map":{"version":3,"names":["traverse","shiftSection","encodeU32","overrideBytesInBuffer","shiftFollowingSections","ast","_ref","deltaInSizeEncoding","section","encounteredSection","SectionMetadata","path","node","shrinkPaddedLEB128","uint8Buffer","_ref2","newu32Encoded","size","value","newu32EncodedLen","length","start","loc","column","end","oldu32EncodedLen"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/@webassemblyjs/wasm-opt/esm/leb128.js"],"sourcesContent":["import { traverse, shiftSection } from \"@webassemblyjs/ast\";\nimport { encodeU32 } from \"@webassemblyjs/wasm-gen/lib/encoder\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\n\nfunction shiftFollowingSections(ast, _ref, deltaInSizeEncoding) {\n  var section = _ref.section;\n  // Once we hit our section every that is after needs to be shifted by the delta\n  var encounteredSection = false;\n  traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        shiftSection(ast, path.node, deltaInSizeEncoding);\n      }\n    }\n  });\n}\n\nexport function shrinkPaddedLEB128(ast, uint8Buffer) {\n  traverse(ast, {\n    SectionMetadata: function SectionMetadata(_ref2) {\n      var node = _ref2.node;\n\n      /**\n       * Section size\n       */\n      {\n        var newu32Encoded = encodeU32(node.size.value);\n        var newu32EncodedLen = newu32Encoded.length;\n        var start = node.size.loc.start.column;\n        var end = node.size.loc.end.column;\n        var oldu32EncodedLen = end - start;\n\n        if (newu32EncodedLen !== oldu32EncodedLen) {\n          var deltaInSizeEncoding = oldu32EncodedLen - newu32EncodedLen;\n          uint8Buffer = overrideBytesInBuffer(uint8Buffer, start, end, newu32Encoded);\n          shiftFollowingSections(ast, node, -deltaInSizeEncoding);\n        }\n      }\n    }\n  });\n  return uint8Buffer;\n}"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,YAAnB,QAAuC,oBAAvC;AACA,SAASC,SAAT,QAA0B,qCAA1B;AACA,SAASC,qBAAT,QAAsC,8BAAtC;;AAEA,SAASC,sBAAT,CAAgCC,GAAhC,EAAqCC,IAArC,EAA2CC,mBAA3C,EAAgE;EAC9D,IAAIC,OAAO,GAAGF,IAAI,CAACE,OAAnB,CAD8D,CAE9D;;EACA,IAAIC,kBAAkB,GAAG,KAAzB;EACAT,QAAQ,CAACK,GAAD,EAAM;IACZK,eAAe,EAAE,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;MAC9C,IAAIA,IAAI,CAACC,IAAL,CAAUJ,OAAV,KAAsBA,OAA1B,EAAmC;QACjCC,kBAAkB,GAAG,IAArB;QACA;MACD;;MAED,IAAIA,kBAAkB,KAAK,IAA3B,EAAiC;QAC/BR,YAAY,CAACI,GAAD,EAAMM,IAAI,CAACC,IAAX,EAAiBL,mBAAjB,CAAZ;MACD;IACF;EAVW,CAAN,CAAR;AAYD;;AAED,OAAO,SAASM,kBAAT,CAA4BR,GAA5B,EAAiCS,WAAjC,EAA8C;EACnDd,QAAQ,CAACK,GAAD,EAAM;IACZK,eAAe,EAAE,SAASA,eAAT,CAAyBK,KAAzB,EAAgC;MAC/C,IAAIH,IAAI,GAAGG,KAAK,CAACH,IAAjB;MAEA;AACN;AACA;;MACM;QACE,IAAII,aAAa,GAAGd,SAAS,CAACU,IAAI,CAACK,IAAL,CAAUC,KAAX,CAA7B;QACA,IAAIC,gBAAgB,GAAGH,aAAa,CAACI,MAArC;QACA,IAAIC,KAAK,GAAGT,IAAI,CAACK,IAAL,CAAUK,GAAV,CAAcD,KAAd,CAAoBE,MAAhC;QACA,IAAIC,GAAG,GAAGZ,IAAI,CAACK,IAAL,CAAUK,GAAV,CAAcE,GAAd,CAAkBD,MAA5B;QACA,IAAIE,gBAAgB,GAAGD,GAAG,GAAGH,KAA7B;;QAEA,IAAIF,gBAAgB,KAAKM,gBAAzB,EAA2C;UACzC,IAAIlB,mBAAmB,GAAGkB,gBAAgB,GAAGN,gBAA7C;UACAL,WAAW,GAAGX,qBAAqB,CAACW,WAAD,EAAcO,KAAd,EAAqBG,GAArB,EAA0BR,aAA1B,CAAnC;UACAZ,sBAAsB,CAACC,GAAD,EAAMO,IAAN,EAAY,CAACL,mBAAb,CAAtB;QACD;MACF;IACF;EApBW,CAAN,CAAR;EAsBA,OAAOO,WAAP;AACD"},"metadata":{},"sourceType":"module"}