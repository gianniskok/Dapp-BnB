{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction globToRegExp(glob) {\n  // * [^\\\\\\/]*\n  // /**/ /.+/\n  // ^* \\./.+ (concord special)\n  // ? [^\\\\\\/]\n  // [!...] [^...]\n  // [^...] [^...]\n  // / [\\\\\\/]\n  // {...,...} (...|...)\n  // ?(...|...) (...|...)?\n  // +(...|...) (...|...)+\n  // *(...|...) (...|...)*\n  // @(...|...) (...|...)\n  if (/^\\(.+\\)$/.test(glob)) {\n    // allow to pass an RegExp in brackets\n    return new RegExp(glob.substr(1, glob.length - 2));\n  }\n\n  const tokens = tokenize(glob);\n  const process = createRoot();\n  const regExpStr = tokens.map(process).join(\"\");\n  return new RegExp(\"^\" + regExpStr + \"$\");\n}\n\nconst SIMPLE_TOKENS = {\n  \"@(\": \"one\",\n  \"?(\": \"zero-one\",\n  \"+(\": \"one-many\",\n  \"*(\": \"zero-many\",\n  \"|\": \"segment-sep\",\n  \"/**/\": \"any-path-segments\",\n  \"**\": \"any-path\",\n  \"*\": \"any-path-segment\",\n  \"?\": \"any-char\",\n  \"{\": \"or\",\n  \"/\": \"path-sep\",\n  \",\": \"comma\",\n  \")\": \"closing-segment\",\n  \"}\": \"closing-or\"\n};\n\nfunction tokenize(glob) {\n  return glob.split(/([@?+*]\\(|\\/\\*\\*\\/|\\*\\*|[?*]|\\[[!^]?(?:[^\\]\\\\]|\\\\.)+\\]|\\{|,|\\/|[|)}])/g).map(item => {\n    if (!item) return null;\n    const t = SIMPLE_TOKENS[item];\n\n    if (t) {\n      return {\n        type: t\n      };\n    }\n\n    if (item[0] === \"[\") {\n      if (item[1] === \"^\" || item[1] === \"!\") {\n        return {\n          type: \"inverted-char-set\",\n          value: item.substr(2, item.length - 3)\n        };\n      } else {\n        return {\n          type: \"char-set\",\n          value: item.substr(1, item.length - 2)\n        };\n      }\n    }\n\n    return {\n      type: \"string\",\n      value: item\n    };\n  }).filter(Boolean).concat({\n    type: \"end\"\n  });\n}\n\nfunction createRoot() {\n  const inOr = [];\n  const process = createSeqment();\n  let initial = true;\n  return function (token) {\n    switch (token.type) {\n      case \"or\":\n        inOr.push(initial);\n        return \"(\";\n\n      case \"comma\":\n        if (inOr.length) {\n          initial = inOr[inOr.length - 1];\n          return \"|\";\n        } else {\n          return process({\n            type: \"string\",\n            value: \",\"\n          }, initial);\n        }\n\n      case \"closing-or\":\n        if (inOr.length === 0) throw new Error(\"Unmatched '}'\");\n        inOr.pop();\n        return \")\";\n\n      case \"end\":\n        if (inOr.length) throw new Error(\"Unmatched '{'\");\n        return process(token, initial);\n\n      default:\n        {\n          const result = process(token, initial);\n          initial = false;\n          return result;\n        }\n    }\n  };\n}\n\nfunction createSeqment() {\n  const inSeqment = [];\n  const process = createSimple();\n  return function (token, initial) {\n    switch (token.type) {\n      case \"one\":\n      case \"one-many\":\n      case \"zero-many\":\n      case \"zero-one\":\n        inSeqment.push(token.type);\n        return \"(\";\n\n      case \"segment-sep\":\n        if (inSeqment.length) {\n          return \"|\";\n        } else {\n          return process({\n            type: \"string\",\n            value: \"|\"\n          }, initial);\n        }\n\n      case \"closing-segment\":\n        {\n          const segment = inSeqment.pop();\n\n          switch (segment) {\n            case \"one\":\n              return \")\";\n\n            case \"one-many\":\n              return \")+\";\n\n            case \"zero-many\":\n              return \")*\";\n\n            case \"zero-one\":\n              return \")?\";\n          }\n\n          throw new Error(\"Unexcepted segment \" + segment);\n        }\n\n      case \"end\":\n        if (inSeqment.length > 0) {\n          throw new Error(\"Unmatched segment, missing ')'\");\n        }\n\n        return process(token, initial);\n\n      default:\n        return process(token, initial);\n    }\n  };\n}\n\nfunction createSimple() {\n  return function (token, initial) {\n    switch (token.type) {\n      case \"path-sep\":\n        return \"[\\\\\\\\/]+\";\n\n      case \"any-path-segments\":\n        return \"[\\\\\\\\/]+(?:(.+)[\\\\\\\\/]+)?\";\n\n      case \"any-path\":\n        return \"(.*)\";\n\n      case \"any-path-segment\":\n        if (initial) {\n          return \"\\\\.[\\\\\\\\/]+(?:.*[\\\\\\\\/]+)?([^\\\\\\\\/]+)\";\n        } else {\n          return \"([^\\\\\\\\/]*)\";\n        }\n\n      case \"any-char\":\n        return \"[^\\\\\\\\/]\";\n\n      case \"inverted-char-set\":\n        return \"[^\" + token.value + \"]\";\n\n      case \"char-set\":\n        return \"[\" + token.value + \"]\";\n\n      case \"string\":\n        return token.value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n\n      case \"end\":\n        return \"\";\n\n      default:\n        throw new Error(\"Unsupported token '\" + token.type + \"'\");\n    }\n  };\n}\n\nexports.globToRegExp = globToRegExp;","map":{"version":3,"names":["globToRegExp","glob","test","RegExp","substr","length","tokens","tokenize","process","createRoot","regExpStr","map","join","SIMPLE_TOKENS","split","item","t","type","value","filter","Boolean","concat","inOr","createSeqment","initial","token","push","Error","pop","result","inSeqment","createSimple","segment","replace","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/enhanced-resolve/lib/globToRegExp.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nfunction globToRegExp(glob) {\n\t// * [^\\\\\\/]*\n\t// /**/ /.+/\n\t// ^* \\./.+ (concord special)\n\t// ? [^\\\\\\/]\n\t// [!...] [^...]\n\t// [^...] [^...]\n\t// / [\\\\\\/]\n\t// {...,...} (...|...)\n\t// ?(...|...) (...|...)?\n\t// +(...|...) (...|...)+\n\t// *(...|...) (...|...)*\n\t// @(...|...) (...|...)\n\tif (/^\\(.+\\)$/.test(glob)) {\n\t\t// allow to pass an RegExp in brackets\n\t\treturn new RegExp(glob.substr(1, glob.length - 2));\n\t}\n\tconst tokens = tokenize(glob);\n\tconst process = createRoot();\n\tconst regExpStr = tokens.map(process).join(\"\");\n\treturn new RegExp(\"^\" + regExpStr + \"$\");\n}\n\nconst SIMPLE_TOKENS = {\n\t\"@(\": \"one\",\n\t\"?(\": \"zero-one\",\n\t\"+(\": \"one-many\",\n\t\"*(\": \"zero-many\",\n\t\"|\": \"segment-sep\",\n\t\"/**/\": \"any-path-segments\",\n\t\"**\": \"any-path\",\n\t\"*\": \"any-path-segment\",\n\t\"?\": \"any-char\",\n\t\"{\": \"or\",\n\t\"/\": \"path-sep\",\n\t\",\": \"comma\",\n\t\")\": \"closing-segment\",\n\t\"}\": \"closing-or\"\n};\n\nfunction tokenize(glob) {\n\treturn glob\n\t\t.split(\n\t\t\t/([@?+*]\\(|\\/\\*\\*\\/|\\*\\*|[?*]|\\[[!^]?(?:[^\\]\\\\]|\\\\.)+\\]|\\{|,|\\/|[|)}])/g\n\t\t)\n\t\t.map(item => {\n\t\t\tif (!item) return null;\n\t\t\tconst t = SIMPLE_TOKENS[item];\n\t\t\tif (t) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: t\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (item[0] === \"[\") {\n\t\t\t\tif (item[1] === \"^\" || item[1] === \"!\") {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"inverted-char-set\",\n\t\t\t\t\t\tvalue: item.substr(2, item.length - 3)\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"char-set\",\n\t\t\t\t\t\tvalue: item.substr(1, item.length - 2)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ttype: \"string\",\n\t\t\t\tvalue: item\n\t\t\t};\n\t\t})\n\t\t.filter(Boolean)\n\t\t.concat({\n\t\t\ttype: \"end\"\n\t\t});\n}\n\nfunction createRoot() {\n\tconst inOr = [];\n\tconst process = createSeqment();\n\tlet initial = true;\n\treturn function(token) {\n\t\tswitch (token.type) {\n\t\t\tcase \"or\":\n\t\t\t\tinOr.push(initial);\n\t\t\t\treturn \"(\";\n\t\t\tcase \"comma\":\n\t\t\t\tif (inOr.length) {\n\t\t\t\t\tinitial = inOr[inOr.length - 1];\n\t\t\t\t\treturn \"|\";\n\t\t\t\t} else {\n\t\t\t\t\treturn process(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\tvalue: \",\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinitial\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\tcase \"closing-or\":\n\t\t\t\tif (inOr.length === 0) throw new Error(\"Unmatched '}'\");\n\t\t\t\tinOr.pop();\n\t\t\t\treturn \")\";\n\t\t\tcase \"end\":\n\t\t\t\tif (inOr.length) throw new Error(\"Unmatched '{'\");\n\t\t\t\treturn process(token, initial);\n\t\t\tdefault: {\n\t\t\t\tconst result = process(token, initial);\n\t\t\t\tinitial = false;\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction createSeqment() {\n\tconst inSeqment = [];\n\tconst process = createSimple();\n\treturn function(token, initial) {\n\t\tswitch (token.type) {\n\t\t\tcase \"one\":\n\t\t\tcase \"one-many\":\n\t\t\tcase \"zero-many\":\n\t\t\tcase \"zero-one\":\n\t\t\t\tinSeqment.push(token.type);\n\t\t\t\treturn \"(\";\n\t\t\tcase \"segment-sep\":\n\t\t\t\tif (inSeqment.length) {\n\t\t\t\t\treturn \"|\";\n\t\t\t\t} else {\n\t\t\t\t\treturn process(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\tvalue: \"|\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinitial\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\tcase \"closing-segment\": {\n\t\t\t\tconst segment = inSeqment.pop();\n\t\t\t\tswitch (segment) {\n\t\t\t\t\tcase \"one\":\n\t\t\t\t\t\treturn \")\";\n\t\t\t\t\tcase \"one-many\":\n\t\t\t\t\t\treturn \")+\";\n\t\t\t\t\tcase \"zero-many\":\n\t\t\t\t\t\treturn \")*\";\n\t\t\t\t\tcase \"zero-one\":\n\t\t\t\t\t\treturn \")?\";\n\t\t\t\t}\n\t\t\t\tthrow new Error(\"Unexcepted segment \" + segment);\n\t\t\t}\n\t\t\tcase \"end\":\n\t\t\t\tif (inSeqment.length > 0) {\n\t\t\t\t\tthrow new Error(\"Unmatched segment, missing ')'\");\n\t\t\t\t}\n\t\t\t\treturn process(token, initial);\n\t\t\tdefault:\n\t\t\t\treturn process(token, initial);\n\t\t}\n\t};\n}\n\nfunction createSimple() {\n\treturn function(token, initial) {\n\t\tswitch (token.type) {\n\t\t\tcase \"path-sep\":\n\t\t\t\treturn \"[\\\\\\\\/]+\";\n\t\t\tcase \"any-path-segments\":\n\t\t\t\treturn \"[\\\\\\\\/]+(?:(.+)[\\\\\\\\/]+)?\";\n\t\t\tcase \"any-path\":\n\t\t\t\treturn \"(.*)\";\n\t\t\tcase \"any-path-segment\":\n\t\t\t\tif (initial) {\n\t\t\t\t\treturn \"\\\\.[\\\\\\\\/]+(?:.*[\\\\\\\\/]+)?([^\\\\\\\\/]+)\";\n\t\t\t\t} else {\n\t\t\t\t\treturn \"([^\\\\\\\\/]*)\";\n\t\t\t\t}\n\t\t\tcase \"any-char\":\n\t\t\t\treturn \"[^\\\\\\\\/]\";\n\t\t\tcase \"inverted-char-set\":\n\t\t\t\treturn \"[^\" + token.value + \"]\";\n\t\t\tcase \"char-set\":\n\t\t\t\treturn \"[\" + token.value + \"]\";\n\t\t\tcase \"string\":\n\t\t\t\treturn token.value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n\t\t\tcase \"end\":\n\t\t\t\treturn \"\";\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Unsupported token '\" + token.type + \"'\");\n\t\t}\n\t};\n}\n\nexports.globToRegExp = globToRegExp;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}