{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../../schemas/plugins/optimize/OccurrenceOrderModuleIdsPlugin.json\");\n/** @typedef {import(\"../../declarations/plugins/optimize/OccurrenceOrderModuleIdsPlugin\").OccurrenceOrderModuleIdsPluginOptions} OccurrenceOrderModuleIdsPluginOptions */\n\n\nclass OccurrenceOrderModuleIdsPlugin {\n  /**\n   * @param {OccurrenceOrderModuleIdsPluginOptions=} options options object\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    validateOptions(schema, options, \"Occurrence Order Module Ids Plugin\");\n    this.options = options;\n  }\n\n  apply(compiler) {\n    const prioritiseInitial = this.options.prioritiseInitial;\n    compiler.hooks.compilation.tap(\"OccurrenceOrderModuleIdsPlugin\", compilation => {\n      compilation.hooks.optimizeModuleOrder.tap(\"OccurrenceOrderModuleIdsPlugin\", modules => {\n        const occursInInitialChunksMap = new Map();\n        const occursInAllChunksMap = new Map();\n        const initialChunkChunkMap = new Map();\n        const entryCountMap = new Map();\n\n        for (const m of modules) {\n          let initial = 0;\n          let entry = 0;\n\n          for (const c of m.chunksIterable) {\n            if (c.canBeInitial()) initial++;\n            if (c.entryModule === m) entry++;\n          }\n\n          initialChunkChunkMap.set(m, initial);\n          entryCountMap.set(m, entry);\n        }\n\n        const countOccursInEntry = (sum, r) => {\n          if (!r.module) {\n            return sum;\n          }\n\n          const count = initialChunkChunkMap.get(r.module);\n\n          if (!count) {\n            return sum;\n          }\n\n          return sum + count;\n        };\n\n        const countOccurs = (sum, r) => {\n          if (!r.module) {\n            return sum;\n          }\n\n          let factor = 1;\n\n          if (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n            factor = r.dependency.getNumberOfIdOccurrences();\n          }\n\n          if (factor === 0) {\n            return sum;\n          }\n\n          return sum + factor * r.module.getNumberOfChunks();\n        };\n\n        if (prioritiseInitial) {\n          for (const m of modules) {\n            const result = m.reasons.reduce(countOccursInEntry, 0) + initialChunkChunkMap.get(m) + entryCountMap.get(m);\n            occursInInitialChunksMap.set(m, result);\n          }\n        }\n\n        const originalOrder = new Map();\n        let i = 0;\n\n        for (const m of modules) {\n          const result = m.reasons.reduce(countOccurs, 0) + m.getNumberOfChunks() + entryCountMap.get(m);\n          occursInAllChunksMap.set(m, result);\n          originalOrder.set(m, i++);\n        }\n\n        modules.sort((a, b) => {\n          if (prioritiseInitial) {\n            const aEntryOccurs = occursInInitialChunksMap.get(a);\n            const bEntryOccurs = occursInInitialChunksMap.get(b);\n            if (aEntryOccurs > bEntryOccurs) return -1;\n            if (aEntryOccurs < bEntryOccurs) return 1;\n          }\n\n          const aOccurs = occursInAllChunksMap.get(a);\n          const bOccurs = occursInAllChunksMap.get(b);\n          if (aOccurs > bOccurs) return -1;\n          if (aOccurs < bOccurs) return 1;\n          const orgA = originalOrder.get(a);\n          const orgB = originalOrder.get(b);\n          return orgA - orgB;\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = OccurrenceOrderModuleIdsPlugin;","map":{"version":3,"names":["validateOptions","require","schema","OccurrenceOrderModuleIdsPlugin","constructor","options","apply","compiler","prioritiseInitial","hooks","compilation","tap","optimizeModuleOrder","modules","occursInInitialChunksMap","Map","occursInAllChunksMap","initialChunkChunkMap","entryCountMap","m","initial","entry","c","chunksIterable","canBeInitial","entryModule","set","countOccursInEntry","sum","r","module","count","get","countOccurs","factor","dependency","getNumberOfIdOccurrences","getNumberOfChunks","result","reasons","reduce","originalOrder","i","sort","a","b","aEntryOccurs","bEntryOccurs","aOccurs","bOccurs","orgA","orgB","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/optimize/OccurrenceModuleOrderPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../../schemas/plugins/optimize/OccurrenceOrderModuleIdsPlugin.json\");\n\n/** @typedef {import(\"../../declarations/plugins/optimize/OccurrenceOrderModuleIdsPlugin\").OccurrenceOrderModuleIdsPluginOptions} OccurrenceOrderModuleIdsPluginOptions */\n\nclass OccurrenceOrderModuleIdsPlugin {\n\t/**\n\t * @param {OccurrenceOrderModuleIdsPluginOptions=} options options object\n\t */\n\tconstructor(options = {}) {\n\t\tvalidateOptions(schema, options, \"Occurrence Order Module Ids Plugin\");\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tconst prioritiseInitial = this.options.prioritiseInitial;\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"OccurrenceOrderModuleIdsPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.optimizeModuleOrder.tap(\n\t\t\t\t\t\"OccurrenceOrderModuleIdsPlugin\",\n\t\t\t\t\tmodules => {\n\t\t\t\t\t\tconst occursInInitialChunksMap = new Map();\n\t\t\t\t\t\tconst occursInAllChunksMap = new Map();\n\n\t\t\t\t\t\tconst initialChunkChunkMap = new Map();\n\t\t\t\t\t\tconst entryCountMap = new Map();\n\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\tlet initial = 0;\n\t\t\t\t\t\t\tlet entry = 0;\n\t\t\t\t\t\t\tfor (const c of m.chunksIterable) {\n\t\t\t\t\t\t\t\tif (c.canBeInitial()) initial++;\n\t\t\t\t\t\t\t\tif (c.entryModule === m) entry++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinitialChunkChunkMap.set(m, initial);\n\t\t\t\t\t\t\tentryCountMap.set(m, entry);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst countOccursInEntry = (sum, r) => {\n\t\t\t\t\t\t\tif (!r.module) {\n\t\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst count = initialChunkChunkMap.get(r.module);\n\t\t\t\t\t\t\tif (!count) {\n\t\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn sum + count;\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst countOccurs = (sum, r) => {\n\t\t\t\t\t\t\tif (!r.module) {\n\t\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet factor = 1;\n\t\t\t\t\t\t\tif (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n\t\t\t\t\t\t\t\tfactor = r.dependency.getNumberOfIdOccurrences();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (factor === 0) {\n\t\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn sum + factor * r.module.getNumberOfChunks();\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (prioritiseInitial) {\n\t\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\t\t\tm.reasons.reduce(countOccursInEntry, 0) +\n\t\t\t\t\t\t\t\t\tinitialChunkChunkMap.get(m) +\n\t\t\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\t\t\toccursInInitialChunksMap.set(m, result);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst originalOrder = new Map();\n\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\t\tm.reasons.reduce(countOccurs, 0) +\n\t\t\t\t\t\t\t\tm.getNumberOfChunks() +\n\t\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\t\toccursInAllChunksMap.set(m, result);\n\t\t\t\t\t\t\toriginalOrder.set(m, i++);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmodules.sort((a, b) => {\n\t\t\t\t\t\t\tif (prioritiseInitial) {\n\t\t\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst aOccurs = occursInAllChunksMap.get(a);\n\t\t\t\t\t\t\tconst bOccurs = occursInAllChunksMap.get(b);\n\t\t\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\t\t\tconst orgA = originalOrder.get(a);\n\t\t\t\t\t\t\tconst orgB = originalOrder.get(b);\n\t\t\t\t\t\t\treturn orgA - orgB;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = OccurrenceOrderModuleIdsPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}