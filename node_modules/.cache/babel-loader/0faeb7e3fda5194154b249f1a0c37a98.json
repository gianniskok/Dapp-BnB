{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Template = require(\"../Template\");\n\nconst WebAssemblyUtils = require(\"./WebAssemblyUtils\");\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../MainTemplate\")} MainTemplate */\n// Get all wasm modules\n\n\nconst getAllWasmModules = chunk => {\n  const wasmModules = chunk.getAllAsyncChunks();\n  const array = [];\n\n  for (const chunk of wasmModules) {\n    for (const m of chunk.modulesIterable) {\n      if (m.type.startsWith(\"webassembly\")) {\n        array.push(m);\n      }\n    }\n  }\n\n  return array;\n};\n/**\n * generates the import object function for a module\n * @param {Module} module the module\n * @param {boolean} mangle mangle imports\n * @returns {string} source code\n */\n\n\nconst generateImportObject = (module, mangle) => {\n  const waitForInstances = new Map();\n  const properties = [];\n  const usedWasmDependencies = WebAssemblyUtils.getUsedDependencies(module, mangle);\n\n  for (const usedDep of usedWasmDependencies) {\n    const dep = usedDep.dependency;\n    const importedModule = dep.module;\n    const exportName = dep.name;\n    const usedName = importedModule && importedModule.isUsed(exportName);\n    const description = dep.description;\n    const direct = dep.onlyDirectImport;\n    const module = usedDep.module;\n    const name = usedDep.name;\n\n    if (direct) {\n      const instanceVar = `m${waitForInstances.size}`;\n      waitForInstances.set(instanceVar, importedModule.id);\n      properties.push({\n        module,\n        name,\n        value: `${instanceVar}[${JSON.stringify(usedName)}]`\n      });\n    } else {\n      const params = description.signature.params.map((param, k) => \"p\" + k + param.valtype);\n      const mod = `installedModules[${JSON.stringify(importedModule.id)}]`;\n      const func = `${mod}.exports[${JSON.stringify(usedName)}]`;\n      properties.push({\n        module,\n        name,\n        value: Template.asString([(importedModule.type.startsWith(\"webassembly\") ? `${mod} ? ${func} : ` : \"\") + `function(${params}) {`, Template.indent([`return ${func}(${params});`]), \"}\"])\n      });\n    }\n  }\n\n  let importObject;\n\n  if (mangle) {\n    importObject = [\"return {\", Template.indent([properties.map(p => `${JSON.stringify(p.name)}: ${p.value}`).join(\",\\n\")]), \"};\"];\n  } else {\n    const propertiesByModule = new Map();\n\n    for (const p of properties) {\n      let list = propertiesByModule.get(p.module);\n\n      if (list === undefined) {\n        propertiesByModule.set(p.module, list = []);\n      }\n\n      list.push(p);\n    }\n\n    importObject = [\"return {\", Template.indent([Array.from(propertiesByModule, _ref => {\n      let [module, list] = _ref;\n      return Template.asString([`${JSON.stringify(module)}: {`, Template.indent([list.map(p => `${JSON.stringify(p.name)}: ${p.value}`).join(\",\\n\")]), \"}\"]);\n    }).join(\",\\n\")]), \"};\"];\n  }\n\n  if (waitForInstances.size === 1) {\n    const moduleId = Array.from(waitForInstances.values())[0];\n    const promise = `installedWasmModules[${JSON.stringify(moduleId)}]`;\n    const variable = Array.from(waitForInstances.keys())[0];\n    return Template.asString([`${JSON.stringify(module.id)}: function() {`, Template.indent([`return promiseResolve().then(function() { return ${promise}; }).then(function(${variable}) {`, Template.indent(importObject), \"});\"]), \"},\"]);\n  } else if (waitForInstances.size > 0) {\n    const promises = Array.from(waitForInstances.values(), id => `installedWasmModules[${JSON.stringify(id)}]`).join(\", \");\n    const variables = Array.from(waitForInstances.keys(), (name, i) => `${name} = array[${i}]`).join(\", \");\n    return Template.asString([`${JSON.stringify(module.id)}: function() {`, Template.indent([`return promiseResolve().then(function() { return Promise.all([${promises}]); }).then(function(array) {`, Template.indent([`var ${variables};`, ...importObject]), \"});\"]), \"},\"]);\n  } else {\n    return Template.asString([`${JSON.stringify(module.id)}: function() {`, Template.indent(importObject), \"},\"]);\n  }\n};\n\nclass WasmMainTemplatePlugin {\n  constructor(_ref2) {\n    let {\n      generateLoadBinaryCode,\n      supportsStreaming,\n      mangleImports\n    } = _ref2;\n    this.generateLoadBinaryCode = generateLoadBinaryCode;\n    this.supportsStreaming = supportsStreaming;\n    this.mangleImports = mangleImports;\n  }\n  /**\n   * @param {MainTemplate} mainTemplate main template\n   * @returns {void}\n   */\n\n\n  apply(mainTemplate) {\n    mainTemplate.hooks.localVars.tap(\"WasmMainTemplatePlugin\", (source, chunk) => {\n      const wasmModules = getAllWasmModules(chunk);\n      if (wasmModules.length === 0) return source;\n      const importObjects = wasmModules.map(module => {\n        return generateImportObject(module, this.mangleImports);\n      });\n      return Template.asString([source, \"\", \"// object to store loaded and loading wasm modules\", \"var installedWasmModules = {};\", \"\", // This function is used to delay reading the installed wasm module promises\n      // by a microtask. Sorting them doesn't help because there are egdecases where\n      // sorting is not possible (modules splitted into different chunks).\n      // So we not even trying and solve this by a microtask delay.\n      \"function promiseResolve() { return Promise.resolve(); }\", \"\", \"var wasmImportObjects = {\", Template.indent(importObjects), \"};\"]);\n    });\n    mainTemplate.hooks.requireEnsure.tap(\"WasmMainTemplatePlugin\", (source, chunk, hash) => {\n      const webassemblyModuleFilename = mainTemplate.outputOptions.webassemblyModuleFilename;\n      const chunkModuleMaps = chunk.getChunkModuleMaps(m => m.type.startsWith(\"webassembly\"));\n      if (Object.keys(chunkModuleMaps.id).length === 0) return source;\n      const wasmModuleSrcPath = mainTemplate.getAssetPath(JSON.stringify(webassemblyModuleFilename), {\n        hash: `\" + ${mainTemplate.renderCurrentHashCode(hash)} + \"`,\n        hashWithLength: length => `\" + ${mainTemplate.renderCurrentHashCode(hash, length)} + \"`,\n        module: {\n          id: '\" + wasmModuleId + \"',\n          hash: `\" + ${JSON.stringify(chunkModuleMaps.hash)}[wasmModuleId] + \"`,\n\n          hashWithLength(length) {\n            const shortChunkHashMap = Object.create(null);\n\n            for (const wasmModuleId of Object.keys(chunkModuleMaps.hash)) {\n              if (typeof chunkModuleMaps.hash[wasmModuleId] === \"string\") {\n                shortChunkHashMap[wasmModuleId] = chunkModuleMaps.hash[wasmModuleId].substr(0, length);\n              }\n            }\n\n            return `\" + ${JSON.stringify(shortChunkHashMap)}[wasmModuleId] + \"`;\n          }\n\n        }\n      });\n\n      const createImportObject = content => this.mangleImports ? `{ ${JSON.stringify(WebAssemblyUtils.MANGLED_MODULE)}: ${content} }` : content;\n\n      return Template.asString([source, \"\", \"// Fetch + compile chunk loading for webassembly\", \"\", `var wasmModules = ${JSON.stringify(chunkModuleMaps.id)}[chunkId] || [];`, \"\", \"wasmModules.forEach(function(wasmModuleId) {\", Template.indent([\"var installedWasmModuleData = installedWasmModules[wasmModuleId];\", \"\", '// a Promise means \"currently loading\" or \"already loaded\".', \"if(installedWasmModuleData)\", Template.indent([\"promises.push(installedWasmModuleData);\"]), \"else {\", Template.indent([`var importObject = wasmImportObjects[wasmModuleId]();`, `var req = ${this.generateLoadBinaryCode(wasmModuleSrcPath)};`, \"var promise;\", this.supportsStreaming ? Template.asString([\"if(importObject instanceof Promise && typeof WebAssembly.compileStreaming === 'function') {\", Template.indent([\"promise = Promise.all([WebAssembly.compileStreaming(req), importObject]).then(function(items) {\", Template.indent([`return WebAssembly.instantiate(items[0], ${createImportObject(\"items[1]\")});`]), \"});\"]), \"} else if(typeof WebAssembly.instantiateStreaming === 'function') {\", Template.indent([`promise = WebAssembly.instantiateStreaming(req, ${createImportObject(\"importObject\")});`])]) : Template.asString([\"if(importObject instanceof Promise) {\", Template.indent([\"var bytesPromise = req.then(function(x) { return x.arrayBuffer(); });\", \"promise = Promise.all([\", Template.indent([\"bytesPromise.then(function(bytes) { return WebAssembly.compile(bytes); }),\", \"importObject\"]), \"]).then(function(items) {\", Template.indent([`return WebAssembly.instantiate(items[0], ${createImportObject(\"items[1]\")});`]), \"});\"])]), \"} else {\", Template.indent([\"var bytesPromise = req.then(function(x) { return x.arrayBuffer(); });\", \"promise = bytesPromise.then(function(bytes) {\", Template.indent([`return WebAssembly.instantiate(bytes, ${createImportObject(\"importObject\")});`]), \"});\"]), \"}\", \"promises.push(installedWasmModules[wasmModuleId] = promise.then(function(res) {\", Template.indent([`return ${mainTemplate.requireFn}.w[wasmModuleId] = (res.instance || res).exports;`]), \"}));\"]), \"}\"]), \"});\"]);\n    });\n    mainTemplate.hooks.requireExtensions.tap(\"WasmMainTemplatePlugin\", (source, chunk) => {\n      if (!chunk.hasModuleInGraph(m => m.type.startsWith(\"webassembly\"))) {\n        return source;\n      }\n\n      return Template.asString([source, \"\", \"// object with all WebAssembly.instance exports\", `${mainTemplate.requireFn}.w = {};`]);\n    });\n    mainTemplate.hooks.hash.tap(\"WasmMainTemplatePlugin\", hash => {\n      hash.update(\"WasmMainTemplatePlugin\");\n      hash.update(\"2\");\n    });\n  }\n\n}\n\nmodule.exports = WasmMainTemplatePlugin;","map":{"version":3,"names":["Template","require","WebAssemblyUtils","getAllWasmModules","chunk","wasmModules","getAllAsyncChunks","array","m","modulesIterable","type","startsWith","push","generateImportObject","module","mangle","waitForInstances","Map","properties","usedWasmDependencies","getUsedDependencies","usedDep","dep","dependency","importedModule","exportName","name","usedName","isUsed","description","direct","onlyDirectImport","instanceVar","size","set","id","value","JSON","stringify","params","signature","map","param","k","valtype","mod","func","asString","indent","importObject","p","join","propertiesByModule","list","get","undefined","Array","from","moduleId","values","promise","variable","keys","promises","variables","i","WasmMainTemplatePlugin","constructor","generateLoadBinaryCode","supportsStreaming","mangleImports","apply","mainTemplate","hooks","localVars","tap","source","length","importObjects","requireEnsure","hash","webassemblyModuleFilename","outputOptions","chunkModuleMaps","getChunkModuleMaps","Object","wasmModuleSrcPath","getAssetPath","renderCurrentHashCode","hashWithLength","shortChunkHashMap","create","wasmModuleId","substr","createImportObject","content","MANGLED_MODULE","requireFn","requireExtensions","hasModuleInGraph","update","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/wasm/WasmMainTemplatePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Template = require(\"../Template\");\nconst WebAssemblyUtils = require(\"./WebAssemblyUtils\");\n\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../MainTemplate\")} MainTemplate */\n\n// Get all wasm modules\nconst getAllWasmModules = chunk => {\n\tconst wasmModules = chunk.getAllAsyncChunks();\n\tconst array = [];\n\tfor (const chunk of wasmModules) {\n\t\tfor (const m of chunk.modulesIterable) {\n\t\t\tif (m.type.startsWith(\"webassembly\")) {\n\t\t\t\tarray.push(m);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn array;\n};\n\n/**\n * generates the import object function for a module\n * @param {Module} module the module\n * @param {boolean} mangle mangle imports\n * @returns {string} source code\n */\nconst generateImportObject = (module, mangle) => {\n\tconst waitForInstances = new Map();\n\tconst properties = [];\n\tconst usedWasmDependencies = WebAssemblyUtils.getUsedDependencies(\n\t\tmodule,\n\t\tmangle\n\t);\n\tfor (const usedDep of usedWasmDependencies) {\n\t\tconst dep = usedDep.dependency;\n\t\tconst importedModule = dep.module;\n\t\tconst exportName = dep.name;\n\t\tconst usedName = importedModule && importedModule.isUsed(exportName);\n\t\tconst description = dep.description;\n\t\tconst direct = dep.onlyDirectImport;\n\n\t\tconst module = usedDep.module;\n\t\tconst name = usedDep.name;\n\n\t\tif (direct) {\n\t\t\tconst instanceVar = `m${waitForInstances.size}`;\n\t\t\twaitForInstances.set(instanceVar, importedModule.id);\n\t\t\tproperties.push({\n\t\t\t\tmodule,\n\t\t\t\tname,\n\t\t\t\tvalue: `${instanceVar}[${JSON.stringify(usedName)}]`\n\t\t\t});\n\t\t} else {\n\t\t\tconst params = description.signature.params.map(\n\t\t\t\t(param, k) => \"p\" + k + param.valtype\n\t\t\t);\n\n\t\t\tconst mod = `installedModules[${JSON.stringify(importedModule.id)}]`;\n\t\t\tconst func = `${mod}.exports[${JSON.stringify(usedName)}]`;\n\n\t\t\tproperties.push({\n\t\t\t\tmodule,\n\t\t\t\tname,\n\t\t\t\tvalue: Template.asString([\n\t\t\t\t\t(importedModule.type.startsWith(\"webassembly\")\n\t\t\t\t\t\t? `${mod} ? ${func} : `\n\t\t\t\t\t\t: \"\") + `function(${params}) {`,\n\t\t\t\t\tTemplate.indent([`return ${func}(${params});`]),\n\t\t\t\t\t\"}\"\n\t\t\t\t])\n\t\t\t});\n\t\t}\n\t}\n\n\tlet importObject;\n\tif (mangle) {\n\t\timportObject = [\n\t\t\t\"return {\",\n\t\t\tTemplate.indent([\n\t\t\t\tproperties.map(p => `${JSON.stringify(p.name)}: ${p.value}`).join(\",\\n\")\n\t\t\t]),\n\t\t\t\"};\"\n\t\t];\n\t} else {\n\t\tconst propertiesByModule = new Map();\n\t\tfor (const p of properties) {\n\t\t\tlet list = propertiesByModule.get(p.module);\n\t\t\tif (list === undefined) {\n\t\t\t\tpropertiesByModule.set(p.module, (list = []));\n\t\t\t}\n\t\t\tlist.push(p);\n\t\t}\n\t\timportObject = [\n\t\t\t\"return {\",\n\t\t\tTemplate.indent([\n\t\t\t\tArray.from(propertiesByModule, ([module, list]) => {\n\t\t\t\t\treturn Template.asString([\n\t\t\t\t\t\t`${JSON.stringify(module)}: {`,\n\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\tlist.map(p => `${JSON.stringify(p.name)}: ${p.value}`).join(\",\\n\")\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t\"}\"\n\t\t\t\t\t]);\n\t\t\t\t}).join(\",\\n\")\n\t\t\t]),\n\t\t\t\"};\"\n\t\t];\n\t}\n\n\tif (waitForInstances.size === 1) {\n\t\tconst moduleId = Array.from(waitForInstances.values())[0];\n\t\tconst promise = `installedWasmModules[${JSON.stringify(moduleId)}]`;\n\t\tconst variable = Array.from(waitForInstances.keys())[0];\n\t\treturn Template.asString([\n\t\t\t`${JSON.stringify(module.id)}: function() {`,\n\t\t\tTemplate.indent([\n\t\t\t\t`return promiseResolve().then(function() { return ${promise}; }).then(function(${variable}) {`,\n\t\t\t\tTemplate.indent(importObject),\n\t\t\t\t\"});\"\n\t\t\t]),\n\t\t\t\"},\"\n\t\t]);\n\t} else if (waitForInstances.size > 0) {\n\t\tconst promises = Array.from(\n\t\t\twaitForInstances.values(),\n\t\t\tid => `installedWasmModules[${JSON.stringify(id)}]`\n\t\t).join(\", \");\n\t\tconst variables = Array.from(\n\t\t\twaitForInstances.keys(),\n\t\t\t(name, i) => `${name} = array[${i}]`\n\t\t).join(\", \");\n\t\treturn Template.asString([\n\t\t\t`${JSON.stringify(module.id)}: function() {`,\n\t\t\tTemplate.indent([\n\t\t\t\t`return promiseResolve().then(function() { return Promise.all([${promises}]); }).then(function(array) {`,\n\t\t\t\tTemplate.indent([`var ${variables};`, ...importObject]),\n\t\t\t\t\"});\"\n\t\t\t]),\n\t\t\t\"},\"\n\t\t]);\n\t} else {\n\t\treturn Template.asString([\n\t\t\t`${JSON.stringify(module.id)}: function() {`,\n\t\t\tTemplate.indent(importObject),\n\t\t\t\"},\"\n\t\t]);\n\t}\n};\n\nclass WasmMainTemplatePlugin {\n\tconstructor({ generateLoadBinaryCode, supportsStreaming, mangleImports }) {\n\t\tthis.generateLoadBinaryCode = generateLoadBinaryCode;\n\t\tthis.supportsStreaming = supportsStreaming;\n\t\tthis.mangleImports = mangleImports;\n\t}\n\n\t/**\n\t * @param {MainTemplate} mainTemplate main template\n\t * @returns {void}\n\t */\n\tapply(mainTemplate) {\n\t\tmainTemplate.hooks.localVars.tap(\n\t\t\t\"WasmMainTemplatePlugin\",\n\t\t\t(source, chunk) => {\n\t\t\t\tconst wasmModules = getAllWasmModules(chunk);\n\t\t\t\tif (wasmModules.length === 0) return source;\n\t\t\t\tconst importObjects = wasmModules.map(module => {\n\t\t\t\t\treturn generateImportObject(module, this.mangleImports);\n\t\t\t\t});\n\t\t\t\treturn Template.asString([\n\t\t\t\t\tsource,\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"// object to store loaded and loading wasm modules\",\n\t\t\t\t\t\"var installedWasmModules = {};\",\n\t\t\t\t\t\"\",\n\t\t\t\t\t// This function is used to delay reading the installed wasm module promises\n\t\t\t\t\t// by a microtask. Sorting them doesn't help because there are egdecases where\n\t\t\t\t\t// sorting is not possible (modules splitted into different chunks).\n\t\t\t\t\t// So we not even trying and solve this by a microtask delay.\n\t\t\t\t\t\"function promiseResolve() { return Promise.resolve(); }\",\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"var wasmImportObjects = {\",\n\t\t\t\t\tTemplate.indent(importObjects),\n\t\t\t\t\t\"};\"\n\t\t\t\t]);\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.requireEnsure.tap(\n\t\t\t\"WasmMainTemplatePlugin\",\n\t\t\t(source, chunk, hash) => {\n\t\t\t\tconst webassemblyModuleFilename =\n\t\t\t\t\tmainTemplate.outputOptions.webassemblyModuleFilename;\n\n\t\t\t\tconst chunkModuleMaps = chunk.getChunkModuleMaps(m =>\n\t\t\t\t\tm.type.startsWith(\"webassembly\")\n\t\t\t\t);\n\t\t\t\tif (Object.keys(chunkModuleMaps.id).length === 0) return source;\n\t\t\t\tconst wasmModuleSrcPath = mainTemplate.getAssetPath(\n\t\t\t\t\tJSON.stringify(webassemblyModuleFilename),\n\t\t\t\t\t{\n\t\t\t\t\t\thash: `\" + ${mainTemplate.renderCurrentHashCode(hash)} + \"`,\n\t\t\t\t\t\thashWithLength: length =>\n\t\t\t\t\t\t\t`\" + ${mainTemplate.renderCurrentHashCode(hash, length)} + \"`,\n\t\t\t\t\t\tmodule: {\n\t\t\t\t\t\t\tid: '\" + wasmModuleId + \"',\n\t\t\t\t\t\t\thash: `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\tchunkModuleMaps.hash\n\t\t\t\t\t\t\t)}[wasmModuleId] + \"`,\n\t\t\t\t\t\t\thashWithLength(length) {\n\t\t\t\t\t\t\t\tconst shortChunkHashMap = Object.create(null);\n\t\t\t\t\t\t\t\tfor (const wasmModuleId of Object.keys(chunkModuleMaps.hash)) {\n\t\t\t\t\t\t\t\t\tif (typeof chunkModuleMaps.hash[wasmModuleId] === \"string\") {\n\t\t\t\t\t\t\t\t\t\tshortChunkHashMap[wasmModuleId] = chunkModuleMaps.hash[\n\t\t\t\t\t\t\t\t\t\t\twasmModuleId\n\t\t\t\t\t\t\t\t\t\t].substr(0, length);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\tshortChunkHashMap\n\t\t\t\t\t\t\t\t)}[wasmModuleId] + \"`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tconst createImportObject = content =>\n\t\t\t\t\tthis.mangleImports\n\t\t\t\t\t\t? `{ ${JSON.stringify(\n\t\t\t\t\t\t\t\tWebAssemblyUtils.MANGLED_MODULE\n\t\t\t\t\t\t  )}: ${content} }`\n\t\t\t\t\t\t: content;\n\t\t\t\treturn Template.asString([\n\t\t\t\t\tsource,\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"// Fetch + compile chunk loading for webassembly\",\n\t\t\t\t\t\"\",\n\t\t\t\t\t`var wasmModules = ${JSON.stringify(\n\t\t\t\t\t\tchunkModuleMaps.id\n\t\t\t\t\t)}[chunkId] || [];`,\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"wasmModules.forEach(function(wasmModuleId) {\",\n\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\"var installedWasmModuleData = installedWasmModules[wasmModuleId];\",\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t'// a Promise means \"currently loading\" or \"already loaded\".',\n\t\t\t\t\t\t\"if(installedWasmModuleData)\",\n\t\t\t\t\t\tTemplate.indent([\"promises.push(installedWasmModuleData);\"]),\n\t\t\t\t\t\t\"else {\",\n\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t`var importObject = wasmImportObjects[wasmModuleId]();`,\n\t\t\t\t\t\t\t`var req = ${this.generateLoadBinaryCode(wasmModuleSrcPath)};`,\n\t\t\t\t\t\t\t\"var promise;\",\n\t\t\t\t\t\t\tthis.supportsStreaming\n\t\t\t\t\t\t\t\t? Template.asString([\n\t\t\t\t\t\t\t\t\t\t\"if(importObject instanceof Promise && typeof WebAssembly.compileStreaming === 'function') {\",\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\"promise = Promise.all([WebAssembly.compileStreaming(req), importObject]).then(function(items) {\",\n\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\t`return WebAssembly.instantiate(items[0], ${createImportObject(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"items[1]\"\n\t\t\t\t\t\t\t\t\t\t\t\t)});`\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\"} else if(typeof WebAssembly.instantiateStreaming === 'function') {\",\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t`promise = WebAssembly.instantiateStreaming(req, ${createImportObject(\n\t\t\t\t\t\t\t\t\t\t\t\t\"importObject\"\n\t\t\t\t\t\t\t\t\t\t\t)});`\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t  ])\n\t\t\t\t\t\t\t\t: Template.asString([\n\t\t\t\t\t\t\t\t\t\t\"if(importObject instanceof Promise) {\",\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\"var bytesPromise = req.then(function(x) { return x.arrayBuffer(); });\",\n\t\t\t\t\t\t\t\t\t\t\t\"promise = Promise.all([\",\n\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\t\"bytesPromise.then(function(bytes) { return WebAssembly.compile(bytes); }),\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"importObject\"\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\"]).then(function(items) {\",\n\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\t`return WebAssembly.instantiate(items[0], ${createImportObject(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"items[1]\"\n\t\t\t\t\t\t\t\t\t\t\t\t)});`\n\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t  ]),\n\t\t\t\t\t\t\t\"} else {\",\n\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\"var bytesPromise = req.then(function(x) { return x.arrayBuffer(); });\",\n\t\t\t\t\t\t\t\t\"promise = bytesPromise.then(function(bytes) {\",\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t`return WebAssembly.instantiate(bytes, ${createImportObject(\n\t\t\t\t\t\t\t\t\t\t\"importObject\"\n\t\t\t\t\t\t\t\t\t)});`\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\t\t\"promises.push(installedWasmModules[wasmModuleId] = promise.then(function(res) {\",\n\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t`return ${mainTemplate.requireFn}.w[wasmModuleId] = (res.instance || res).exports;`\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\"}));\"\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t\"}\"\n\t\t\t\t\t]),\n\t\t\t\t\t\"});\"\n\t\t\t\t]);\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.requireExtensions.tap(\n\t\t\t\"WasmMainTemplatePlugin\",\n\t\t\t(source, chunk) => {\n\t\t\t\tif (!chunk.hasModuleInGraph(m => m.type.startsWith(\"webassembly\"))) {\n\t\t\t\t\treturn source;\n\t\t\t\t}\n\t\t\t\treturn Template.asString([\n\t\t\t\t\tsource,\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"// object with all WebAssembly.instance exports\",\n\t\t\t\t\t`${mainTemplate.requireFn}.w = {};`\n\t\t\t\t]);\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.hash.tap(\"WasmMainTemplatePlugin\", hash => {\n\t\t\thash.update(\"WasmMainTemplatePlugin\");\n\t\t\thash.update(\"2\");\n\t\t});\n\t}\n}\n\nmodule.exports = WasmMainTemplatePlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}