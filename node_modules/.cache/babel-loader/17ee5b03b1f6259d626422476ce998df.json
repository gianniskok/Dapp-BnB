{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('./lib/configure');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n\nconst stat = require('./files/stat');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  async function* ls(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`;\n    /**\n     * @param {*} link\n     */\n\n    async function mapLink(link) {\n      let hash = link.Hash;\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`;\n        const stats = await stat(opts)(ipfsPath);\n        hash = stats.cid;\n      } else {\n        hash = CID.parse(hash);\n      }\n      /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n\n\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      };\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8);\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        };\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs;\n        }\n      }\n\n      return entry;\n    }\n\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects;\n\n      if (!result) {\n        throw new Error('expected .Objects in results');\n      }\n\n      result = result[0];\n\n      if (!result) {\n        throw new Error('expected one array in results.Objects');\n      }\n\n      const links = result.Links;\n\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links');\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result);\n        return;\n      }\n\n      yield* links.map(mapLink);\n    }\n  }\n\n  return ls;\n});\n/**\n * @param {any} link\n */\n\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n\n    case 2:\n      return 'file';\n\n    default:\n      return 'file';\n  }\n}","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","stat","module","exports","api","opts","ls","path","options","pathStr","Uint8Array","decode","mapLink","link","hash","Hash","includes","ipfsPath","startsWith","stats","cid","parse","entry","name","Name","size","Size","type","typeOf","Mode","mode","parseInt","Mtime","undefined","mtime","secs","MtimeNsecs","nsecs","res","post","signal","searchParams","arg","headers","result","ndjson","Objects","Error","links","Links","Array","isArray","length","map","Type"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/ls.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst stat = require('./files/stat')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`\n\n    /**\n     * @param {*} link\n     */\n    async function mapLink (link) {\n      let hash = link.Hash\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`\n        const stats = await stat(opts)(ipfsPath)\n\n        hash = stats.cid\n      } else {\n        hash = CID.parse(hash)\n      }\n\n      /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      }\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8)\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        }\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs\n        }\n      }\n\n      return entry\n    }\n\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (!result) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (!result) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n  return ls\n})\n\n/**\n * @param {any} link\n */\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'file'\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}