{"ast":null,"code":"'use strict';\n\nvar metaSchema = require('./refs/json-schema-draft-07.json');\n\nmodule.exports = {\n  $id: 'https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js',\n  definitions: {\n    simpleTypes: metaSchema.definitions.simpleTypes\n  },\n  type: 'object',\n  dependencies: {\n    schema: ['validate'],\n    $data: ['validate'],\n    statements: ['inline'],\n    valid: {\n      not: {\n        required: ['macro']\n      }\n    }\n  },\n  properties: {\n    type: metaSchema.properties.type,\n    schema: {\n      type: 'boolean'\n    },\n    statements: {\n      type: 'boolean'\n    },\n    dependencies: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    metaSchema: {\n      type: 'object'\n    },\n    modifying: {\n      type: 'boolean'\n    },\n    valid: {\n      type: 'boolean'\n    },\n    $data: {\n      type: 'boolean'\n    },\n    async: {\n      type: 'boolean'\n    },\n    errors: {\n      anyOf: [{\n        type: 'boolean'\n      }, {\n        const: 'full'\n      }]\n    }\n  }\n};","map":{"version":3,"names":["metaSchema","require","module","exports","$id","definitions","simpleTypes","type","dependencies","schema","$data","statements","valid","not","required","properties","items","modifying","async","errors","anyOf","const"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ajv/lib/definition_schema.js"],"sourcesContent":["'use strict';\n\nvar metaSchema = require('./refs/json-schema-draft-07.json');\n\nmodule.exports = {\n  $id: 'https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js',\n  definitions: {\n    simpleTypes: metaSchema.definitions.simpleTypes\n  },\n  type: 'object',\n  dependencies: {\n    schema: ['validate'],\n    $data: ['validate'],\n    statements: ['inline'],\n    valid: {not: {required: ['macro']}}\n  },\n  properties: {\n    type: metaSchema.properties.type,\n    schema: {type: 'boolean'},\n    statements: {type: 'boolean'},\n    dependencies: {\n      type: 'array',\n      items: {type: 'string'}\n    },\n    metaSchema: {type: 'object'},\n    modifying: {type: 'boolean'},\n    valid: {type: 'boolean'},\n    $data: {type: 'boolean'},\n    async: {type: 'boolean'},\n    errors: {\n      anyOf: [\n        {type: 'boolean'},\n        {const: 'full'}\n      ]\n    }\n  }\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,kCAAD,CAAxB;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACfC,GAAG,EAAE,2EADU;EAEfC,WAAW,EAAE;IACXC,WAAW,EAAEN,UAAU,CAACK,WAAX,CAAuBC;EADzB,CAFE;EAKfC,IAAI,EAAE,QALS;EAMfC,YAAY,EAAE;IACZC,MAAM,EAAE,CAAC,UAAD,CADI;IAEZC,KAAK,EAAE,CAAC,UAAD,CAFK;IAGZC,UAAU,EAAE,CAAC,QAAD,CAHA;IAIZC,KAAK,EAAE;MAACC,GAAG,EAAE;QAACC,QAAQ,EAAE,CAAC,OAAD;MAAX;IAAN;EAJK,CANC;EAYfC,UAAU,EAAE;IACVR,IAAI,EAAEP,UAAU,CAACe,UAAX,CAAsBR,IADlB;IAEVE,MAAM,EAAE;MAACF,IAAI,EAAE;IAAP,CAFE;IAGVI,UAAU,EAAE;MAACJ,IAAI,EAAE;IAAP,CAHF;IAIVC,YAAY,EAAE;MACZD,IAAI,EAAE,OADM;MAEZS,KAAK,EAAE;QAACT,IAAI,EAAE;MAAP;IAFK,CAJJ;IAQVP,UAAU,EAAE;MAACO,IAAI,EAAE;IAAP,CARF;IASVU,SAAS,EAAE;MAACV,IAAI,EAAE;IAAP,CATD;IAUVK,KAAK,EAAE;MAACL,IAAI,EAAE;IAAP,CAVG;IAWVG,KAAK,EAAE;MAACH,IAAI,EAAE;IAAP,CAXG;IAYVW,KAAK,EAAE;MAACX,IAAI,EAAE;IAAP,CAZG;IAaVY,MAAM,EAAE;MACNC,KAAK,EAAE,CACL;QAACb,IAAI,EAAE;MAAP,CADK,EAEL;QAACc,KAAK,EAAE;MAAR,CAFK;IADD;EAbE;AAZG,CAAjB"},"metadata":{},"sourceType":"script"}