{"ast":null,"code":"export default function parse(input) {\n  input = input.toUpperCase();\n  var splitIndex = input.indexOf(\"P\");\n  var mantissa, exponent;\n\n  if (splitIndex !== -1) {\n    mantissa = input.substring(0, splitIndex);\n    exponent = parseInt(input.substring(splitIndex + 1));\n  } else {\n    mantissa = input;\n    exponent = 0;\n  }\n\n  var dotIndex = mantissa.indexOf(\".\");\n\n  if (dotIndex !== -1) {\n    var integerPart = parseInt(mantissa.substring(0, dotIndex), 16);\n    var sign = Math.sign(integerPart);\n    integerPart = sign * integerPart;\n    var fractionLength = mantissa.length - dotIndex - 1;\n    var fractionalPart = parseInt(mantissa.substring(dotIndex + 1), 16);\n    var fraction = fractionLength > 0 ? fractionalPart / Math.pow(16, fractionLength) : 0;\n\n    if (sign === 0) {\n      if (fraction === 0) {\n        mantissa = sign;\n      } else {\n        if (Object.is(sign, -0)) {\n          mantissa = -fraction;\n        } else {\n          mantissa = fraction;\n        }\n      }\n    } else {\n      mantissa = sign * (integerPart + fraction);\n    }\n  } else {\n    mantissa = parseInt(mantissa, 16);\n  }\n\n  return mantissa * (splitIndex !== -1 ? Math.pow(2, exponent) : 1);\n}","map":{"version":3,"names":["parse","input","toUpperCase","splitIndex","indexOf","mantissa","exponent","substring","parseInt","dotIndex","integerPart","sign","Math","fractionLength","length","fractionalPart","fraction","pow","Object","is"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/@webassemblyjs/floating-point-hex-parser/esm/index.js"],"sourcesContent":["export default function parse(input) {\n  input = input.toUpperCase();\n  var splitIndex = input.indexOf(\"P\");\n  var mantissa, exponent;\n\n  if (splitIndex !== -1) {\n    mantissa = input.substring(0, splitIndex);\n    exponent = parseInt(input.substring(splitIndex + 1));\n  } else {\n    mantissa = input;\n    exponent = 0;\n  }\n\n  var dotIndex = mantissa.indexOf(\".\");\n\n  if (dotIndex !== -1) {\n    var integerPart = parseInt(mantissa.substring(0, dotIndex), 16);\n    var sign = Math.sign(integerPart);\n    integerPart = sign * integerPart;\n    var fractionLength = mantissa.length - dotIndex - 1;\n    var fractionalPart = parseInt(mantissa.substring(dotIndex + 1), 16);\n    var fraction = fractionLength > 0 ? fractionalPart / Math.pow(16, fractionLength) : 0;\n\n    if (sign === 0) {\n      if (fraction === 0) {\n        mantissa = sign;\n      } else {\n        if (Object.is(sign, -0)) {\n          mantissa = -fraction;\n        } else {\n          mantissa = fraction;\n        }\n      }\n    } else {\n      mantissa = sign * (integerPart + fraction);\n    }\n  } else {\n    mantissa = parseInt(mantissa, 16);\n  }\n\n  return mantissa * (splitIndex !== -1 ? Math.pow(2, exponent) : 1);\n}"],"mappings":"AAAA,eAAe,SAASA,KAAT,CAAeC,KAAf,EAAsB;EACnCA,KAAK,GAAGA,KAAK,CAACC,WAAN,EAAR;EACA,IAAIC,UAAU,GAAGF,KAAK,CAACG,OAAN,CAAc,GAAd,CAAjB;EACA,IAAIC,QAAJ,EAAcC,QAAd;;EAEA,IAAIH,UAAU,KAAK,CAAC,CAApB,EAAuB;IACrBE,QAAQ,GAAGJ,KAAK,CAACM,SAAN,CAAgB,CAAhB,EAAmBJ,UAAnB,CAAX;IACAG,QAAQ,GAAGE,QAAQ,CAACP,KAAK,CAACM,SAAN,CAAgBJ,UAAU,GAAG,CAA7B,CAAD,CAAnB;EACD,CAHD,MAGO;IACLE,QAAQ,GAAGJ,KAAX;IACAK,QAAQ,GAAG,CAAX;EACD;;EAED,IAAIG,QAAQ,GAAGJ,QAAQ,CAACD,OAAT,CAAiB,GAAjB,CAAf;;EAEA,IAAIK,QAAQ,KAAK,CAAC,CAAlB,EAAqB;IACnB,IAAIC,WAAW,GAAGF,QAAQ,CAACH,QAAQ,CAACE,SAAT,CAAmB,CAAnB,EAAsBE,QAAtB,CAAD,EAAkC,EAAlC,CAA1B;IACA,IAAIE,IAAI,GAAGC,IAAI,CAACD,IAAL,CAAUD,WAAV,CAAX;IACAA,WAAW,GAAGC,IAAI,GAAGD,WAArB;IACA,IAAIG,cAAc,GAAGR,QAAQ,CAACS,MAAT,GAAkBL,QAAlB,GAA6B,CAAlD;IACA,IAAIM,cAAc,GAAGP,QAAQ,CAACH,QAAQ,CAACE,SAAT,CAAmBE,QAAQ,GAAG,CAA9B,CAAD,EAAmC,EAAnC,CAA7B;IACA,IAAIO,QAAQ,GAAGH,cAAc,GAAG,CAAjB,GAAqBE,cAAc,GAAGH,IAAI,CAACK,GAAL,CAAS,EAAT,EAAaJ,cAAb,CAAtC,GAAqE,CAApF;;IAEA,IAAIF,IAAI,KAAK,CAAb,EAAgB;MACd,IAAIK,QAAQ,KAAK,CAAjB,EAAoB;QAClBX,QAAQ,GAAGM,IAAX;MACD,CAFD,MAEO;QACL,IAAIO,MAAM,CAACC,EAAP,CAAUR,IAAV,EAAgB,CAAC,CAAjB,CAAJ,EAAyB;UACvBN,QAAQ,GAAG,CAACW,QAAZ;QACD,CAFD,MAEO;UACLX,QAAQ,GAAGW,QAAX;QACD;MACF;IACF,CAVD,MAUO;MACLX,QAAQ,GAAGM,IAAI,IAAID,WAAW,GAAGM,QAAlB,CAAf;IACD;EACF,CArBD,MAqBO;IACLX,QAAQ,GAAGG,QAAQ,CAACH,QAAD,EAAW,EAAX,CAAnB;EACD;;EAED,OAAOA,QAAQ,IAAIF,UAAU,KAAK,CAAC,CAAhB,GAAoBS,IAAI,CAACK,GAAL,CAAS,CAAT,EAAYX,QAAZ,CAApB,GAA4C,CAAhD,CAAf;AACD"},"metadata":{},"sourceType":"module"}