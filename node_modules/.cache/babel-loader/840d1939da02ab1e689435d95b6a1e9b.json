{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nconst {\n  ConcatSource\n} = require(\"webpack-sources\");\n\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nconst Template = require(\"./Template\");\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../schemas/plugins/BannerPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginArgument} BannerPluginArgument */\n\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginOptions} BannerPluginOptions */\n\n\nconst wrapComment = str => {\n  if (!str.includes(\"\\n\")) {\n    return Template.toComment(str);\n  }\n\n  return `/*!\\n * ${str.replace(/\\*\\//g, \"* /\").split(\"\\n\").join(\"\\n * \")}\\n */`;\n};\n\nclass BannerPlugin {\n  /**\n   * @param {BannerPluginArgument} options options object\n   */\n  constructor(options) {\n    if (arguments.length > 1) {\n      throw new Error(\"BannerPlugin only takes one argument (pass an options object)\");\n    }\n\n    validateOptions(schema, options, \"Banner Plugin\");\n\n    if (typeof options === \"string\" || typeof options === \"function\") {\n      options = {\n        banner: options\n      };\n    }\n    /** @type {BannerPluginOptions} */\n\n\n    this.options = options;\n    const bannerOption = options.banner;\n\n    if (typeof bannerOption === \"function\") {\n      const getBanner = bannerOption;\n      this.banner = this.options.raw ? getBanner : data => wrapComment(getBanner(data));\n    } else {\n      const banner = this.options.raw ? bannerOption : wrapComment(bannerOption);\n\n      this.banner = () => banner;\n    }\n  }\n\n  apply(compiler) {\n    const options = this.options;\n    const banner = this.banner;\n    const matchObject = ModuleFilenameHelpers.matchObject.bind(undefined, options);\n    compiler.hooks.compilation.tap(\"BannerPlugin\", compilation => {\n      compilation.hooks.optimizeChunkAssets.tap(\"BannerPlugin\", chunks => {\n        for (const chunk of chunks) {\n          if (options.entryOnly && !chunk.canBeInitial()) {\n            continue;\n          }\n\n          for (const file of chunk.files) {\n            if (!matchObject(file)) {\n              continue;\n            }\n\n            let query = \"\";\n            let filename = file;\n            const hash = compilation.hash;\n            const querySplit = filename.indexOf(\"?\");\n\n            if (querySplit >= 0) {\n              query = filename.substr(querySplit);\n              filename = filename.substr(0, querySplit);\n            }\n\n            const lastSlashIndex = filename.lastIndexOf(\"/\");\n            const basename = lastSlashIndex === -1 ? filename : filename.substr(lastSlashIndex + 1);\n            const data = {\n              hash,\n              chunk,\n              filename,\n              basename,\n              query\n            };\n            const comment = compilation.getPath(banner(data), data);\n            compilation.updateAsset(file, old => new ConcatSource(comment, \"\\n\", old));\n          }\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = BannerPlugin;","map":{"version":3,"names":["ConcatSource","require","ModuleFilenameHelpers","Template","validateOptions","schema","wrapComment","str","includes","toComment","replace","split","join","BannerPlugin","constructor","options","arguments","length","Error","banner","bannerOption","getBanner","raw","data","apply","compiler","matchObject","bind","undefined","hooks","compilation","tap","optimizeChunkAssets","chunks","chunk","entryOnly","canBeInitial","file","files","query","filename","hash","querySplit","indexOf","substr","lastSlashIndex","lastIndexOf","basename","comment","getPath","updateAsset","old","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/BannerPlugin.js"],"sourcesContent":["/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\nconst Template = require(\"./Template\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/BannerPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginArgument} BannerPluginArgument */\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginOptions} BannerPluginOptions */\n\nconst wrapComment = str => {\n\tif (!str.includes(\"\\n\")) {\n\t\treturn Template.toComment(str);\n\t}\n\treturn `/*!\\n * ${str\n\t\t.replace(/\\*\\//g, \"* /\")\n\t\t.split(\"\\n\")\n\t\t.join(\"\\n * \")}\\n */`;\n};\n\nclass BannerPlugin {\n\t/**\n\t * @param {BannerPluginArgument} options options object\n\t */\n\tconstructor(options) {\n\t\tif (arguments.length > 1) {\n\t\t\tthrow new Error(\n\t\t\t\t\"BannerPlugin only takes one argument (pass an options object)\"\n\t\t\t);\n\t\t}\n\n\t\tvalidateOptions(schema, options, \"Banner Plugin\");\n\n\t\tif (typeof options === \"string\" || typeof options === \"function\") {\n\t\t\toptions = {\n\t\t\t\tbanner: options\n\t\t\t};\n\t\t}\n\n\t\t/** @type {BannerPluginOptions} */\n\t\tthis.options = options;\n\n\t\tconst bannerOption = options.banner;\n\t\tif (typeof bannerOption === \"function\") {\n\t\t\tconst getBanner = bannerOption;\n\t\t\tthis.banner = this.options.raw\n\t\t\t\t? getBanner\n\t\t\t\t: data => wrapComment(getBanner(data));\n\t\t} else {\n\t\t\tconst banner = this.options.raw\n\t\t\t\t? bannerOption\n\t\t\t\t: wrapComment(bannerOption);\n\t\t\tthis.banner = () => banner;\n\t\t}\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tconst banner = this.banner;\n\t\tconst matchObject = ModuleFilenameHelpers.matchObject.bind(\n\t\t\tundefined,\n\t\t\toptions\n\t\t);\n\n\t\tcompiler.hooks.compilation.tap(\"BannerPlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeChunkAssets.tap(\"BannerPlugin\", chunks => {\n\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\tif (options.entryOnly && !chunk.canBeInitial()) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const file of chunk.files) {\n\t\t\t\t\t\tif (!matchObject(file)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet query = \"\";\n\t\t\t\t\t\tlet filename = file;\n\t\t\t\t\t\tconst hash = compilation.hash;\n\t\t\t\t\t\tconst querySplit = filename.indexOf(\"?\");\n\n\t\t\t\t\t\tif (querySplit >= 0) {\n\t\t\t\t\t\t\tquery = filename.substr(querySplit);\n\t\t\t\t\t\t\tfilename = filename.substr(0, querySplit);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst lastSlashIndex = filename.lastIndexOf(\"/\");\n\n\t\t\t\t\t\tconst basename =\n\t\t\t\t\t\t\tlastSlashIndex === -1\n\t\t\t\t\t\t\t\t? filename\n\t\t\t\t\t\t\t\t: filename.substr(lastSlashIndex + 1);\n\n\t\t\t\t\t\tconst data = {\n\t\t\t\t\t\t\thash,\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\tbasename,\n\t\t\t\t\t\t\tquery\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst comment = compilation.getPath(banner(data), data);\n\n\t\t\t\t\t\tcompilation.updateAsset(\n\t\t\t\t\t\t\tfile,\n\t\t\t\t\t\t\told => new ConcatSource(comment, \"\\n\", old)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = BannerPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}