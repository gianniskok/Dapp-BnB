{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateJsonRpcError = exports.getErrorByCode = exports.getError = exports.isValidErrorCode = exports.isReservedErrorCode = exports.isServerErrorCode = void 0;\n\nconst constants_1 = require(\"./constants\");\n\nfunction isServerErrorCode(code) {\n  return code <= constants_1.SERVER_ERROR_CODE_RANGE[0] && code >= constants_1.SERVER_ERROR_CODE_RANGE[1];\n}\n\nexports.isServerErrorCode = isServerErrorCode;\n\nfunction isReservedErrorCode(code) {\n  return constants_1.RESERVED_ERROR_CODES.includes(code);\n}\n\nexports.isReservedErrorCode = isReservedErrorCode;\n\nfunction isValidErrorCode(code) {\n  return typeof code === \"number\";\n}\n\nexports.isValidErrorCode = isValidErrorCode;\n\nfunction getError(type) {\n  if (!Object.keys(constants_1.STANDARD_ERROR_MAP).includes(type)) {\n    return constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR];\n  }\n\n  return constants_1.STANDARD_ERROR_MAP[type];\n}\n\nexports.getError = getError;\n\nfunction getErrorByCode(code) {\n  const match = Object.values(constants_1.STANDARD_ERROR_MAP).find(e => e.code === code);\n\n  if (!match) {\n    return constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR];\n  }\n\n  return match;\n}\n\nexports.getErrorByCode = getErrorByCode;\n\nfunction validateJsonRpcError(response) {\n  if (typeof response.error.code === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing code for JSON-RPC error\"\n    };\n  }\n\n  if (typeof response.error.message === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing message for JSON-RPC error\"\n    };\n  }\n\n  if (!isValidErrorCode(response.error.code)) {\n    return {\n      valid: false,\n      error: `Invalid error code type for JSON-RPC: ${response.error.code}`\n    };\n  }\n\n  if (isReservedErrorCode(response.error.code)) {\n    const error = getErrorByCode(response.error.code);\n\n    if (error.message !== constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR].message && response.error.message === error.message) {\n      return {\n        valid: false,\n        error: `Invalid error code message for JSON-RPC: ${response.error.code}`\n      };\n    }\n  }\n\n  return {\n    valid: true\n  };\n}\n\nexports.validateJsonRpcError = validateJsonRpcError;","map":{"version":3,"mappings":";;;;;;;AACA;;AAQA,SAAgBA,iBAAhB,CAAkCC,IAAlC,EAA8C;EAC5C,OAAOA,IAAI,IAAIC,oCAAwB,CAAxB,CAAR,IAAsCD,IAAI,IAAIC,oCAAwB,CAAxB,CAArD;AACD;;AAFDC;;AAIA,SAAgBC,mBAAhB,CAAoCH,IAApC,EAAgD;EAC9C,OAAOC,iCAAqBG,QAArB,CAA8BJ,IAA9B,CAAP;AACD;;AAFDE;;AAIA,SAAgBG,gBAAhB,CAAiCL,IAAjC,EAA6C;EAC3C,OAAO,OAAOA,IAAP,KAAgB,QAAvB;AACD;;AAFDE;;AAIA,SAAgBI,QAAhB,CAAyBC,IAAzB,EAAqC;EACnC,IAAI,CAACC,MAAM,CAACC,IAAP,CAAYR,8BAAZ,EAAgCG,QAAhC,CAAyCG,IAAzC,CAAL,EAAqD;IACnD,OAAON,+BAAmBA,0BAAnB,CAAP;EACD;;EACD,OAAOA,+BAAmBM,IAAnB,CAAP;AACD;;AALDL;;AAOA,SAAgBQ,cAAhB,CAA+BV,IAA/B,EAA2C;EACzC,MAAMW,KAAK,GAAGH,MAAM,CAACI,MAAP,CAAcX,8BAAd,EAAkCY,IAAlC,CAAuCC,CAAC,IAAIA,CAAC,CAACd,IAAF,KAAWA,IAAvD,CAAd;;EACA,IAAI,CAACW,KAAL,EAAY;IACV,OAAOV,+BAAmBA,0BAAnB,CAAP;EACD;;EACD,OAAOU,KAAP;AACD;;AANDT;;AAQA,SAAgBa,oBAAhB,CAAqCC,QAArC,EAA2D;EACzD,IAAI,OAAOA,QAAQ,CAACC,KAAT,CAAejB,IAAtB,KAA+B,WAAnC,EAAgD;IAC9C,OAAO;MAAEkB,KAAK,EAAE,KAAT;MAAgBD,KAAK,EAAE;IAAvB,CAAP;EACD;;EACD,IAAI,OAAOD,QAAQ,CAACC,KAAT,CAAeE,OAAtB,KAAkC,WAAtC,EAAmD;IACjD,OAAO;MAAED,KAAK,EAAE,KAAT;MAAgBD,KAAK,EAAE;IAAvB,CAAP;EACD;;EACD,IAAI,CAACZ,gBAAgB,CAACW,QAAQ,CAACC,KAAT,CAAejB,IAAhB,CAArB,EAA4C;IAC1C,OAAO;MACLkB,KAAK,EAAE,KADF;MAELD,KAAK,EAAE,yCAAyCD,QAAQ,CAACC,KAAT,CAAejB,IAAI;IAF9D,CAAP;EAID;;EACD,IAAIG,mBAAmB,CAACa,QAAQ,CAACC,KAAT,CAAejB,IAAhB,CAAvB,EAA8C;IAC5C,MAAMiB,KAAK,GAAGP,cAAc,CAACM,QAAQ,CAACC,KAAT,CAAejB,IAAhB,CAA5B;;IACA,IACEiB,KAAK,CAACE,OAAN,KAAkBlB,+BAAmBA,0BAAnB,EAAmCkB,OAArD,IACAH,QAAQ,CAACC,KAAT,CAAeE,OAAf,KAA2BF,KAAK,CAACE,OAFnC,EAGE;MACA,OAAO;QACLD,KAAK,EAAE,KADF;QAELD,KAAK,EAAE,4CAA4CD,QAAQ,CAACC,KAAT,CAAejB,IAAI;MAFjE,CAAP;IAID;EACF;;EACD,OAAO;IAAEkB,KAAK,EAAE;EAAT,CAAP;AACD;;AA1BDhB","names":["isServerErrorCode","code","constants_1","exports","isReservedErrorCode","includes","isValidErrorCode","getError","type","Object","keys","getErrorByCode","match","values","find","e","validateJsonRpcError","response","error","valid","message"],"sourceRoot":"","sources":["../../src/error.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}