{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\n\nconst AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\n\nconst ConstDependency = require(\"./ConstDependency\");\n\nconst AMDDefineDependency = require(\"./AMDDefineDependency\");\n\nconst AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\n\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\n\nconst ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\n\nconst LocalModulesHelpers = require(\"./LocalModulesHelpers\");\n\nconst isBoundFunctionExpression = expr => {\n  if (expr.type !== \"CallExpression\") return false;\n  if (expr.callee.type !== \"MemberExpression\") return false;\n  if (expr.callee.computed) return false;\n  if (expr.callee.object.type !== \"FunctionExpression\") return false;\n  if (expr.callee.property.type !== \"Identifier\") return false;\n  if (expr.callee.property.name !== \"bind\") return false;\n  return true;\n};\n\nconst isUnboundFunctionExpression = expr => {\n  if (expr.type === \"FunctionExpression\") return true;\n  if (expr.type === \"ArrowFunctionExpression\") return true;\n  return false;\n};\n\nconst isCallable = expr => {\n  if (isUnboundFunctionExpression(expr)) return true;\n  if (isBoundFunctionExpression(expr)) return true;\n  return false;\n};\n\nclass AMDDefineDependencyParserPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n\n  apply(parser) {\n    parser.hooks.call.for(\"define\").tap(\"AMDDefineDependencyParserPlugin\", this.processCallDefine.bind(this, parser));\n  }\n\n  processArray(parser, expr, param, identifiers, namedModule) {\n    if (param.isArray()) {\n      param.items.forEach((param, idx) => {\n        if (param.isString() && [\"require\", \"module\", \"exports\"].includes(param.string)) identifiers[idx] = param.string;\n        const result = this.processItem(parser, expr, param, namedModule);\n\n        if (result === undefined) {\n          this.processContext(parser, expr, param);\n        }\n      });\n      return true;\n    } else if (param.isConstArray()) {\n      const deps = [];\n      param.array.forEach((request, idx) => {\n        let dep;\n        let localModule;\n\n        if (request === \"require\") {\n          identifiers[idx] = request;\n          dep = \"__webpack_require__\";\n        } else if ([\"exports\", \"module\"].includes(request)) {\n          identifiers[idx] = request;\n          dep = request;\n        } else if (localModule = LocalModulesHelpers.getLocalModule(parser.state, request)) {\n          dep = new LocalModuleDependency(localModule, undefined, false);\n          dep.loc = expr.loc;\n          parser.state.current.addDependency(dep);\n        } else {\n          dep = this.newRequireItemDependency(request);\n          dep.loc = expr.loc;\n          dep.optional = !!parser.scope.inTry;\n          parser.state.current.addDependency(dep);\n        }\n\n        deps.push(dep);\n      });\n      const dep = this.newRequireArrayDependency(deps, param.range);\n      dep.loc = expr.loc;\n      dep.optional = !!parser.scope.inTry;\n      parser.state.current.addDependency(dep);\n      return true;\n    }\n  }\n\n  processItem(parser, expr, param, namedModule) {\n    if (param.isConditional()) {\n      param.options.forEach(param => {\n        const result = this.processItem(parser, expr, param);\n\n        if (result === undefined) {\n          this.processContext(parser, expr, param);\n        }\n      });\n      return true;\n    } else if (param.isString()) {\n      let dep, localModule;\n\n      if (param.string === \"require\") {\n        dep = new ConstDependency(\"__webpack_require__\", param.range);\n      } else if ([\"require\", \"exports\", \"module\"].includes(param.string)) {\n        dep = new ConstDependency(param.string, param.range);\n      } else if (localModule = LocalModulesHelpers.getLocalModule(parser.state, param.string, namedModule)) {\n        dep = new LocalModuleDependency(localModule, param.range, false);\n      } else {\n        dep = this.newRequireItemDependency(param.string, param.range);\n      }\n\n      dep.loc = expr.loc;\n      dep.optional = !!parser.scope.inTry;\n      parser.state.current.addDependency(dep);\n      return true;\n    }\n  }\n\n  processContext(parser, expr, param) {\n    const dep = ContextDependencyHelpers.create(AMDRequireContextDependency, param.range, param, expr, this.options, {}, parser);\n    if (!dep) return;\n    dep.loc = expr.loc;\n    dep.optional = !!parser.scope.inTry;\n    parser.state.current.addDependency(dep);\n    return true;\n  }\n\n  processCallDefine(parser, expr) {\n    let array, fn, obj, namedModule;\n\n    switch (expr.arguments.length) {\n      case 1:\n        if (isCallable(expr.arguments[0])) {\n          // define(f() {…})\n          fn = expr.arguments[0];\n        } else if (expr.arguments[0].type === \"ObjectExpression\") {\n          // define({…})\n          obj = expr.arguments[0];\n        } else {\n          // define(expr)\n          // unclear if function or object\n          obj = fn = expr.arguments[0];\n        }\n\n        break;\n\n      case 2:\n        if (expr.arguments[0].type === \"Literal\") {\n          namedModule = expr.arguments[0].value; // define(\"…\", …)\n\n          if (isCallable(expr.arguments[1])) {\n            // define(\"…\", f() {…})\n            fn = expr.arguments[1];\n          } else if (expr.arguments[1].type === \"ObjectExpression\") {\n            // define(\"…\", {…})\n            obj = expr.arguments[1];\n          } else {\n            // define(\"…\", expr)\n            // unclear if function or object\n            obj = fn = expr.arguments[1];\n          }\n        } else {\n          array = expr.arguments[0];\n\n          if (isCallable(expr.arguments[1])) {\n            // define([…], f() {})\n            fn = expr.arguments[1];\n          } else if (expr.arguments[1].type === \"ObjectExpression\") {\n            // define([…], {…})\n            obj = expr.arguments[1];\n          } else {\n            // define([…], expr)\n            // unclear if function or object\n            obj = fn = expr.arguments[1];\n          }\n        }\n\n        break;\n\n      case 3:\n        // define(\"…\", […], f() {…})\n        namedModule = expr.arguments[0].value;\n        array = expr.arguments[1];\n\n        if (isCallable(expr.arguments[2])) {\n          // define(\"…\", […], f() {})\n          fn = expr.arguments[2];\n        } else if (expr.arguments[2].type === \"ObjectExpression\") {\n          // define(\"…\", […], {…})\n          obj = expr.arguments[2];\n        } else {\n          // define(\"…\", […], expr)\n          // unclear if function or object\n          obj = fn = expr.arguments[2];\n        }\n\n        break;\n\n      default:\n        return;\n    }\n\n    let fnParams = null;\n    let fnParamsOffset = 0;\n\n    if (fn) {\n      if (isUnboundFunctionExpression(fn)) {\n        fnParams = fn.params;\n      } else if (isBoundFunctionExpression(fn)) {\n        fnParams = fn.callee.object.params;\n        fnParamsOffset = fn.arguments.length - 1;\n\n        if (fnParamsOffset < 0) {\n          fnParamsOffset = 0;\n        }\n      }\n    }\n\n    let fnRenames = parser.scope.renames.createChild();\n\n    if (array) {\n      const identifiers = {};\n      const param = parser.evaluateExpression(array);\n      const result = this.processArray(parser, expr, param, identifiers, namedModule);\n      if (!result) return;\n\n      if (fnParams) {\n        fnParams = fnParams.slice(fnParamsOffset).filter((param, idx) => {\n          if (identifiers[idx]) {\n            fnRenames.set(param.name, identifiers[idx]);\n            return false;\n          }\n\n          return true;\n        });\n      }\n    } else {\n      const identifiers = [\"require\", \"exports\", \"module\"];\n\n      if (fnParams) {\n        fnParams = fnParams.slice(fnParamsOffset).filter((param, idx) => {\n          if (identifiers[idx]) {\n            fnRenames.set(param.name, identifiers[idx]);\n            return false;\n          }\n\n          return true;\n        });\n      }\n    }\n\n    let inTry;\n\n    if (fn && isUnboundFunctionExpression(fn)) {\n      inTry = parser.scope.inTry;\n      parser.inScope(fnParams, () => {\n        parser.scope.renames = fnRenames;\n        parser.scope.inTry = inTry;\n\n        if (fn.body.type === \"BlockStatement\") {\n          parser.walkStatement(fn.body);\n        } else {\n          parser.walkExpression(fn.body);\n        }\n      });\n    } else if (fn && isBoundFunctionExpression(fn)) {\n      inTry = parser.scope.inTry;\n      parser.inScope(fn.callee.object.params.filter(i => ![\"require\", \"module\", \"exports\"].includes(i.name)), () => {\n        parser.scope.renames = fnRenames;\n        parser.scope.inTry = inTry;\n\n        if (fn.callee.object.body.type === \"BlockStatement\") {\n          parser.walkStatement(fn.callee.object.body);\n        } else {\n          parser.walkExpression(fn.callee.object.body);\n        }\n      });\n\n      if (fn.arguments) {\n        parser.walkExpressions(fn.arguments);\n      }\n    } else if (fn || obj) {\n      parser.walkExpression(fn || obj);\n    }\n\n    const dep = this.newDefineDependency(expr.range, array ? array.range : null, fn ? fn.range : null, obj ? obj.range : null, namedModule ? namedModule : null);\n    dep.loc = expr.loc;\n\n    if (namedModule) {\n      dep.localModule = LocalModulesHelpers.addLocalModule(parser.state, namedModule);\n    }\n\n    parser.state.current.addDependency(dep);\n    return true;\n  }\n\n  newDefineDependency(range, arrayRange, functionRange, objectRange, namedModule) {\n    return new AMDDefineDependency(range, arrayRange, functionRange, objectRange, namedModule);\n  }\n\n  newRequireArrayDependency(depsArray, range) {\n    return new AMDRequireArrayDependency(depsArray, range);\n  }\n\n  newRequireItemDependency(request, range) {\n    return new AMDRequireItemDependency(request, range);\n  }\n\n}\n\nmodule.exports = AMDDefineDependencyParserPlugin;","map":{"version":3,"names":["AMDRequireItemDependency","require","AMDRequireContextDependency","ConstDependency","AMDDefineDependency","AMDRequireArrayDependency","LocalModuleDependency","ContextDependencyHelpers","LocalModulesHelpers","isBoundFunctionExpression","expr","type","callee","computed","object","property","name","isUnboundFunctionExpression","isCallable","AMDDefineDependencyParserPlugin","constructor","options","apply","parser","hooks","call","for","tap","processCallDefine","bind","processArray","param","identifiers","namedModule","isArray","items","forEach","idx","isString","includes","string","result","processItem","undefined","processContext","isConstArray","deps","array","request","dep","localModule","getLocalModule","state","loc","current","addDependency","newRequireItemDependency","optional","scope","inTry","push","newRequireArrayDependency","range","isConditional","create","fn","obj","arguments","length","value","fnParams","fnParamsOffset","params","fnRenames","renames","createChild","evaluateExpression","slice","filter","set","inScope","body","walkStatement","walkExpression","i","walkExpressions","newDefineDependency","addLocalModule","arrayRange","functionRange","objectRange","depsArray","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/dependencies/AMDDefineDependencyParserPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\nconst AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\nconst ConstDependency = require(\"./ConstDependency\");\nconst AMDDefineDependency = require(\"./AMDDefineDependency\");\nconst AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\nconst ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\nconst LocalModulesHelpers = require(\"./LocalModulesHelpers\");\n\nconst isBoundFunctionExpression = expr => {\n\tif (expr.type !== \"CallExpression\") return false;\n\tif (expr.callee.type !== \"MemberExpression\") return false;\n\tif (expr.callee.computed) return false;\n\tif (expr.callee.object.type !== \"FunctionExpression\") return false;\n\tif (expr.callee.property.type !== \"Identifier\") return false;\n\tif (expr.callee.property.name !== \"bind\") return false;\n\treturn true;\n};\n\nconst isUnboundFunctionExpression = expr => {\n\tif (expr.type === \"FunctionExpression\") return true;\n\tif (expr.type === \"ArrowFunctionExpression\") return true;\n\treturn false;\n};\n\nconst isCallable = expr => {\n\tif (isUnboundFunctionExpression(expr)) return true;\n\tif (isBoundFunctionExpression(expr)) return true;\n\treturn false;\n};\n\nclass AMDDefineDependencyParserPlugin {\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\tapply(parser) {\n\t\tparser.hooks.call\n\t\t\t.for(\"define\")\n\t\t\t.tap(\n\t\t\t\t\"AMDDefineDependencyParserPlugin\",\n\t\t\t\tthis.processCallDefine.bind(this, parser)\n\t\t\t);\n\t}\n\n\tprocessArray(parser, expr, param, identifiers, namedModule) {\n\t\tif (param.isArray()) {\n\t\t\tparam.items.forEach((param, idx) => {\n\t\t\t\tif (\n\t\t\t\t\tparam.isString() &&\n\t\t\t\t\t[\"require\", \"module\", \"exports\"].includes(param.string)\n\t\t\t\t)\n\t\t\t\t\tidentifiers[idx] = param.string;\n\t\t\t\tconst result = this.processItem(parser, expr, param, namedModule);\n\t\t\t\tif (result === undefined) {\n\t\t\t\t\tthis.processContext(parser, expr, param);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn true;\n\t\t} else if (param.isConstArray()) {\n\t\t\tconst deps = [];\n\t\t\tparam.array.forEach((request, idx) => {\n\t\t\t\tlet dep;\n\t\t\t\tlet localModule;\n\t\t\t\tif (request === \"require\") {\n\t\t\t\t\tidentifiers[idx] = request;\n\t\t\t\t\tdep = \"__webpack_require__\";\n\t\t\t\t} else if ([\"exports\", \"module\"].includes(request)) {\n\t\t\t\t\tidentifiers[idx] = request;\n\t\t\t\t\tdep = request;\n\t\t\t\t} else if (\n\t\t\t\t\t(localModule = LocalModulesHelpers.getLocalModule(\n\t\t\t\t\t\tparser.state,\n\t\t\t\t\t\trequest\n\t\t\t\t\t))\n\t\t\t\t) {\n\t\t\t\t\tdep = new LocalModuleDependency(localModule, undefined, false);\n\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t} else {\n\t\t\t\t\tdep = this.newRequireItemDependency(request);\n\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\tdep.optional = !!parser.scope.inTry;\n\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t}\n\t\t\t\tdeps.push(dep);\n\t\t\t});\n\t\t\tconst dep = this.newRequireArrayDependency(deps, param.range);\n\t\t\tdep.loc = expr.loc;\n\t\t\tdep.optional = !!parser.scope.inTry;\n\t\t\tparser.state.current.addDependency(dep);\n\t\t\treturn true;\n\t\t}\n\t}\n\tprocessItem(parser, expr, param, namedModule) {\n\t\tif (param.isConditional()) {\n\t\t\tparam.options.forEach(param => {\n\t\t\t\tconst result = this.processItem(parser, expr, param);\n\t\t\t\tif (result === undefined) {\n\t\t\t\t\tthis.processContext(parser, expr, param);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn true;\n\t\t} else if (param.isString()) {\n\t\t\tlet dep, localModule;\n\t\t\tif (param.string === \"require\") {\n\t\t\t\tdep = new ConstDependency(\"__webpack_require__\", param.range);\n\t\t\t} else if ([\"require\", \"exports\", \"module\"].includes(param.string)) {\n\t\t\t\tdep = new ConstDependency(param.string, param.range);\n\t\t\t} else if (\n\t\t\t\t(localModule = LocalModulesHelpers.getLocalModule(\n\t\t\t\t\tparser.state,\n\t\t\t\t\tparam.string,\n\t\t\t\t\tnamedModule\n\t\t\t\t))\n\t\t\t) {\n\t\t\t\tdep = new LocalModuleDependency(localModule, param.range, false);\n\t\t\t} else {\n\t\t\t\tdep = this.newRequireItemDependency(param.string, param.range);\n\t\t\t}\n\t\t\tdep.loc = expr.loc;\n\t\t\tdep.optional = !!parser.scope.inTry;\n\t\t\tparser.state.current.addDependency(dep);\n\t\t\treturn true;\n\t\t}\n\t}\n\tprocessContext(parser, expr, param) {\n\t\tconst dep = ContextDependencyHelpers.create(\n\t\t\tAMDRequireContextDependency,\n\t\t\tparam.range,\n\t\t\tparam,\n\t\t\texpr,\n\t\t\tthis.options,\n\t\t\t{},\n\t\t\tparser\n\t\t);\n\t\tif (!dep) return;\n\t\tdep.loc = expr.loc;\n\t\tdep.optional = !!parser.scope.inTry;\n\t\tparser.state.current.addDependency(dep);\n\t\treturn true;\n\t}\n\n\tprocessCallDefine(parser, expr) {\n\t\tlet array, fn, obj, namedModule;\n\t\tswitch (expr.arguments.length) {\n\t\t\tcase 1:\n\t\t\t\tif (isCallable(expr.arguments[0])) {\n\t\t\t\t\t// define(f() {…})\n\t\t\t\t\tfn = expr.arguments[0];\n\t\t\t\t} else if (expr.arguments[0].type === \"ObjectExpression\") {\n\t\t\t\t\t// define({…})\n\t\t\t\t\tobj = expr.arguments[0];\n\t\t\t\t} else {\n\t\t\t\t\t// define(expr)\n\t\t\t\t\t// unclear if function or object\n\t\t\t\t\tobj = fn = expr.arguments[0];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif (expr.arguments[0].type === \"Literal\") {\n\t\t\t\t\tnamedModule = expr.arguments[0].value;\n\t\t\t\t\t// define(\"…\", …)\n\t\t\t\t\tif (isCallable(expr.arguments[1])) {\n\t\t\t\t\t\t// define(\"…\", f() {…})\n\t\t\t\t\t\tfn = expr.arguments[1];\n\t\t\t\t\t} else if (expr.arguments[1].type === \"ObjectExpression\") {\n\t\t\t\t\t\t// define(\"…\", {…})\n\t\t\t\t\t\tobj = expr.arguments[1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// define(\"…\", expr)\n\t\t\t\t\t\t// unclear if function or object\n\t\t\t\t\t\tobj = fn = expr.arguments[1];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tarray = expr.arguments[0];\n\t\t\t\t\tif (isCallable(expr.arguments[1])) {\n\t\t\t\t\t\t// define([…], f() {})\n\t\t\t\t\t\tfn = expr.arguments[1];\n\t\t\t\t\t} else if (expr.arguments[1].type === \"ObjectExpression\") {\n\t\t\t\t\t\t// define([…], {…})\n\t\t\t\t\t\tobj = expr.arguments[1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// define([…], expr)\n\t\t\t\t\t\t// unclear if function or object\n\t\t\t\t\t\tobj = fn = expr.arguments[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t// define(\"…\", […], f() {…})\n\t\t\t\tnamedModule = expr.arguments[0].value;\n\t\t\t\tarray = expr.arguments[1];\n\t\t\t\tif (isCallable(expr.arguments[2])) {\n\t\t\t\t\t// define(\"…\", […], f() {})\n\t\t\t\t\tfn = expr.arguments[2];\n\t\t\t\t} else if (expr.arguments[2].type === \"ObjectExpression\") {\n\t\t\t\t\t// define(\"…\", […], {…})\n\t\t\t\t\tobj = expr.arguments[2];\n\t\t\t\t} else {\n\t\t\t\t\t// define(\"…\", […], expr)\n\t\t\t\t\t// unclear if function or object\n\t\t\t\t\tobj = fn = expr.arguments[2];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t\tlet fnParams = null;\n\t\tlet fnParamsOffset = 0;\n\t\tif (fn) {\n\t\t\tif (isUnboundFunctionExpression(fn)) {\n\t\t\t\tfnParams = fn.params;\n\t\t\t} else if (isBoundFunctionExpression(fn)) {\n\t\t\t\tfnParams = fn.callee.object.params;\n\t\t\t\tfnParamsOffset = fn.arguments.length - 1;\n\t\t\t\tif (fnParamsOffset < 0) {\n\t\t\t\t\tfnParamsOffset = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet fnRenames = parser.scope.renames.createChild();\n\t\tif (array) {\n\t\t\tconst identifiers = {};\n\t\t\tconst param = parser.evaluateExpression(array);\n\t\t\tconst result = this.processArray(\n\t\t\t\tparser,\n\t\t\t\texpr,\n\t\t\t\tparam,\n\t\t\t\tidentifiers,\n\t\t\t\tnamedModule\n\t\t\t);\n\t\t\tif (!result) return;\n\t\t\tif (fnParams) {\n\t\t\t\tfnParams = fnParams.slice(fnParamsOffset).filter((param, idx) => {\n\t\t\t\t\tif (identifiers[idx]) {\n\t\t\t\t\t\tfnRenames.set(param.name, identifiers[idx]);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tconst identifiers = [\"require\", \"exports\", \"module\"];\n\t\t\tif (fnParams) {\n\t\t\t\tfnParams = fnParams.slice(fnParamsOffset).filter((param, idx) => {\n\t\t\t\t\tif (identifiers[idx]) {\n\t\t\t\t\t\tfnRenames.set(param.name, identifiers[idx]);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tlet inTry;\n\t\tif (fn && isUnboundFunctionExpression(fn)) {\n\t\t\tinTry = parser.scope.inTry;\n\t\t\tparser.inScope(fnParams, () => {\n\t\t\t\tparser.scope.renames = fnRenames;\n\t\t\t\tparser.scope.inTry = inTry;\n\t\t\t\tif (fn.body.type === \"BlockStatement\") {\n\t\t\t\t\tparser.walkStatement(fn.body);\n\t\t\t\t} else {\n\t\t\t\t\tparser.walkExpression(fn.body);\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (fn && isBoundFunctionExpression(fn)) {\n\t\t\tinTry = parser.scope.inTry;\n\t\t\tparser.inScope(\n\t\t\t\tfn.callee.object.params.filter(\n\t\t\t\t\ti => ![\"require\", \"module\", \"exports\"].includes(i.name)\n\t\t\t\t),\n\t\t\t\t() => {\n\t\t\t\t\tparser.scope.renames = fnRenames;\n\t\t\t\t\tparser.scope.inTry = inTry;\n\t\t\t\t\tif (fn.callee.object.body.type === \"BlockStatement\") {\n\t\t\t\t\t\tparser.walkStatement(fn.callee.object.body);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tparser.walkExpression(fn.callee.object.body);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tif (fn.arguments) {\n\t\t\t\tparser.walkExpressions(fn.arguments);\n\t\t\t}\n\t\t} else if (fn || obj) {\n\t\t\tparser.walkExpression(fn || obj);\n\t\t}\n\n\t\tconst dep = this.newDefineDependency(\n\t\t\texpr.range,\n\t\t\tarray ? array.range : null,\n\t\t\tfn ? fn.range : null,\n\t\t\tobj ? obj.range : null,\n\t\t\tnamedModule ? namedModule : null\n\t\t);\n\t\tdep.loc = expr.loc;\n\t\tif (namedModule) {\n\t\t\tdep.localModule = LocalModulesHelpers.addLocalModule(\n\t\t\t\tparser.state,\n\t\t\t\tnamedModule\n\t\t\t);\n\t\t}\n\t\tparser.state.current.addDependency(dep);\n\t\treturn true;\n\t}\n\n\tnewDefineDependency(\n\t\trange,\n\t\tarrayRange,\n\t\tfunctionRange,\n\t\tobjectRange,\n\t\tnamedModule\n\t) {\n\t\treturn new AMDDefineDependency(\n\t\t\trange,\n\t\t\tarrayRange,\n\t\t\tfunctionRange,\n\t\t\tobjectRange,\n\t\t\tnamedModule\n\t\t);\n\t}\n\tnewRequireArrayDependency(depsArray, range) {\n\t\treturn new AMDRequireArrayDependency(depsArray, range);\n\t}\n\tnewRequireItemDependency(request, range) {\n\t\treturn new AMDRequireItemDependency(request, range);\n\t}\n}\nmodule.exports = AMDDefineDependencyParserPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}