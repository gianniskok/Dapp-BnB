{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @typedef {Object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\n\n\nasync function* normaliseInput(input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  } // CID\n\n\n  const cid = CID.asCID(input);\n\n  if (cid) {\n    yield toPin({\n      cid\n    });\n    return;\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({\n      path: input\n    });\n    return;\n  } // { cid: CID recursive, metadata }\n  // @ts-ignore - it still could be iterable or async iterable\n\n\n  if (input.cid != null || input.path != null) {\n    // @ts-ignore\n    return yield toPin(input);\n  } // Iterable<?>\n\n\n  if (Symbol.iterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.iterator]();\n    const first = iterator.next();\n    if (first.done) return iterator; // Iterable<CID|String>\n\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        cid: first.value\n      });\n\n      for (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n\n      return;\n    } // Iterable<{ cid: CID recursive, metadata }>\n\n\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n\n      for (const obj of iterator) {\n        yield toPin(obj);\n      }\n\n      return;\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  } // AsyncIterable<?>\n\n\n  if (Symbol.asyncIterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.asyncIterator]();\n    const first = await iterator.next();\n    if (first.done) return iterator; // AsyncIterable<CID|String>\n\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        cid: first.value\n      });\n\n      for await (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n\n      return;\n    } // AsyncIterable<{ cid: CID|String recursive, metadata }>\n\n\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n\n      for await (const obj of iterator) {\n        yield toPin(obj);\n      }\n\n      return;\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\n/**\n * @param {Pinnable} input\n */\n\n\nfunction toPin(input) {\n  const path = input.cid || `${input.path}`;\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n  /** @type {Pin} */\n\n\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}\n\nmodule.exports = {\n  normaliseInput\n};","map":{"version":3,"names":["errCode","require","CID","normaliseInput","input","undefined","Error","cid","asCID","toPin","String","path","Symbol","iterator","first","next","done","value","obj","asyncIterator","pin","recursive","metadata","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-core-utils/src/pins/normalise-input.js"],"sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {Object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nasync function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID\n  const cid = CID.asCID(input)\n\n  if (cid) {\n    yield toPin({ cid })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-ignore - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-ignore\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n    if (first.done) return iterator\n\n    // Iterable<CID|String>\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<{ cid: CID recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (Symbol.asyncIterator in input) {\n    // @ts-ignore\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID|String>\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n\nmodule.exports = {\n  normaliseInput\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}