{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((\n      /** @type {any} */\n      link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    };\n  }\n\n  return get;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","fromString","uint8ArrayFromString","module","exports","api","get","cid","options","res","post","signal","searchParams","arg","Uint8Array","decode","dataEncoding","headers","data","json","Data","Links","map","link","Name","Hash","parse","Tsize","Size"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/object/get.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((/** @type {any} */ link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    }\n  }\n  return get\n})\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;EAAEG,UAAU,EAAEC;AAAd,IAAuCJ,OAAO,CAAC,yBAAD,CAApD;AAEA;AACA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,GAAf,CAAoBC,GAApB,EAAuC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACrC,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,YAAT,EAAuB;MACvCC,MAAM,EAAEH,OAAO,CAACG,MADuB;MAEvCC,YAAY,EAAEZ,iBAAiB,CAAC;QAC9Ba,GAAG,EAAG,GAAEN,GAAG,YAAYO,UAAf,GAA4BjB,GAAG,CAACkB,MAAJ,CAAWR,GAAX,CAA5B,GAA8CA,GAAI,EAD5B;QAE9BS,YAAY,EAAE,QAFgB;QAG9B,GAAGR;MAH2B,CAAD,CAFQ;MAOvCS,OAAO,EAAET,OAAO,CAACS;IAPsB,CAAvB,CAAlB;IASA,MAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAJ,EAAnB;IAEA,OAAO;MACLC,IAAI,EAAElB,oBAAoB,CAACgB,IAAI,CAACE,IAAN,EAAY,WAAZ,CADrB;MAELC,KAAK,EAAE,CAACH,IAAI,CAACG,KAAL,IAAc,EAAf,EAAmBC,GAAnB,CAAuB;MAAC;MAAmBC,IAApB,MAA8B;QAC1DC,IAAI,EAAED,IAAI,CAACC,IAD+C;QAE1DC,IAAI,EAAE5B,GAAG,CAAC6B,KAAJ,CAAUH,IAAI,CAACE,IAAf,CAFoD;QAG1DE,KAAK,EAAEJ,IAAI,CAACK;MAH8C,CAA9B,CAAvB;IAFF,CAAP;EAQD;;EACD,OAAOtB,GAAP;AACD,CA1ByB,CAA1B"},"metadata":{},"sourceType":"script"}