{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar Source = require(\"./Source\");\n\nvar SourceNode = require(\"source-map\").SourceNode;\n\nclass Replacement {\n  constructor(start, end, content, insertIndex, name) {\n    this.start = start;\n    this.end = end;\n    this.content = content;\n    this.insertIndex = insertIndex;\n    this.name = name;\n  }\n\n}\n\nclass ReplaceSource extends Source {\n  constructor(source, name) {\n    super();\n    this._source = source;\n    this._name = name;\n    /** @type {Replacement[]} */\n\n    this.replacements = [];\n  }\n\n  replace(start, end, newValue, name) {\n    if (typeof newValue !== \"string\") throw new Error(\"insertion must be a string, but is a \" + typeof newValue);\n    this.replacements.push(new Replacement(start, end, newValue, this.replacements.length, name));\n  }\n\n  insert(pos, newValue, name) {\n    if (typeof newValue !== \"string\") throw new Error(\"insertion must be a string, but is a \" + typeof newValue + \": \" + newValue);\n    this.replacements.push(new Replacement(pos, pos - 1, newValue, this.replacements.length, name));\n  }\n\n  source(options) {\n    return this._replaceString(this._source.source());\n  }\n\n  original() {\n    return this._source;\n  }\n\n  _sortReplacements() {\n    this.replacements.sort(function (a, b) {\n      var diff = b.end - a.end;\n      if (diff !== 0) return diff;\n      diff = b.start - a.start;\n      if (diff !== 0) return diff;\n      return b.insertIndex - a.insertIndex;\n    });\n  }\n\n  _replaceString(str) {\n    if (typeof str !== \"string\") throw new Error(\"str must be a string, but is a \" + typeof str + \": \" + str);\n\n    this._sortReplacements();\n\n    var result = [str];\n    this.replacements.forEach(function (repl) {\n      var remSource = result.pop();\n\n      var splitted1 = this._splitString(remSource, Math.floor(repl.end + 1));\n\n      var splitted2 = this._splitString(splitted1[0], Math.floor(repl.start));\n\n      result.push(splitted1[1], repl.content, splitted2[0]);\n    }, this); // write out result array in reverse order\n\n    let resultStr = \"\";\n\n    for (let i = result.length - 1; i >= 0; --i) {\n      resultStr += result[i];\n    }\n\n    return resultStr;\n  }\n\n  node(options) {\n    var node = this._source.node(options);\n\n    if (this.replacements.length === 0) {\n      return node;\n    }\n\n    this._sortReplacements();\n\n    var replace = new ReplacementEnumerator(this.replacements);\n    var output = [];\n    var position = 0;\n    var sources = Object.create(null);\n    var sourcesInLines = Object.create(null); // We build a new list of SourceNodes in \"output\"\n    // from the original mapping data\n\n    var result = new SourceNode(); // We need to add source contents manually\n    // because \"walk\" will not handle it\n\n    node.walkSourceContents(function (sourceFile, sourceContent) {\n      result.setSourceContent(sourceFile, sourceContent);\n      sources[\"$\" + sourceFile] = sourceContent;\n    });\n\n    var replaceInStringNode = this._replaceInStringNode.bind(this, output, replace, function getOriginalSource(mapping) {\n      var key = \"$\" + mapping.source;\n      var lines = sourcesInLines[key];\n\n      if (!lines) {\n        var source = sources[key];\n        if (!source) return null;\n        lines = source.split(\"\\n\").map(function (line) {\n          return line + \"\\n\";\n        });\n        sourcesInLines[key] = lines;\n      } // line is 1-based\n\n\n      if (mapping.line > lines.length) return null;\n      var line = lines[mapping.line - 1];\n      return line.substr(mapping.column);\n    });\n\n    node.walk(function (chunk, mapping) {\n      position = replaceInStringNode(chunk, position, mapping);\n    }); // If any replacements occur after the end of the original file, then we append them\n    // directly to the end of the output\n\n    var remaining = replace.footer();\n\n    if (remaining) {\n      output.push(remaining);\n    }\n\n    result.add(output);\n    return result;\n  }\n\n  listMap(options) {\n    this._sortReplacements();\n\n    var map = this._source.listMap(options);\n\n    var currentIndex = 0;\n    var replacements = this.replacements;\n    var idxReplacement = replacements.length - 1;\n    var removeChars = 0;\n    map = map.mapGeneratedCode(function (str) {\n      var newCurrentIndex = currentIndex + str.length;\n\n      if (removeChars > str.length) {\n        removeChars -= str.length;\n        str = \"\";\n      } else {\n        if (removeChars > 0) {\n          str = str.substr(removeChars);\n          currentIndex += removeChars;\n          removeChars = 0;\n        }\n\n        var finalStr = \"\";\n\n        while (idxReplacement >= 0 && replacements[idxReplacement].start < newCurrentIndex) {\n          var repl = replacements[idxReplacement];\n          var start = Math.floor(repl.start);\n          var end = Math.floor(repl.end + 1);\n          var before = str.substr(0, Math.max(0, start - currentIndex));\n\n          if (end <= newCurrentIndex) {\n            var after = str.substr(Math.max(0, end - currentIndex));\n            finalStr += before + repl.content;\n            str = after;\n            currentIndex = Math.max(currentIndex, end);\n          } else {\n            finalStr += before + repl.content;\n            str = \"\";\n            removeChars = end - newCurrentIndex;\n          }\n\n          idxReplacement--;\n        }\n\n        str = finalStr + str;\n      }\n\n      currentIndex = newCurrentIndex;\n      return str;\n    });\n    var extraCode = \"\";\n\n    while (idxReplacement >= 0) {\n      extraCode += replacements[idxReplacement].content;\n      idxReplacement--;\n    }\n\n    if (extraCode) {\n      map.add(extraCode);\n    }\n\n    return map;\n  }\n\n  _splitString(str, position) {\n    return position <= 0 ? [\"\", str] : [str.substr(0, position), str.substr(position)];\n  }\n\n  _replaceInStringNode(output, replace, getOriginalSource, node, position, mapping) {\n    var original = undefined;\n\n    do {\n      var splitPosition = replace.position - position; // If multiple replaces occur in the same location then the splitPosition may be\n      // before the current position for the subsequent splits. Ensure it is >= 0\n\n      if (splitPosition < 0) {\n        splitPosition = 0;\n      }\n\n      if (splitPosition >= node.length || replace.done) {\n        if (replace.emit) {\n          var nodeEnd = new SourceNode(mapping.line, mapping.column, mapping.source, node, mapping.name);\n          output.push(nodeEnd);\n        }\n\n        return position + node.length;\n      }\n\n      var originalColumn = mapping.column; // Try to figure out if generated code matches original code of this segement\n      // If this is the case we assume that it's allowed to move mapping.column\n      // Because getOriginalSource can be expensive we only do it when neccessary\n\n      var nodePart;\n\n      if (splitPosition > 0) {\n        nodePart = node.slice(0, splitPosition);\n\n        if (original === undefined) {\n          original = getOriginalSource(mapping);\n        }\n\n        if (original && original.length >= splitPosition && original.startsWith(nodePart)) {\n          mapping.column += splitPosition;\n          original = original.substr(splitPosition);\n        }\n      }\n\n      var emit = replace.next();\n\n      if (!emit) {\n        // Stop emitting when we have found the beginning of the string to replace.\n        // Emit the part of the string before splitPosition\n        if (splitPosition > 0) {\n          var nodeStart = new SourceNode(mapping.line, originalColumn, mapping.source, nodePart, mapping.name);\n          output.push(nodeStart);\n        } // Emit the replacement value\n\n\n        if (replace.value) {\n          output.push(new SourceNode(mapping.line, mapping.column, mapping.source, replace.value, mapping.name || replace.name));\n        }\n      } // Recurse with remainder of the string as there may be multiple replaces within a single node\n\n\n      node = node.substr(splitPosition);\n      position += splitPosition;\n    } while (true);\n  }\n\n}\n\nclass ReplacementEnumerator {\n  /**\n   * @param {Replacement[]} replacements list of replacements\n   */\n  constructor(replacements) {\n    this.replacements = replacements || [];\n    this.index = this.replacements.length;\n    this.done = false;\n    this.emit = false; // Set initial start position\n\n    this.next();\n  }\n\n  next() {\n    if (this.done) return true;\n\n    if (this.emit) {\n      // Start point found. stop emitting. set position to find end\n      var repl = this.replacements[this.index];\n      var end = Math.floor(repl.end + 1);\n      this.position = end;\n      this.value = repl.content;\n      this.name = repl.name;\n    } else {\n      // End point found. start emitting. set position to find next start\n      this.index--;\n\n      if (this.index < 0) {\n        this.done = true;\n      } else {\n        var nextRepl = this.replacements[this.index];\n        var start = Math.floor(nextRepl.start);\n        this.position = start;\n      }\n    }\n\n    if (this.position < 0) this.position = 0;\n    this.emit = !this.emit;\n    return this.emit;\n  }\n\n  footer() {\n    if (!this.done && !this.emit) this.next(); // If we finished _replaceInNode mid emit we advance to next entry\n\n    if (this.done) {\n      return [];\n    } else {\n      var resultStr = \"\";\n\n      for (var i = this.index; i >= 0; i--) {\n        var repl = this.replacements[i]; // this doesn't need to handle repl.name, because in SourceMaps generated code\n        // without pointer to original source can't have a name\n\n        resultStr += repl.content;\n      }\n\n      return resultStr;\n    }\n  }\n\n}\n\nrequire(\"./SourceAndMapMixin\")(ReplaceSource.prototype);\n\nmodule.exports = ReplaceSource;","map":{"version":3,"names":["Source","require","SourceNode","Replacement","constructor","start","end","content","insertIndex","name","ReplaceSource","source","_source","_name","replacements","replace","newValue","Error","push","length","insert","pos","options","_replaceString","original","_sortReplacements","sort","a","b","diff","str","result","forEach","repl","remSource","pop","splitted1","_splitString","Math","floor","splitted2","resultStr","i","node","ReplacementEnumerator","output","position","sources","Object","create","sourcesInLines","walkSourceContents","sourceFile","sourceContent","setSourceContent","replaceInStringNode","_replaceInStringNode","bind","getOriginalSource","mapping","key","lines","split","map","line","substr","column","walk","chunk","remaining","footer","add","listMap","currentIndex","idxReplacement","removeChars","mapGeneratedCode","newCurrentIndex","finalStr","before","max","after","extraCode","undefined","splitPosition","done","emit","nodeEnd","originalColumn","nodePart","slice","startsWith","next","nodeStart","value","index","nextRepl","prototype","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack-sources/lib/ReplaceSource.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar Source = require(\"./Source\");\nvar SourceNode = require(\"source-map\").SourceNode;\n\nclass Replacement {\n\tconstructor(start, end, content, insertIndex, name) {\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.content = content;\n\t\tthis.insertIndex = insertIndex;\n\t\tthis.name = name;\n\t}\n}\n\nclass ReplaceSource extends Source {\n\tconstructor(source, name) {\n\t\tsuper();\n\t\tthis._source = source;\n\t\tthis._name = name;\n\t\t/** @type {Replacement[]} */\n\t\tthis.replacements = [];\n\t}\n\n\treplace(start, end, newValue, name) {\n\t\tif(typeof newValue !== \"string\")\n\t\t\tthrow new Error(\"insertion must be a string, but is a \" + typeof newValue);\n\t\tthis.replacements.push(new Replacement(start, end, newValue, this.replacements.length, name));\n\t}\n\n\tinsert(pos, newValue, name) {\n\t\tif(typeof newValue !== \"string\")\n\t\t\tthrow new Error(\"insertion must be a string, but is a \" + typeof newValue + \": \" + newValue);\n\t\tthis.replacements.push(new Replacement(pos, pos - 1, newValue, this.replacements.length, name));\n\t}\n\n\tsource(options) {\n\t\treturn this._replaceString(this._source.source());\n\t}\n\n\toriginal() {\n\t\treturn this._source;\n\t}\n\n\t_sortReplacements() {\n\t\tthis.replacements.sort(function(a, b) {\n\t\t\tvar diff = b.end - a.end;\n\t\t\tif(diff !== 0)\n\t\t\t\treturn diff;\n\t\t\tdiff = b.start - a.start;\n\t\t\tif(diff !== 0)\n\t\t\t\treturn diff;\n\t\t\treturn b.insertIndex - a.insertIndex;\n\t\t});\n\t}\n\n\t_replaceString(str) {\n\t\tif(typeof str !== \"string\")\n\t\t\tthrow new Error(\"str must be a string, but is a \" + typeof str + \": \" + str);\n\t\tthis._sortReplacements();\n\t\tvar result = [str];\n\t\tthis.replacements.forEach(function(repl) {\n\t\t\tvar remSource = result.pop();\n\t\t\tvar splitted1 = this._splitString(remSource, Math.floor(repl.end + 1));\n\t\t\tvar splitted2 = this._splitString(splitted1[0], Math.floor(repl.start));\n\t\t\tresult.push(splitted1[1], repl.content, splitted2[0]);\n\t\t}, this);\n\n\t\t// write out result array in reverse order\n\t\tlet resultStr = \"\";\n\t\tfor(let i = result.length - 1; i >= 0; --i) {\n\t\t\tresultStr += result[i];\n\t\t}\n\t\treturn resultStr;\n\t}\n\n\tnode(options) {\n\t\tvar node = this._source.node(options);\n\t\tif(this.replacements.length === 0) {\n\t\t\treturn node;\n\t\t}\n\t\tthis._sortReplacements();\n\t\tvar replace = new ReplacementEnumerator(this.replacements);\n\t\tvar output = [];\n\t\tvar position = 0;\n\t\tvar sources = Object.create(null);\n\t\tvar sourcesInLines = Object.create(null);\n\n\t\t// We build a new list of SourceNodes in \"output\"\n\t\t// from the original mapping data\n\n\t\tvar result = new SourceNode();\n\n\t\t// We need to add source contents manually\n\t\t// because \"walk\" will not handle it\n\t\tnode.walkSourceContents(function(sourceFile, sourceContent) {\n\t\t\tresult.setSourceContent(sourceFile, sourceContent);\n\t\t\tsources[\"$\" + sourceFile] = sourceContent;\n\t\t});\n\n\t\tvar replaceInStringNode = this._replaceInStringNode.bind(this, output, replace, function getOriginalSource(mapping) {\n\t\t\tvar key = \"$\" + mapping.source;\n\t\t\tvar lines = sourcesInLines[key];\n\t\t\tif(!lines) {\n\t\t\t\tvar source = sources[key];\n\t\t\t\tif(!source) return null;\n\t\t\t\tlines = source.split(\"\\n\").map(function(line) {\n\t\t\t\t\treturn line + \"\\n\";\n\t\t\t\t});\n\t\t\t\tsourcesInLines[key] = lines;\n\t\t\t}\n\t\t\t// line is 1-based\n\t\t\tif(mapping.line > lines.length) return null;\n\t\t\tvar line = lines[mapping.line - 1];\n\t\t\treturn line.substr(mapping.column);\n\t\t});\n\n\t\tnode.walk(function(chunk, mapping) {\n\t\t\tposition = replaceInStringNode(chunk, position, mapping);\n\t\t});\n\n\t\t// If any replacements occur after the end of the original file, then we append them\n\t\t// directly to the end of the output\n\t\tvar remaining = replace.footer();\n\t\tif(remaining) {\n\t\t\toutput.push(remaining);\n\t\t}\n\n\t\tresult.add(output);\n\n\t\treturn result;\n\t}\n\n\tlistMap(options) {\n\t\tthis._sortReplacements();\n\t\tvar map = this._source.listMap(options);\n\t\tvar currentIndex = 0;\n\t\tvar replacements = this.replacements;\n\t\tvar idxReplacement = replacements.length - 1;\n\t\tvar removeChars = 0;\n\t\tmap = map.mapGeneratedCode(function(str) {\n\t\t\tvar newCurrentIndex = currentIndex + str.length;\n\t\t\tif(removeChars > str.length) {\n\t\t\t\tremoveChars -= str.length;\n\t\t\t\tstr = \"\";\n\t\t\t} else {\n\t\t\t\tif(removeChars > 0) {\n\t\t\t\t\tstr = str.substr(removeChars);\n\t\t\t\t\tcurrentIndex += removeChars;\n\t\t\t\t\tremoveChars = 0;\n\t\t\t\t}\n\t\t\t\tvar finalStr = \"\";\n\t\t\t\twhile(idxReplacement >= 0 && replacements[idxReplacement].start < newCurrentIndex) {\n\t\t\t\t\tvar repl = replacements[idxReplacement];\n\t\t\t\t\tvar start = Math.floor(repl.start);\n\t\t\t\t\tvar end = Math.floor(repl.end + 1);\n\t\t\t\t\tvar before = str.substr(0, Math.max(0, start - currentIndex));\n\t\t\t\t\tif(end <= newCurrentIndex) {\n\t\t\t\t\t\tvar after = str.substr(Math.max(0, end - currentIndex));\n\t\t\t\t\t\tfinalStr += before + repl.content;\n\t\t\t\t\t\tstr = after;\n\t\t\t\t\t\tcurrentIndex = Math.max(currentIndex, end);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinalStr += before + repl.content;\n\t\t\t\t\t\tstr = \"\";\n\t\t\t\t\t\tremoveChars = end - newCurrentIndex;\n\t\t\t\t\t}\n\t\t\t\t\tidxReplacement--;\n\t\t\t\t}\n\t\t\t\tstr = finalStr + str;\n\t\t\t}\n\t\t\tcurrentIndex = newCurrentIndex;\n\t\t\treturn str;\n\t\t});\n\t\tvar extraCode = \"\";\n\t\twhile(idxReplacement >= 0) {\n\t\t\textraCode += replacements[idxReplacement].content;\n\t\t\tidxReplacement--;\n\t\t}\n\t\tif(extraCode) {\n\t\t\tmap.add(extraCode);\n\t\t}\n\t\treturn map;\n\t}\n\n\t_splitString(str, position) {\n\t\treturn position <= 0 ? [\"\", str] : [str.substr(0, position), str.substr(position)];\n\t}\n\n\t_replaceInStringNode(output, replace, getOriginalSource, node, position, mapping) {\n\t\tvar original = undefined;\n\n\t\tdo {\n\t\t\tvar splitPosition = replace.position - position;\n\t\t\t// If multiple replaces occur in the same location then the splitPosition may be\n\t\t\t// before the current position for the subsequent splits. Ensure it is >= 0\n\t\t\tif(splitPosition < 0) {\n\t\t\t\tsplitPosition = 0;\n\t\t\t}\n\t\t\tif(splitPosition >= node.length || replace.done) {\n\t\t\t\tif(replace.emit) {\n\t\t\t\t\tvar nodeEnd = new SourceNode(\n\t\t\t\t\t\tmapping.line,\n\t\t\t\t\t\tmapping.column,\n\t\t\t\t\t\tmapping.source,\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmapping.name\n\t\t\t\t\t);\n\t\t\t\t\toutput.push(nodeEnd);\n\t\t\t\t}\n\t\t\t\treturn position + node.length;\n\t\t\t}\n\n\t\t\tvar originalColumn = mapping.column;\n\n\t\t\t// Try to figure out if generated code matches original code of this segement\n\t\t\t// If this is the case we assume that it's allowed to move mapping.column\n\t\t\t// Because getOriginalSource can be expensive we only do it when neccessary\n\n\t\t\tvar nodePart;\n\t\t\tif(splitPosition > 0) {\n\t\t\t\tnodePart = node.slice(0, splitPosition);\n\t\t\t\tif(original === undefined) {\n\t\t\t\t\toriginal = getOriginalSource(mapping);\n\t\t\t\t}\n\t\t\t\tif(original && original.length >= splitPosition && original.startsWith(nodePart)) {\n\t\t\t\t\tmapping.column += splitPosition;\n\t\t\t\t\toriginal = original.substr(splitPosition);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar emit = replace.next();\n\t\t\tif(!emit) {\n\t\t\t\t// Stop emitting when we have found the beginning of the string to replace.\n\t\t\t\t// Emit the part of the string before splitPosition\n\t\t\t\tif(splitPosition > 0) {\n\t\t\t\t\tvar nodeStart = new SourceNode(\n\t\t\t\t\t\tmapping.line,\n\t\t\t\t\t\toriginalColumn,\n\t\t\t\t\t\tmapping.source,\n\t\t\t\t\t\tnodePart,\n\t\t\t\t\t\tmapping.name\n\t\t\t\t\t);\n\t\t\t\t\toutput.push(nodeStart);\n\t\t\t\t}\n\n\t\t\t\t// Emit the replacement value\n\t\t\t\tif(replace.value) {\n\t\t\t\t\toutput.push(new SourceNode(\n\t\t\t\t\t\tmapping.line,\n\t\t\t\t\t\tmapping.column,\n\t\t\t\t\t\tmapping.source,\n\t\t\t\t\t\treplace.value,\n\t\t\t\t\t\tmapping.name || replace.name\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Recurse with remainder of the string as there may be multiple replaces within a single node\n\t\t\tnode = node.substr(splitPosition);\n\t\t\tposition += splitPosition;\n\t\t} while (true);\n\t}\n}\n\nclass ReplacementEnumerator {\n\t/**\n\t * @param {Replacement[]} replacements list of replacements\n\t */\n\tconstructor(replacements) {\n\t\tthis.replacements = replacements || [];\n\t\tthis.index = this.replacements.length;\n\t\tthis.done = false;\n\t\tthis.emit = false;\n\t\t// Set initial start position\n\t\tthis.next();\n\t}\n\n\tnext() {\n\t\tif(this.done)\n\t\t\treturn true;\n\t\tif(this.emit) {\n\t\t\t// Start point found. stop emitting. set position to find end\n\t\t\tvar repl = this.replacements[this.index];\n\t\t\tvar end = Math.floor(repl.end + 1);\n\t\t\tthis.position = end;\n\t\t\tthis.value = repl.content;\n\t\t\tthis.name = repl.name;\n\t\t} else {\n\t\t\t// End point found. start emitting. set position to find next start\n\t\t\tthis.index--;\n\t\t\tif(this.index < 0) {\n\t\t\t\tthis.done = true;\n\t\t\t} else {\n\t\t\t\tvar nextRepl = this.replacements[this.index];\n\t\t\t\tvar start = Math.floor(nextRepl.start);\n\t\t\t\tthis.position = start;\n\t\t\t}\n\t\t}\n\t\tif(this.position < 0)\n\t\t\tthis.position = 0;\n\t\tthis.emit = !this.emit;\n\t\treturn this.emit;\n\t}\n\n\tfooter() {\n\t\tif(!this.done && !this.emit)\n\t\t\tthis.next(); // If we finished _replaceInNode mid emit we advance to next entry\n\t\tif(this.done) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tvar resultStr = \"\";\n\t\t\tfor(var i = this.index; i >= 0; i--) {\n\t\t\t\tvar repl = this.replacements[i];\n\t\t\t\t// this doesn't need to handle repl.name, because in SourceMaps generated code\n\t\t\t\t// without pointer to original source can't have a name\n\t\t\t\tresultStr += repl.content;\n\t\t\t}\n\t\t\treturn resultStr;\n\t\t}\n\t}\n}\n\nrequire(\"./SourceAndMapMixin\")(ReplaceSource.prototype);\n\nmodule.exports = ReplaceSource;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}