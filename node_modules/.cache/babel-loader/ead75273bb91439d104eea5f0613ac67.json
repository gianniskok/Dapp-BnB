{"ast":null,"code":"\"use strict\";\n/**\n * A subset of Set that offers sorting functionality\n * @template T item type in set\n * @extends {Set<T>}\n */\n\nclass SortableSet extends Set {\n  /**\n   * Create a new sortable set\n   * @param {Iterable<T>=} initialIterable The initial iterable value\n   * @typedef {function(T, T): number} SortFunction\n   * @param {SortFunction=} defaultSort Default sorting function\n   */\n  constructor(initialIterable, defaultSort) {\n    super(initialIterable);\n    /** @private @type {function(T, T): number}} */\n\n    this._sortFn = defaultSort;\n    /** @private @type {function(T, T): number} | null} */\n\n    this._lastActiveSortFn = null;\n    /** @private @type {Map<Function, T[]> | undefined} */\n\n    this._cache = undefined;\n    /** @private @type {Map<Function, T[]|string|number> | undefined} */\n\n    this._cacheOrderIndependent = undefined;\n  }\n  /**\n   * @param {T} value value to add to set\n   * @returns {this} returns itself\n   */\n\n\n  add(value) {\n    this._lastActiveSortFn = null;\n\n    this._invalidateCache();\n\n    this._invalidateOrderedCache();\n\n    super.add(value);\n    return this;\n  }\n  /**\n   * @param {T} value value to delete\n   * @returns {boolean} true if value existed in set, false otherwise\n   */\n\n\n  delete(value) {\n    this._invalidateCache();\n\n    this._invalidateOrderedCache();\n\n    return super.delete(value);\n  }\n  /**\n   * @returns {void}\n   */\n\n\n  clear() {\n    this._invalidateCache();\n\n    this._invalidateOrderedCache();\n\n    return super.clear();\n  }\n  /**\n   * Sort with a comparer function\n   * @param {SortFunction} sortFn Sorting comparer function\n   * @returns {void}\n   */\n\n\n  sortWith(sortFn) {\n    if (this.size <= 1 || sortFn === this._lastActiveSortFn) {\n      // already sorted - nothing to do\n      return;\n    }\n\n    const sortedArray = Array.from(this).sort(sortFn);\n    super.clear();\n\n    for (let i = 0; i < sortedArray.length; i += 1) {\n      super.add(sortedArray[i]);\n    }\n\n    this._lastActiveSortFn = sortFn;\n\n    this._invalidateCache();\n  }\n\n  sort() {\n    this.sortWith(this._sortFn);\n  }\n  /**\n   * Get data from cache\n   * @param {function(SortableSet<T>): T[]} fn function to calculate value\n   * @returns {T[]} returns result of fn(this), cached until set changes\n   */\n\n\n  getFromCache(fn) {\n    if (this._cache === undefined) {\n      this._cache = new Map();\n    } else {\n      const data = this._cache.get(fn);\n\n      if (data !== undefined) {\n        return data;\n      }\n    }\n\n    const newData = fn(this);\n\n    this._cache.set(fn, newData);\n\n    return newData;\n  }\n  /**\n   * @param {function(SortableSet<T>): string|number|T[]} fn function to calculate value\n   * @returns {any} returns result of fn(this), cached until set changes\n   */\n\n\n  getFromUnorderedCache(fn) {\n    if (this._cacheOrderIndependent === undefined) {\n      this._cacheOrderIndependent = new Map();\n    } else {\n      const data = this._cacheOrderIndependent.get(fn);\n\n      if (data !== undefined) {\n        return data;\n      }\n    }\n\n    const newData = fn(this);\n\n    this._cacheOrderIndependent.set(fn, newData);\n\n    return newData;\n  }\n  /**\n   * @private\n   * @returns {void}\n   */\n\n\n  _invalidateCache() {\n    if (this._cache !== undefined) {\n      this._cache.clear();\n    }\n  }\n  /**\n   * @private\n   * @returns {void}\n   */\n\n\n  _invalidateOrderedCache() {\n    if (this._cacheOrderIndependent !== undefined) {\n      this._cacheOrderIndependent.clear();\n    }\n  }\n\n}\n\nmodule.exports = SortableSet;","map":{"version":3,"names":["SortableSet","Set","constructor","initialIterable","defaultSort","_sortFn","_lastActiveSortFn","_cache","undefined","_cacheOrderIndependent","add","value","_invalidateCache","_invalidateOrderedCache","delete","clear","sortWith","sortFn","size","sortedArray","Array","from","sort","i","length","getFromCache","fn","Map","data","get","newData","set","getFromUnorderedCache","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/util/SortableSet.js"],"sourcesContent":["\"use strict\";\n\n/**\n * A subset of Set that offers sorting functionality\n * @template T item type in set\n * @extends {Set<T>}\n */\nclass SortableSet extends Set {\n\t/**\n\t * Create a new sortable set\n\t * @param {Iterable<T>=} initialIterable The initial iterable value\n\t * @typedef {function(T, T): number} SortFunction\n\t * @param {SortFunction=} defaultSort Default sorting function\n\t */\n\tconstructor(initialIterable, defaultSort) {\n\t\tsuper(initialIterable);\n\t\t/** @private @type {function(T, T): number}} */\n\t\tthis._sortFn = defaultSort;\n\t\t/** @private @type {function(T, T): number} | null} */\n\t\tthis._lastActiveSortFn = null;\n\t\t/** @private @type {Map<Function, T[]> | undefined} */\n\t\tthis._cache = undefined;\n\t\t/** @private @type {Map<Function, T[]|string|number> | undefined} */\n\t\tthis._cacheOrderIndependent = undefined;\n\t}\n\n\t/**\n\t * @param {T} value value to add to set\n\t * @returns {this} returns itself\n\t */\n\tadd(value) {\n\t\tthis._lastActiveSortFn = null;\n\t\tthis._invalidateCache();\n\t\tthis._invalidateOrderedCache();\n\t\tsuper.add(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {T} value value to delete\n\t * @returns {boolean} true if value existed in set, false otherwise\n\t */\n\tdelete(value) {\n\t\tthis._invalidateCache();\n\t\tthis._invalidateOrderedCache();\n\t\treturn super.delete(value);\n\t}\n\n\t/**\n\t * @returns {void}\n\t */\n\tclear() {\n\t\tthis._invalidateCache();\n\t\tthis._invalidateOrderedCache();\n\t\treturn super.clear();\n\t}\n\n\t/**\n\t * Sort with a comparer function\n\t * @param {SortFunction} sortFn Sorting comparer function\n\t * @returns {void}\n\t */\n\tsortWith(sortFn) {\n\t\tif (this.size <= 1 || sortFn === this._lastActiveSortFn) {\n\t\t\t// already sorted - nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tconst sortedArray = Array.from(this).sort(sortFn);\n\t\tsuper.clear();\n\t\tfor (let i = 0; i < sortedArray.length; i += 1) {\n\t\t\tsuper.add(sortedArray[i]);\n\t\t}\n\t\tthis._lastActiveSortFn = sortFn;\n\t\tthis._invalidateCache();\n\t}\n\n\tsort() {\n\t\tthis.sortWith(this._sortFn);\n\t}\n\n\t/**\n\t * Get data from cache\n\t * @param {function(SortableSet<T>): T[]} fn function to calculate value\n\t * @returns {T[]} returns result of fn(this), cached until set changes\n\t */\n\tgetFromCache(fn) {\n\t\tif (this._cache === undefined) {\n\t\t\tthis._cache = new Map();\n\t\t} else {\n\t\t\tconst data = this._cache.get(fn);\n\t\t\tif (data !== undefined) {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t\tconst newData = fn(this);\n\t\tthis._cache.set(fn, newData);\n\t\treturn newData;\n\t}\n\n\t/**\n\t * @param {function(SortableSet<T>): string|number|T[]} fn function to calculate value\n\t * @returns {any} returns result of fn(this), cached until set changes\n\t */\n\tgetFromUnorderedCache(fn) {\n\t\tif (this._cacheOrderIndependent === undefined) {\n\t\t\tthis._cacheOrderIndependent = new Map();\n\t\t} else {\n\t\t\tconst data = this._cacheOrderIndependent.get(fn);\n\t\t\tif (data !== undefined) {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t\tconst newData = fn(this);\n\t\tthis._cacheOrderIndependent.set(fn, newData);\n\t\treturn newData;\n\t}\n\n\t/**\n\t * @private\n\t * @returns {void}\n\t */\n\t_invalidateCache() {\n\t\tif (this._cache !== undefined) {\n\t\t\tthis._cache.clear();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @returns {void}\n\t */\n\t_invalidateOrderedCache() {\n\t\tif (this._cacheOrderIndependent !== undefined) {\n\t\t\tthis._cacheOrderIndependent.clear();\n\t\t}\n\t}\n}\n\nmodule.exports = SortableSet;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}