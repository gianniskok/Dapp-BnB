{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\n\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\n\n\nexports.decode = function (charCode) {\n  var bigA = 65; // 'A'\n\n  var bigZ = 90; // 'Z'\n\n  var littleA = 97; // 'a'\n\n  var littleZ = 122; // 'z'\n\n  var zero = 48; // '0'\n\n  var nine = 57; // '9'\n\n  var plus = 43; // '+'\n\n  var slash = 47; // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52; // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n  if (bigA <= charCode && charCode <= bigZ) {\n    return charCode - bigA;\n  } // 26 - 51: abcdefghijklmnopqrstuvwxyz\n\n\n  if (littleA <= charCode && charCode <= littleZ) {\n    return charCode - littleA + littleOffset;\n  } // 52 - 61: 0123456789\n\n\n  if (zero <= charCode && charCode <= nine) {\n    return charCode - zero + numberOffset;\n  } // 62: +\n\n\n  if (charCode == plus) {\n    return 62;\n  } // 63: /\n\n\n  if (charCode == slash) {\n    return 63;\n  } // Invalid base64 digit.\n\n\n  return -1;\n};","map":{"version":3,"names":["intToCharMap","split","exports","encode","number","length","TypeError","decode","charCode","bigA","bigZ","littleA","littleZ","zero","nine","plus","slash","littleOffset","numberOffset"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/snapdragon/node_modules/source-map/lib/base64.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n"],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,YAAY,GAAG,mEAAmEC,KAAnE,CAAyE,EAAzE,CAAnB;AAEA;AACA;AACA;;AACAC,OAAO,CAACC,MAAR,GAAiB,UAAUC,MAAV,EAAkB;EACjC,IAAI,KAAKA,MAAL,IAAeA,MAAM,GAAGJ,YAAY,CAACK,MAAzC,EAAiD;IAC/C,OAAOL,YAAY,CAACI,MAAD,CAAnB;EACD;;EACD,MAAM,IAAIE,SAAJ,CAAc,+BAA+BF,MAA7C,CAAN;AACD,CALD;AAOA;AACA;AACA;AACA;;;AACAF,OAAO,CAACK,MAAR,GAAiB,UAAUC,QAAV,EAAoB;EACnC,IAAIC,IAAI,GAAG,EAAX,CADmC,CAChB;;EACnB,IAAIC,IAAI,GAAG,EAAX,CAFmC,CAEhB;;EAEnB,IAAIC,OAAO,GAAG,EAAd,CAJmC,CAIhB;;EACnB,IAAIC,OAAO,GAAG,GAAd,CALmC,CAKhB;;EAEnB,IAAIC,IAAI,GAAG,EAAX,CAPmC,CAOhB;;EACnB,IAAIC,IAAI,GAAG,EAAX,CARmC,CAQhB;;EAEnB,IAAIC,IAAI,GAAG,EAAX,CAVmC,CAUhB;;EACnB,IAAIC,KAAK,GAAG,EAAZ,CAXmC,CAWhB;;EAEnB,IAAIC,YAAY,GAAG,EAAnB;EACA,IAAIC,YAAY,GAAG,EAAnB,CAdmC,CAgBnC;;EACA,IAAIT,IAAI,IAAID,QAAR,IAAoBA,QAAQ,IAAIE,IAApC,EAA0C;IACxC,OAAQF,QAAQ,GAAGC,IAAnB;EACD,CAnBkC,CAqBnC;;;EACA,IAAIE,OAAO,IAAIH,QAAX,IAAuBA,QAAQ,IAAII,OAAvC,EAAgD;IAC9C,OAAQJ,QAAQ,GAAGG,OAAX,GAAqBM,YAA7B;EACD,CAxBkC,CA0BnC;;;EACA,IAAIJ,IAAI,IAAIL,QAAR,IAAoBA,QAAQ,IAAIM,IAApC,EAA0C;IACxC,OAAQN,QAAQ,GAAGK,IAAX,GAAkBK,YAA1B;EACD,CA7BkC,CA+BnC;;;EACA,IAAIV,QAAQ,IAAIO,IAAhB,EAAsB;IACpB,OAAO,EAAP;EACD,CAlCkC,CAoCnC;;;EACA,IAAIP,QAAQ,IAAIQ,KAAhB,EAAuB;IACrB,OAAO,EAAP;EACD,CAvCkC,CAyCnC;;;EACA,OAAO,CAAC,CAAR;AACD,CA3CD"},"metadata":{},"sourceType":"script"}