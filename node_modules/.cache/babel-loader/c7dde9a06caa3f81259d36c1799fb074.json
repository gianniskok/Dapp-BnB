{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../schemas/plugins/ProgressPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginArgument} ProgressPluginArgument */\n\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginOptions} ProgressPluginOptions */\n\n\nconst createDefaultHandler = (profile, logger) => {\n  let lastState;\n  let lastStateTime;\n\n  const defaultHandler = function (percentage, msg) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    logger.status(`${Math.floor(percentage * 100)}%`, msg, ...args);\n\n    if (profile) {\n      let state = msg;\n      state = state.replace(/^\\d+\\/\\d+\\s+/, \"\");\n\n      if (percentage === 0) {\n        lastState = null;\n        lastStateTime = Date.now();\n      } else if (state !== lastState || percentage === 1) {\n        const now = Date.now();\n\n        if (lastState) {\n          const diff = now - lastStateTime;\n          const stateMsg = `${diff}ms ${lastState}`;\n\n          if (diff > 1000) {\n            logger.warn(stateMsg);\n          } else if (diff > 10) {\n            logger.info(stateMsg);\n          } else if (diff > 0) {\n            logger.log(stateMsg);\n          } else {\n            logger.debug(stateMsg);\n          }\n        }\n\n        lastState = state;\n        lastStateTime = now;\n      }\n    }\n\n    if (percentage === 1) logger.status();\n  };\n\n  return defaultHandler;\n};\n\nclass ProgressPlugin {\n  /**\n   * @param {ProgressPluginArgument} options options\n   */\n  constructor(options) {\n    if (typeof options === \"function\") {\n      options = {\n        handler: options\n      };\n    }\n\n    options = options || {};\n    validateOptions(schema, options, \"Progress Plugin\");\n    options = Object.assign({}, ProgressPlugin.defaultOptions, options);\n    this.profile = options.profile;\n    this.handler = options.handler;\n    this.modulesCount = options.modulesCount;\n    this.showEntries = options.entries;\n    this.showModules = options.modules;\n    this.showActiveModules = options.activeModules;\n  }\n\n  apply(compiler) {\n    const {\n      modulesCount\n    } = this;\n    const handler = this.handler || createDefaultHandler(this.profile, compiler.getInfrastructureLogger(\"webpack.Progress\"));\n    const showEntries = this.showEntries;\n    const showModules = this.showModules;\n    const showActiveModules = this.showActiveModules;\n\n    if (compiler.compilers) {\n      const states = new Array(compiler.compilers.length);\n      compiler.compilers.forEach((compiler, idx) => {\n        new ProgressPlugin(function (p, msg) {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n            args[_key2 - 2] = arguments[_key2];\n          }\n\n          states[idx] = [p, msg, ...args];\n          handler(states.map(state => state && state[0] || 0).reduce((a, b) => a + b) / states.length, `[${idx}] ${msg}`, ...args);\n        }).apply(compiler);\n      });\n    } else {\n      let lastModulesCount = 0;\n      let lastEntriesCount = 0;\n      let moduleCount = modulesCount;\n      let entriesCount = 1;\n      let doneModules = 0;\n      let doneEntries = 0;\n      const activeModules = new Set();\n      let lastActiveModule = \"\";\n\n      const update = () => {\n        const percentByModules = doneModules / Math.max(lastModulesCount, moduleCount);\n        const percentByEntries = doneEntries / Math.max(lastEntriesCount, entriesCount);\n        const items = [0.1 + Math.max(percentByModules, percentByEntries) * 0.6, \"building\"];\n\n        if (showEntries) {\n          items.push(`${doneEntries}/${entriesCount} entries`);\n        }\n\n        if (showModules) {\n          items.push(`${doneModules}/${moduleCount} modules`);\n        }\n\n        if (showActiveModules) {\n          items.push(`${activeModules.size} active`);\n          items.push(lastActiveModule);\n        }\n\n        handler(...items);\n      };\n\n      const moduleAdd = module => {\n        moduleCount++;\n\n        if (showActiveModules) {\n          const ident = module.identifier();\n\n          if (ident) {\n            activeModules.add(ident);\n            lastActiveModule = ident;\n          }\n        }\n\n        update();\n      };\n\n      const entryAdd = (entry, name) => {\n        entriesCount++;\n        update();\n      };\n\n      const moduleDone = module => {\n        doneModules++;\n\n        if (showActiveModules) {\n          const ident = module.identifier();\n\n          if (ident) {\n            activeModules.delete(ident);\n\n            if (lastActiveModule === ident) {\n              lastActiveModule = \"\";\n\n              for (const m of activeModules) {\n                lastActiveModule = m;\n              }\n            }\n          }\n        }\n\n        update();\n      };\n\n      const entryDone = (entry, name) => {\n        doneEntries++;\n        update();\n      };\n\n      compiler.hooks.compilation.tap(\"ProgressPlugin\", compilation => {\n        if (compilation.compiler.isChild()) return;\n        lastModulesCount = moduleCount;\n        lastEntriesCount = entriesCount;\n        moduleCount = entriesCount = 0;\n        doneModules = doneEntries = 0;\n        handler(0, \"compiling\");\n        compilation.hooks.buildModule.tap(\"ProgressPlugin\", moduleAdd);\n        compilation.hooks.failedModule.tap(\"ProgressPlugin\", moduleDone);\n        compilation.hooks.succeedModule.tap(\"ProgressPlugin\", moduleDone);\n        compilation.hooks.addEntry.tap(\"ProgressPlugin\", entryAdd);\n        compilation.hooks.failedEntry.tap(\"ProgressPlugin\", entryDone);\n        compilation.hooks.succeedEntry.tap(\"ProgressPlugin\", entryDone);\n        const hooks = {\n          finishModules: \"finish module graph\",\n          seal: \"sealing\",\n          beforeChunks: \"chunk graph\",\n          afterChunks: \"after chunk graph\",\n          optimizeDependenciesBasic: \"basic dependencies optimization\",\n          optimizeDependencies: \"dependencies optimization\",\n          optimizeDependenciesAdvanced: \"advanced dependencies optimization\",\n          afterOptimizeDependencies: \"after dependencies optimization\",\n          optimize: \"optimizing\",\n          optimizeModulesBasic: \"basic module optimization\",\n          optimizeModules: \"module optimization\",\n          optimizeModulesAdvanced: \"advanced module optimization\",\n          afterOptimizeModules: \"after module optimization\",\n          optimizeChunksBasic: \"basic chunk optimization\",\n          optimizeChunks: \"chunk optimization\",\n          optimizeChunksAdvanced: \"advanced chunk optimization\",\n          afterOptimizeChunks: \"after chunk optimization\",\n          optimizeTree: \"module and chunk tree optimization\",\n          afterOptimizeTree: \"after module and chunk tree optimization\",\n          optimizeChunkModulesBasic: \"basic chunk modules optimization\",\n          optimizeChunkModules: \"chunk modules optimization\",\n          optimizeChunkModulesAdvanced: \"advanced chunk modules optimization\",\n          afterOptimizeChunkModules: \"after chunk modules optimization\",\n          reviveModules: \"module reviving\",\n          optimizeModuleOrder: \"module order optimization\",\n          advancedOptimizeModuleOrder: \"advanced module order optimization\",\n          beforeModuleIds: \"before module ids\",\n          moduleIds: \"module ids\",\n          optimizeModuleIds: \"module id optimization\",\n          afterOptimizeModuleIds: \"module id optimization\",\n          reviveChunks: \"chunk reviving\",\n          optimizeChunkOrder: \"chunk order optimization\",\n          beforeChunkIds: \"before chunk ids\",\n          optimizeChunkIds: \"chunk id optimization\",\n          afterOptimizeChunkIds: \"after chunk id optimization\",\n          recordModules: \"record modules\",\n          recordChunks: \"record chunks\",\n          beforeHash: \"hashing\",\n          afterHash: \"after hashing\",\n          recordHash: \"record hash\",\n          beforeModuleAssets: \"module assets processing\",\n          beforeChunkAssets: \"chunk assets processing\",\n          additionalChunkAssets: \"additional chunk assets processing\",\n          record: \"recording\",\n          additionalAssets: \"additional asset processing\",\n          optimizeChunkAssets: \"chunk asset optimization\",\n          afterOptimizeChunkAssets: \"after chunk asset optimization\",\n          optimizeAssets: \"asset optimization\",\n          afterOptimizeAssets: \"after asset optimization\",\n          afterSeal: \"after seal\"\n        };\n        const numberOfHooks = Object.keys(hooks).length;\n        Object.keys(hooks).forEach((name, idx) => {\n          const title = hooks[name];\n          const percentage = idx / numberOfHooks * 0.25 + 0.7;\n          compilation.hooks[name].intercept({\n            name: \"ProgressPlugin\",\n            context: true,\n            call: () => {\n              handler(percentage, title);\n            },\n            tap: (context, tap) => {\n              if (context) {\n                // p is percentage from 0 to 1\n                // args is any number of messages in a hierarchical matter\n                context.reportProgress = function (p) {\n                  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n                    args[_key3 - 1] = arguments[_key3];\n                  }\n\n                  handler(percentage, title, tap.name, ...args);\n                };\n              }\n\n              handler(percentage, title, tap.name);\n            }\n          });\n        });\n      });\n      compiler.hooks.emit.intercept({\n        name: \"ProgressPlugin\",\n        context: true,\n        call: () => {\n          handler(0.95, \"emitting\");\n        },\n        tap: (context, tap) => {\n          if (context) {\n            context.reportProgress = function (p) {\n              for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                args[_key4 - 1] = arguments[_key4];\n              }\n\n              handler(0.95, \"emitting\", tap.name, ...args);\n            };\n          }\n\n          handler(0.95, \"emitting\", tap.name);\n        }\n      });\n      compiler.hooks.afterEmit.intercept({\n        name: \"ProgressPlugin\",\n        context: true,\n        call: () => {\n          handler(0.98, \"after emitting\");\n        },\n        tap: (context, tap) => {\n          if (context) {\n            context.reportProgress = function (p) {\n              for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n                args[_key5 - 1] = arguments[_key5];\n              }\n\n              handler(0.98, \"after emitting\", tap.name, ...args);\n            };\n          }\n\n          handler(0.98, \"after emitting\", tap.name);\n        }\n      });\n      compiler.hooks.done.tap(\"ProgressPlugin\", () => {\n        handler(1, \"\");\n      });\n    }\n  }\n\n}\n\nProgressPlugin.defaultOptions = {\n  profile: false,\n  modulesCount: 500,\n  modules: true,\n  activeModules: true,\n  // TODO webpack 5 default this to true\n  entries: false\n};\nmodule.exports = ProgressPlugin;","map":{"version":3,"names":["validateOptions","require","schema","createDefaultHandler","profile","logger","lastState","lastStateTime","defaultHandler","percentage","msg","args","status","Math","floor","state","replace","Date","now","diff","stateMsg","warn","info","log","debug","ProgressPlugin","constructor","options","handler","Object","assign","defaultOptions","modulesCount","showEntries","entries","showModules","modules","showActiveModules","activeModules","apply","compiler","getInfrastructureLogger","compilers","states","Array","length","forEach","idx","p","map","reduce","a","b","lastModulesCount","lastEntriesCount","moduleCount","entriesCount","doneModules","doneEntries","Set","lastActiveModule","update","percentByModules","max","percentByEntries","items","push","size","moduleAdd","module","ident","identifier","add","entryAdd","entry","name","moduleDone","delete","m","entryDone","hooks","compilation","tap","isChild","buildModule","failedModule","succeedModule","addEntry","failedEntry","succeedEntry","finishModules","seal","beforeChunks","afterChunks","optimizeDependenciesBasic","optimizeDependencies","optimizeDependenciesAdvanced","afterOptimizeDependencies","optimize","optimizeModulesBasic","optimizeModules","optimizeModulesAdvanced","afterOptimizeModules","optimizeChunksBasic","optimizeChunks","optimizeChunksAdvanced","afterOptimizeChunks","optimizeTree","afterOptimizeTree","optimizeChunkModulesBasic","optimizeChunkModules","optimizeChunkModulesAdvanced","afterOptimizeChunkModules","reviveModules","optimizeModuleOrder","advancedOptimizeModuleOrder","beforeModuleIds","moduleIds","optimizeModuleIds","afterOptimizeModuleIds","reviveChunks","optimizeChunkOrder","beforeChunkIds","optimizeChunkIds","afterOptimizeChunkIds","recordModules","recordChunks","beforeHash","afterHash","recordHash","beforeModuleAssets","beforeChunkAssets","additionalChunkAssets","record","additionalAssets","optimizeChunkAssets","afterOptimizeChunkAssets","optimizeAssets","afterOptimizeAssets","afterSeal","numberOfHooks","keys","title","intercept","context","call","reportProgress","emit","afterEmit","done","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/ProgressPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/ProgressPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginArgument} ProgressPluginArgument */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginOptions} ProgressPluginOptions */\n\nconst createDefaultHandler = (profile, logger) => {\n\tlet lastState;\n\tlet lastStateTime;\n\n\tconst defaultHandler = (percentage, msg, ...args) => {\n\t\tlogger.status(`${Math.floor(percentage * 100)}%`, msg, ...args);\n\t\tif (profile) {\n\t\t\tlet state = msg;\n\t\t\tstate = state.replace(/^\\d+\\/\\d+\\s+/, \"\");\n\t\t\tif (percentage === 0) {\n\t\t\t\tlastState = null;\n\t\t\t\tlastStateTime = Date.now();\n\t\t\t} else if (state !== lastState || percentage === 1) {\n\t\t\t\tconst now = Date.now();\n\t\t\t\tif (lastState) {\n\t\t\t\t\tconst diff = now - lastStateTime;\n\t\t\t\t\tconst stateMsg = `${diff}ms ${lastState}`;\n\t\t\t\t\tif (diff > 1000) {\n\t\t\t\t\t\tlogger.warn(stateMsg);\n\t\t\t\t\t} else if (diff > 10) {\n\t\t\t\t\t\tlogger.info(stateMsg);\n\t\t\t\t\t} else if (diff > 0) {\n\t\t\t\t\t\tlogger.log(stateMsg);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.debug(stateMsg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlastState = state;\n\t\t\t\tlastStateTime = now;\n\t\t\t}\n\t\t}\n\t\tif (percentage === 1) logger.status();\n\t};\n\n\treturn defaultHandler;\n};\n\nclass ProgressPlugin {\n\t/**\n\t * @param {ProgressPluginArgument} options options\n\t */\n\tconstructor(options) {\n\t\tif (typeof options === \"function\") {\n\t\t\toptions = {\n\t\t\t\thandler: options\n\t\t\t};\n\t\t}\n\n\t\toptions = options || {};\n\t\tvalidateOptions(schema, options, \"Progress Plugin\");\n\t\toptions = Object.assign({}, ProgressPlugin.defaultOptions, options);\n\n\t\tthis.profile = options.profile;\n\t\tthis.handler = options.handler;\n\t\tthis.modulesCount = options.modulesCount;\n\t\tthis.showEntries = options.entries;\n\t\tthis.showModules = options.modules;\n\t\tthis.showActiveModules = options.activeModules;\n\t}\n\n\tapply(compiler) {\n\t\tconst { modulesCount } = this;\n\t\tconst handler =\n\t\t\tthis.handler ||\n\t\t\tcreateDefaultHandler(\n\t\t\t\tthis.profile,\n\t\t\t\tcompiler.getInfrastructureLogger(\"webpack.Progress\")\n\t\t\t);\n\t\tconst showEntries = this.showEntries;\n\t\tconst showModules = this.showModules;\n\t\tconst showActiveModules = this.showActiveModules;\n\t\tif (compiler.compilers) {\n\t\t\tconst states = new Array(compiler.compilers.length);\n\t\t\tcompiler.compilers.forEach((compiler, idx) => {\n\t\t\t\tnew ProgressPlugin((p, msg, ...args) => {\n\t\t\t\t\tstates[idx] = [p, msg, ...args];\n\t\t\t\t\thandler(\n\t\t\t\t\t\tstates\n\t\t\t\t\t\t\t.map(state => (state && state[0]) || 0)\n\t\t\t\t\t\t\t.reduce((a, b) => a + b) / states.length,\n\t\t\t\t\t\t`[${idx}] ${msg}`,\n\t\t\t\t\t\t...args\n\t\t\t\t\t);\n\t\t\t\t}).apply(compiler);\n\t\t\t});\n\t\t} else {\n\t\t\tlet lastModulesCount = 0;\n\t\t\tlet lastEntriesCount = 0;\n\t\t\tlet moduleCount = modulesCount;\n\t\t\tlet entriesCount = 1;\n\t\t\tlet doneModules = 0;\n\t\t\tlet doneEntries = 0;\n\t\t\tconst activeModules = new Set();\n\t\t\tlet lastActiveModule = \"\";\n\n\t\t\tconst update = () => {\n\t\t\t\tconst percentByModules =\n\t\t\t\t\tdoneModules / Math.max(lastModulesCount, moduleCount);\n\t\t\t\tconst percentByEntries =\n\t\t\t\t\tdoneEntries / Math.max(lastEntriesCount, entriesCount);\n\n\t\t\t\tconst items = [\n\t\t\t\t\t0.1 + Math.max(percentByModules, percentByEntries) * 0.6,\n\t\t\t\t\t\"building\"\n\t\t\t\t];\n\t\t\t\tif (showEntries) {\n\t\t\t\t\titems.push(`${doneEntries}/${entriesCount} entries`);\n\t\t\t\t}\n\t\t\t\tif (showModules) {\n\t\t\t\t\titems.push(`${doneModules}/${moduleCount} modules`);\n\t\t\t\t}\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\titems.push(`${activeModules.size} active`);\n\t\t\t\t\titems.push(lastActiveModule);\n\t\t\t\t}\n\t\t\t\thandler(...items);\n\t\t\t};\n\n\t\t\tconst moduleAdd = module => {\n\t\t\t\tmoduleCount++;\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\tconst ident = module.identifier();\n\t\t\t\t\tif (ident) {\n\t\t\t\t\t\tactiveModules.add(ident);\n\t\t\t\t\t\tlastActiveModule = ident;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tconst entryAdd = (entry, name) => {\n\t\t\t\tentriesCount++;\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tconst moduleDone = module => {\n\t\t\t\tdoneModules++;\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\tconst ident = module.identifier();\n\t\t\t\t\tif (ident) {\n\t\t\t\t\t\tactiveModules.delete(ident);\n\t\t\t\t\t\tif (lastActiveModule === ident) {\n\t\t\t\t\t\t\tlastActiveModule = \"\";\n\t\t\t\t\t\t\tfor (const m of activeModules) {\n\t\t\t\t\t\t\t\tlastActiveModule = m;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tconst entryDone = (entry, name) => {\n\t\t\t\tdoneEntries++;\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tcompiler.hooks.compilation.tap(\"ProgressPlugin\", compilation => {\n\t\t\t\tif (compilation.compiler.isChild()) return;\n\t\t\t\tlastModulesCount = moduleCount;\n\t\t\t\tlastEntriesCount = entriesCount;\n\t\t\t\tmoduleCount = entriesCount = 0;\n\t\t\t\tdoneModules = doneEntries = 0;\n\t\t\t\thandler(0, \"compiling\");\n\n\t\t\t\tcompilation.hooks.buildModule.tap(\"ProgressPlugin\", moduleAdd);\n\t\t\t\tcompilation.hooks.failedModule.tap(\"ProgressPlugin\", moduleDone);\n\t\t\t\tcompilation.hooks.succeedModule.tap(\"ProgressPlugin\", moduleDone);\n\n\t\t\t\tcompilation.hooks.addEntry.tap(\"ProgressPlugin\", entryAdd);\n\t\t\t\tcompilation.hooks.failedEntry.tap(\"ProgressPlugin\", entryDone);\n\t\t\t\tcompilation.hooks.succeedEntry.tap(\"ProgressPlugin\", entryDone);\n\n\t\t\t\tconst hooks = {\n\t\t\t\t\tfinishModules: \"finish module graph\",\n\t\t\t\t\tseal: \"sealing\",\n\t\t\t\t\tbeforeChunks: \"chunk graph\",\n\t\t\t\t\tafterChunks: \"after chunk graph\",\n\t\t\t\t\toptimizeDependenciesBasic: \"basic dependencies optimization\",\n\t\t\t\t\toptimizeDependencies: \"dependencies optimization\",\n\t\t\t\t\toptimizeDependenciesAdvanced: \"advanced dependencies optimization\",\n\t\t\t\t\tafterOptimizeDependencies: \"after dependencies optimization\",\n\t\t\t\t\toptimize: \"optimizing\",\n\t\t\t\t\toptimizeModulesBasic: \"basic module optimization\",\n\t\t\t\t\toptimizeModules: \"module optimization\",\n\t\t\t\t\toptimizeModulesAdvanced: \"advanced module optimization\",\n\t\t\t\t\tafterOptimizeModules: \"after module optimization\",\n\t\t\t\t\toptimizeChunksBasic: \"basic chunk optimization\",\n\t\t\t\t\toptimizeChunks: \"chunk optimization\",\n\t\t\t\t\toptimizeChunksAdvanced: \"advanced chunk optimization\",\n\t\t\t\t\tafterOptimizeChunks: \"after chunk optimization\",\n\t\t\t\t\toptimizeTree: \"module and chunk tree optimization\",\n\t\t\t\t\tafterOptimizeTree: \"after module and chunk tree optimization\",\n\t\t\t\t\toptimizeChunkModulesBasic: \"basic chunk modules optimization\",\n\t\t\t\t\toptimizeChunkModules: \"chunk modules optimization\",\n\t\t\t\t\toptimizeChunkModulesAdvanced: \"advanced chunk modules optimization\",\n\t\t\t\t\tafterOptimizeChunkModules: \"after chunk modules optimization\",\n\t\t\t\t\treviveModules: \"module reviving\",\n\t\t\t\t\toptimizeModuleOrder: \"module order optimization\",\n\t\t\t\t\tadvancedOptimizeModuleOrder: \"advanced module order optimization\",\n\t\t\t\t\tbeforeModuleIds: \"before module ids\",\n\t\t\t\t\tmoduleIds: \"module ids\",\n\t\t\t\t\toptimizeModuleIds: \"module id optimization\",\n\t\t\t\t\tafterOptimizeModuleIds: \"module id optimization\",\n\t\t\t\t\treviveChunks: \"chunk reviving\",\n\t\t\t\t\toptimizeChunkOrder: \"chunk order optimization\",\n\t\t\t\t\tbeforeChunkIds: \"before chunk ids\",\n\t\t\t\t\toptimizeChunkIds: \"chunk id optimization\",\n\t\t\t\t\tafterOptimizeChunkIds: \"after chunk id optimization\",\n\t\t\t\t\trecordModules: \"record modules\",\n\t\t\t\t\trecordChunks: \"record chunks\",\n\t\t\t\t\tbeforeHash: \"hashing\",\n\t\t\t\t\tafterHash: \"after hashing\",\n\t\t\t\t\trecordHash: \"record hash\",\n\t\t\t\t\tbeforeModuleAssets: \"module assets processing\",\n\t\t\t\t\tbeforeChunkAssets: \"chunk assets processing\",\n\t\t\t\t\tadditionalChunkAssets: \"additional chunk assets processing\",\n\t\t\t\t\trecord: \"recording\",\n\t\t\t\t\tadditionalAssets: \"additional asset processing\",\n\t\t\t\t\toptimizeChunkAssets: \"chunk asset optimization\",\n\t\t\t\t\tafterOptimizeChunkAssets: \"after chunk asset optimization\",\n\t\t\t\t\toptimizeAssets: \"asset optimization\",\n\t\t\t\t\tafterOptimizeAssets: \"after asset optimization\",\n\t\t\t\t\tafterSeal: \"after seal\"\n\t\t\t\t};\n\t\t\t\tconst numberOfHooks = Object.keys(hooks).length;\n\t\t\t\tObject.keys(hooks).forEach((name, idx) => {\n\t\t\t\t\tconst title = hooks[name];\n\t\t\t\t\tconst percentage = (idx / numberOfHooks) * 0.25 + 0.7;\n\t\t\t\t\tcompilation.hooks[name].intercept({\n\t\t\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\t\t\tcontext: true,\n\t\t\t\t\t\tcall: () => {\n\t\t\t\t\t\t\thandler(percentage, title);\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttap: (context, tap) => {\n\t\t\t\t\t\t\tif (context) {\n\t\t\t\t\t\t\t\t// p is percentage from 0 to 1\n\t\t\t\t\t\t\t\t// args is any number of messages in a hierarchical matter\n\t\t\t\t\t\t\t\tcontext.reportProgress = (p, ...args) => {\n\t\t\t\t\t\t\t\t\thandler(percentage, title, tap.name, ...args);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thandler(percentage, title, tap.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t\tcompiler.hooks.emit.intercept({\n\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\tcontext: true,\n\t\t\t\tcall: () => {\n\t\t\t\t\thandler(0.95, \"emitting\");\n\t\t\t\t},\n\t\t\t\ttap: (context, tap) => {\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tcontext.reportProgress = (p, ...args) => {\n\t\t\t\t\t\t\thandler(0.95, \"emitting\", tap.name, ...args);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\thandler(0.95, \"emitting\", tap.name);\n\t\t\t\t}\n\t\t\t});\n\t\t\tcompiler.hooks.afterEmit.intercept({\n\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\tcontext: true,\n\t\t\t\tcall: () => {\n\t\t\t\t\thandler(0.98, \"after emitting\");\n\t\t\t\t},\n\t\t\t\ttap: (context, tap) => {\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tcontext.reportProgress = (p, ...args) => {\n\t\t\t\t\t\t\thandler(0.98, \"after emitting\", tap.name, ...args);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\thandler(0.98, \"after emitting\", tap.name);\n\t\t\t\t}\n\t\t\t});\n\t\t\tcompiler.hooks.done.tap(\"ProgressPlugin\", () => {\n\t\t\t\thandler(1, \"\");\n\t\t\t});\n\t\t}\n\t}\n}\n\nProgressPlugin.defaultOptions = {\n\tprofile: false,\n\tmodulesCount: 500,\n\tmodules: true,\n\tactiveModules: true,\n\t// TODO webpack 5 default this to true\n\tentries: false\n};\n\nmodule.exports = ProgressPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}