{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*eslint no-bitwise:0,quotes:0,global-strict:0*/\nvar charToIntMap = {};\nvar intToCharMap = {};\n'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('').forEach(function (ch, index) {\n  charToIntMap[ch] = index;\n  intToCharMap[index] = ch;\n});\nvar base64 = {};\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\n\nbase64.encode = function base64_encode(aNumber) {\n  if (aNumber in intToCharMap) {\n    return intToCharMap[aNumber];\n  }\n\n  throw new TypeError(\"Must be between 0 and 63: \" + aNumber);\n};\n/**\n * Decode a single base 64 digit to an integer.\n */\n\n\nbase64.decode = function base64_decode(aChar) {\n  if (aChar in charToIntMap) {\n    return charToIntMap[aChar];\n  }\n\n  throw new TypeError(\"Not a valid base 64 digit: \" + aChar);\n}; // A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\n\nvar VLQ_BASE_SHIFT = 5; // binary: 100000\n\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT; // binary: 011111\n\nvar VLQ_BASE_MASK = VLQ_BASE - 1; // binary: 100000\n\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\n\nfunction toVLQSigned(aValue) {\n  return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;\n}\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\n\n\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative ? -shifted : shifted;\n}\n/**\n * Returns the base 64 VLQ encoded value.\n */\n\n\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\n\n\nexports.decode = function base64VLQ_decode(aStr, aOutParam) {\n  var i = 0;\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (i >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charAt(i++));\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aStr.slice(i);\n};","map":{"version":3,"names":["charToIntMap","intToCharMap","split","forEach","ch","index","base64","encode","base64_encode","aNumber","TypeError","decode","base64_decode","aChar","VLQ_BASE_SHIFT","VLQ_BASE","VLQ_BASE_MASK","VLQ_CONTINUATION_BIT","toVLQSigned","aValue","fromVLQSigned","isNegative","shifted","exports","base64VLQ_encode","encoded","digit","vlq","base64VLQ_decode","aStr","aOutParam","i","strLen","length","result","shift","continuation","Error","charAt","value","rest","slice"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/source-list-map/lib/base64-vlq.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*eslint no-bitwise:0,quotes:0,global-strict:0*/\n\nvar charToIntMap = {};\nvar intToCharMap = {};\n\n'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  .split('')\n  .forEach(function (ch, index) {\n    charToIntMap[ch] = index;\n    intToCharMap[index] = ch;\n  });\n\nvar base64 = {};\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nbase64.encode = function base64_encode(aNumber) {\n  if (aNumber in intToCharMap) {\n    return intToCharMap[aNumber];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + aNumber);\n};\n\n/**\n * Decode a single base 64 digit to an integer.\n */\nbase64.decode = function base64_decode(aChar) {\n  if (aChar in charToIntMap) {\n    return charToIntMap[aChar];\n  }\n  throw new TypeError(\"Not a valid base 64 digit: \" + aChar);\n};\n\n\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aOutParam) {\n  var i = 0;\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (i >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n    digit = base64.decode(aStr.charAt(i++));\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aStr.slice(i);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}