{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nvar util = require('./util');\n\nvar binarySearch = require('./binary-search');\n\nvar ArraySet = require('./array-set').ArraySet;\n\nvar base64VLQ = require('./base64-vlq');\n\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\n\nSourceMapConsumer.fromSourceMap = function (aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n};\n/**\n * The version of the source mapping spec that we are consuming.\n */\n\n\nSourceMapConsumer.prototype._version = 3; // `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n  var c = aStr.charAt(index);\n  return c === \";\" || c === \",\";\n};\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\n\n\nSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  throw new Error(\"Subclasses must implement _parseMappings\");\n};\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\n\nSourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n  var context = aContext || null;\n  var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n  var mappings;\n\n  switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n  }\n\n  var sourceRoot = this.sourceRoot;\n  mappings.map(function (mapping) {\n    var source = mapping.source === null ? null : this._sources.at(mapping.source);\n    source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n    return {\n      source: source,\n      generatedLine: mapping.generatedLine,\n      generatedColumn: mapping.generatedColumn,\n      originalLine: mapping.originalLine,\n      originalColumn: mapping.originalColumn,\n      name: mapping.name === null ? null : this._names.at(mapping.name)\n    };\n  }, this).forEach(aCallback, context);\n};\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */\n\n\nSourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n  var line = util.getArg(aArgs, 'line'); // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n  // returns the index of the closest mapping less than the needle. By\n  // setting needle.originalColumn to 0, we thus find the last mapping for\n  // the given line, provided such a mapping exists.\n\n  var needle = {\n    source: util.getArg(aArgs, 'source'),\n    originalLine: line,\n    originalColumn: util.getArg(aArgs, 'column', 0)\n  };\n  needle.source = this._findSourceIndex(needle.source);\n\n  if (needle.source < 0) {\n    return [];\n  }\n\n  var mappings = [];\n\n  var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);\n\n  if (index >= 0) {\n    var mapping = this._originalMappings[index];\n\n    if (aArgs.column === undefined) {\n      var originalLine = mapping.originalLine; // Iterate until either we run out of mappings, or we run into\n      // a mapping for a different line than the one we found. Since\n      // mappings are sorted, this is guaranteed to find all mappings for\n      // the line we found.\n\n      while (mapping && mapping.originalLine === originalLine) {\n        mappings.push({\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        });\n        mapping = this._originalMappings[++index];\n      }\n    } else {\n      var originalColumn = mapping.originalColumn; // Iterate until either we run out of mappings, or we run into\n      // a mapping for a different line than the one we were searching for.\n      // Since mappings are sorted, this is guaranteed to find all mappings for\n      // the line we are searching for.\n\n      while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n        mappings.push({\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        });\n        mapping = this._originalMappings[++index];\n      }\n    }\n  }\n\n  return mappings;\n};\n\nexports.SourceMapConsumer = SourceMapConsumer;\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\n\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources'); // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null); // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n\n  sources = sources.map(String) // Some source maps produce relative source paths like \"./foo.js\" instead of\n  // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n  // See bugzil.la/1090768.\n  .map(util.normalize) // Always ensure that absolute sources are internally stored relative to\n  // the source root, if the source root is absolute. Not doing this would\n  // be particularly problematic when the source root is a prefix of the\n  // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n  .map(function (source) {\n    return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n  }); // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */\n\nBasicSourceMapConsumer.prototype._findSourceIndex = function (aSource) {\n  var relativeSource = aSource;\n\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  } // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n\n\n  var i;\n\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */\n\n\nBasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n  var smc = Object.create(BasicSourceMapConsumer.prototype);\n  var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n  var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n  smc.sourceRoot = aSourceMap._sourceRoot;\n  smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);\n  smc.file = aSourceMap._file;\n  smc._sourceMapURL = aSourceMapURL;\n  smc._absoluteSources = smc._sources.toArray().map(function (s) {\n    return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n  }); // Because we are modifying the entries (by converting string sources and\n  // names to indices into the sources and names ArraySets), we have to make\n  // a copy of the entry or else bad things happen. Shared mutable state\n  // strikes again! See github issue #191.\n\n  var generatedMappings = aSourceMap._mappings.toArray().slice();\n\n  var destGeneratedMappings = smc.__generatedMappings = [];\n  var destOriginalMappings = smc.__originalMappings = [];\n\n  for (var i = 0, length = generatedMappings.length; i < length; i++) {\n    var srcMapping = generatedMappings[i];\n    var destMapping = new Mapping();\n    destMapping.generatedLine = srcMapping.generatedLine;\n    destMapping.generatedColumn = srcMapping.generatedColumn;\n\n    if (srcMapping.source) {\n      destMapping.source = sources.indexOf(srcMapping.source);\n      destMapping.originalLine = srcMapping.originalLine;\n      destMapping.originalColumn = srcMapping.originalColumn;\n\n      if (srcMapping.name) {\n        destMapping.name = names.indexOf(srcMapping.name);\n      }\n\n      destOriginalMappings.push(destMapping);\n    }\n\n    destGeneratedMappings.push(destMapping);\n  }\n\n  quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n  return smc;\n};\n/**\n * The version of the source mapping spec that we are consuming.\n */\n\n\nBasicSourceMapConsumer.prototype._version = 3;\n/**\n * The list of original sources.\n */\n\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\n\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\n\n\nBasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  var generatedLine = 1;\n  var previousGeneratedColumn = 0;\n  var previousOriginalLine = 0;\n  var previousOriginalColumn = 0;\n  var previousSource = 0;\n  var previousName = 0;\n  var length = aStr.length;\n  var index = 0;\n  var cachedSegments = {};\n  var temp = {};\n  var originalMappings = [];\n  var generatedMappings = [];\n  var mapping, str, segment, end, value;\n\n  while (index < length) {\n    if (aStr.charAt(index) === ';') {\n      generatedLine++;\n      index++;\n      previousGeneratedColumn = 0;\n    } else if (aStr.charAt(index) === ',') {\n      index++;\n    } else {\n      mapping = new Mapping();\n      mapping.generatedLine = generatedLine; // Because each offset is encoded relative to the previous one,\n      // many segments often have the same encoding. We can exploit this\n      // fact by caching the parsed variable length fields of each segment,\n      // allowing us to avoid a second parse if we encounter the same\n      // segment again.\n\n      for (end = index; end < length; end++) {\n        if (this._charIsMappingSeparator(aStr, end)) {\n          break;\n        }\n      }\n\n      str = aStr.slice(index, end);\n      segment = cachedSegments[str];\n\n      if (segment) {\n        index += str.length;\n      } else {\n        segment = [];\n\n        while (index < end) {\n          base64VLQ.decode(aStr, index, temp);\n          value = temp.value;\n          index = temp.rest;\n          segment.push(value);\n        }\n\n        if (segment.length === 2) {\n          throw new Error('Found a source, but no line and column');\n        }\n\n        if (segment.length === 3) {\n          throw new Error('Found a source and line, but no column');\n        }\n\n        cachedSegments[str] = segment;\n      } // Generated column.\n\n\n      mapping.generatedColumn = previousGeneratedColumn + segment[0];\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (segment.length > 1) {\n        // Original source.\n        mapping.source = previousSource + segment[1];\n        previousSource += segment[1]; // Original line.\n\n        mapping.originalLine = previousOriginalLine + segment[2];\n        previousOriginalLine = mapping.originalLine; // Lines are stored 0-based\n\n        mapping.originalLine += 1; // Original column.\n\n        mapping.originalColumn = previousOriginalColumn + segment[3];\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (segment.length > 4) {\n          // Original name.\n          mapping.name = previousName + segment[4];\n          previousName += segment[4];\n        }\n      }\n\n      generatedMappings.push(mapping);\n\n      if (typeof mapping.originalLine === 'number') {\n        originalMappings.push(mapping);\n      }\n    }\n  }\n\n  quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n  this.__generatedMappings = generatedMappings;\n  quickSort(originalMappings, util.compareByOriginalPositions);\n  this.__originalMappings = originalMappings;\n};\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\n\n\nBasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n  // To return the position we are searching for, we must first find the\n  // mapping for the given position and then return the opposite position it\n  // points to. Because the mappings are sorted, we can use binary search to\n  // find the best mapping.\n  if (aNeedle[aLineName] <= 0) {\n    throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);\n  }\n\n  if (aNeedle[aColumnName] < 0) {\n    throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);\n  }\n\n  return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n};\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\n\n\nBasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {\n  for (var index = 0; index < this._generatedMappings.length; ++index) {\n    var mapping = this._generatedMappings[index]; // Mappings do not contain a field for the last generated columnt. We\n    // can come up with an optimistic estimate, however, by assuming that\n    // mappings are contiguous (i.e. given two consecutive mappings, the\n    // first mapping ends where the second one starts).\n\n    if (index + 1 < this._generatedMappings.length) {\n      var nextMapping = this._generatedMappings[index + 1];\n\n      if (mapping.generatedLine === nextMapping.generatedLine) {\n        mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n        continue;\n      }\n    } // The last mapping for each line spans the entire line.\n\n\n    mapping.lastGeneratedColumn = Infinity;\n  }\n};\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\n\n\nBasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {\n  var needle = {\n    generatedLine: util.getArg(aArgs, 'line'),\n    generatedColumn: util.getArg(aArgs, 'column')\n  };\n\n  var index = this._findMapping(needle, this._generatedMappings, \"generatedLine\", \"generatedColumn\", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n\n  if (index >= 0) {\n    var mapping = this._generatedMappings[index];\n\n    if (mapping.generatedLine === needle.generatedLine) {\n      var source = util.getArg(mapping, 'source', null);\n\n      if (source !== null) {\n        source = this._sources.at(source);\n        source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n      }\n\n      var name = util.getArg(mapping, 'name', null);\n\n      if (name !== null) {\n        name = this._names.at(name);\n      }\n\n      return {\n        source: source,\n        line: util.getArg(mapping, 'originalLine', null),\n        column: util.getArg(mapping, 'originalColumn', null),\n        name: name\n      };\n    }\n  }\n\n  return {\n    source: null,\n    line: null,\n    column: null,\n    name: null\n  };\n};\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\n\n\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {\n  if (!this.sourcesContent) {\n    return false;\n  }\n\n  return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {\n    return sc == null;\n  });\n};\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\n\n\nBasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n  if (!this.sourcesContent) {\n    return null;\n  }\n\n  var index = this._findSourceIndex(aSource);\n\n  if (index >= 0) {\n    return this.sourcesContent[index];\n  }\n\n  var relativeSource = aSource;\n\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  var url;\n\n  if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n    // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n    // many users. We can help them out when they expect file:// URIs to\n    // behave like it would if they were running a local HTTP server. See\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n    var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n\n    if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n      return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n    }\n\n    if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n      return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n    }\n  } // This function is used recursively from\n  // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n  // don't want to throw if we can't find the source - we just want to\n  // return null, so we provide a flag to exit gracefully.\n\n\n  if (nullOnMissing) {\n    return null;\n  } else {\n    throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n  }\n};\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\n\n\nBasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {\n  var source = util.getArg(aArgs, 'source');\n  source = this._findSourceIndex(source);\n\n  if (source < 0) {\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  }\n\n  var needle = {\n    source: source,\n    originalLine: util.getArg(aArgs, 'line'),\n    originalColumn: util.getArg(aArgs, 'column')\n  };\n\n  var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n\n  if (index >= 0) {\n    var mapping = this._originalMappings[index];\n\n    if (mapping.source === needle.source) {\n      return {\n        line: util.getArg(mapping, 'generatedLine', null),\n        column: util.getArg(mapping, 'generatedColumn', null),\n        lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n      };\n    }\n  }\n\n  return {\n    line: null,\n    column: null,\n    lastColumn: null\n  };\n};\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\n\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n\n    lastOffset = offset;\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    };\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n/**\n * The version of the source mapping spec that we are consuming.\n */\n\nIndexedSourceMapConsumer.prototype._version = 3;\n/**\n * The list of original sources.\n */\n\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n\n    return sources;\n  }\n});\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\n\nIndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n  var needle = {\n    generatedLine: util.getArg(aArgs, 'line'),\n    generatedColumn: util.getArg(aArgs, 'column')\n  }; // Find the section containing the generated position we're trying to map\n  // to an original position.\n\n  var sectionIndex = binarySearch.search(needle, this._sections, function (needle, section) {\n    var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n\n    if (cmp) {\n      return cmp;\n    }\n\n    return needle.generatedColumn - section.generatedOffset.generatedColumn;\n  });\n  var section = this._sections[sectionIndex];\n\n  if (!section) {\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  }\n\n  return section.consumer.originalPositionFor({\n    line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n    column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n    bias: aArgs.bias\n  });\n};\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\n\n\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n  return this._sections.every(function (s) {\n    return s.consumer.hasContentsOfAllSources();\n  });\n};\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\n\n\nIndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n    var content = section.consumer.sourceContentFor(aSource, true);\n\n    if (content) {\n      return content;\n    }\n  }\n\n  if (nullOnMissing) {\n    return null;\n  } else {\n    throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n  }\n};\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\n\n\nIndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i]; // Only consider this section if the requested source is in the list of\n    // sources of the consumer.\n\n    if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n      continue;\n    }\n\n    var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n\n    if (generatedPosition) {\n      var ret = {\n        line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n        column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n      };\n      return ret;\n    }\n  }\n\n  return {\n    line: null,\n    column: null\n  };\n};\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\n\n\nIndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  this.__generatedMappings = [];\n  this.__originalMappings = [];\n\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n    var sectionMappings = section.consumer._generatedMappings;\n\n    for (var j = 0; j < sectionMappings.length; j++) {\n      var mapping = sectionMappings[j];\n\n      var source = section.consumer._sources.at(mapping.source);\n\n      source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n\n      this._sources.add(source);\n\n      source = this._sources.indexOf(source);\n      var name = null;\n\n      if (mapping.name) {\n        name = section.consumer._names.at(mapping.name);\n\n        this._names.add(name);\n\n        name = this._names.indexOf(name);\n      } // The mappings coming from the consumer for the section have\n      // generated positions relative to the start of the section, so we\n      // need to offset them to be relative to the start of the concatenated\n      // generated file.\n\n\n      var adjustedMapping = {\n        source: source,\n        generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n        generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: name\n      };\n\n      this.__generatedMappings.push(adjustedMapping);\n\n      if (typeof adjustedMapping.originalLine === 'number') {\n        this.__originalMappings.push(adjustedMapping);\n      }\n    }\n  }\n\n  quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n  quickSort(this.__originalMappings, util.compareByOriginalPositions);\n};\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;","map":{"version":3,"names":["util","require","binarySearch","ArraySet","base64VLQ","quickSort","SourceMapConsumer","aSourceMap","aSourceMapURL","sourceMap","parseSourceMapInput","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","fromSourceMap","prototype","_version","__generatedMappings","Object","defineProperty","configurable","enumerable","get","_parseMappings","_mappings","sourceRoot","__originalMappings","_charIsMappingSeparator","SourceMapConsumer_charIsMappingSeparator","aStr","index","c","charAt","SourceMapConsumer_parseMappings","aSourceRoot","Error","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","eachMapping","SourceMapConsumer_eachMapping","aCallback","aContext","aOrder","context","order","mappings","_generatedMappings","_originalMappings","map","mapping","source","_sources","at","computeSourceURL","_sourceMapURL","generatedLine","generatedColumn","originalLine","originalColumn","name","_names","forEach","allGeneratedPositionsFor","SourceMapConsumer_allGeneratedPositionsFor","aArgs","line","getArg","needle","_findSourceIndex","_findMapping","compareByOriginalPositions","column","undefined","push","lastColumn","exports","version","sources","names","sourcesContent","file","normalize","String","isAbsolute","relative","fromArray","_absoluteSources","toArray","s","create","consumer","aSource","relativeSource","has","indexOf","i","length","SourceMapConsumer_fromSourceMap","smc","_sourceRoot","_generateSourcesContent","_file","generatedMappings","slice","destGeneratedMappings","destOriginalMappings","srcMapping","destMapping","Mapping","previousGeneratedColumn","previousOriginalLine","previousOriginalColumn","previousSource","previousName","cachedSegments","temp","originalMappings","str","segment","end","value","decode","rest","compareByGeneratedPositionsDeflated","SourceMapConsumer_findMapping","aNeedle","aMappings","aLineName","aColumnName","aComparator","aBias","TypeError","search","computeColumnSpans","SourceMapConsumer_computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","originalPositionFor","SourceMapConsumer_originalPositionFor","hasContentsOfAllSources","BasicSourceMapConsumer_hasContentsOfAllSources","size","some","sc","sourceContentFor","SourceMapConsumer_sourceContentFor","nullOnMissing","url","urlParse","fileUriAbsPath","replace","scheme","path","generatedPositionFor","SourceMapConsumer_generatedPositionFor","lastOffset","_sections","offset","offsetLine","offsetColumn","generatedOffset","constructor","j","IndexedSourceMapConsumer_originalPositionFor","sectionIndex","section","cmp","bias","IndexedSourceMapConsumer_hasContentsOfAllSources","every","IndexedSourceMapConsumer_sourceContentFor","content","IndexedSourceMapConsumer_generatedPositionFor","generatedPosition","ret","IndexedSourceMapConsumer_parseMappings","sectionMappings","add","adjustedMapping"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/source-map/lib/source-map-consumer.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */\nBasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  }\n\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n  var i;\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n    smc._sourceMapURL = aSourceMapURL;\n    smc._absoluteSources = smc._sources.toArray().map(function (s) {\n      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n    });\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    var index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    var relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = null;\n        if (mapping.name) {\n          name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n"],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAA1B;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBE,QAAtC;;AACA,IAAIC,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAvB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,cAAD,CAAP,CAAwBI,SAAxC;;AAEA,SAASC,iBAAT,CAA2BC,UAA3B,EAAuCC,aAAvC,EAAsD;EACpD,IAAIC,SAAS,GAAGF,UAAhB;;EACA,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;IAClCE,SAAS,GAAGT,IAAI,CAACU,mBAAL,CAAyBH,UAAzB,CAAZ;EACD;;EAED,OAAOE,SAAS,CAACE,QAAV,IAAsB,IAAtB,GACH,IAAIC,wBAAJ,CAA6BH,SAA7B,EAAwCD,aAAxC,CADG,GAEH,IAAIK,sBAAJ,CAA2BJ,SAA3B,EAAsCD,aAAtC,CAFJ;AAGD;;AAEDF,iBAAiB,CAACQ,aAAlB,GAAkC,UAASP,UAAT,EAAqBC,aAArB,EAAoC;EACpE,OAAOK,sBAAsB,CAACC,aAAvB,CAAqCP,UAArC,EAAiDC,aAAjD,CAAP;AACD,CAFD;AAIA;AACA;AACA;;;AACAF,iBAAiB,CAACS,SAAlB,CAA4BC,QAA5B,GAAuC,CAAvC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAV,iBAAiB,CAACS,SAAlB,CAA4BE,mBAA5B,GAAkD,IAAlD;AACAC,MAAM,CAACC,cAAP,CAAsBb,iBAAiB,CAACS,SAAxC,EAAmD,oBAAnD,EAAyE;EACvEK,YAAY,EAAE,IADyD;EAEvEC,UAAU,EAAE,IAF2D;EAGvEC,GAAG,EAAE,YAAY;IACf,IAAI,CAAC,KAAKL,mBAAV,EAA+B;MAC7B,KAAKM,cAAL,CAAoB,KAAKC,SAAzB,EAAoC,KAAKC,UAAzC;IACD;;IAED,OAAO,KAAKR,mBAAZ;EACD;AATsE,CAAzE;AAYAX,iBAAiB,CAACS,SAAlB,CAA4BW,kBAA5B,GAAiD,IAAjD;AACAR,MAAM,CAACC,cAAP,CAAsBb,iBAAiB,CAACS,SAAxC,EAAmD,mBAAnD,EAAwE;EACtEK,YAAY,EAAE,IADwD;EAEtEC,UAAU,EAAE,IAF0D;EAGtEC,GAAG,EAAE,YAAY;IACf,IAAI,CAAC,KAAKI,kBAAV,EAA8B;MAC5B,KAAKH,cAAL,CAAoB,KAAKC,SAAzB,EAAoC,KAAKC,UAAzC;IACD;;IAED,OAAO,KAAKC,kBAAZ;EACD;AATqE,CAAxE;;AAYApB,iBAAiB,CAACS,SAAlB,CAA4BY,uBAA5B,GACE,SAASC,wCAAT,CAAkDC,IAAlD,EAAwDC,KAAxD,EAA+D;EAC7D,IAAIC,CAAC,GAAGF,IAAI,CAACG,MAAL,CAAYF,KAAZ,CAAR;EACA,OAAOC,CAAC,KAAK,GAAN,IAAaA,CAAC,KAAK,GAA1B;AACD,CAJH;AAMA;AACA;AACA;AACA;AACA;;;AACAzB,iBAAiB,CAACS,SAAlB,CAA4BQ,cAA5B,GACE,SAASU,+BAAT,CAAyCJ,IAAzC,EAA+CK,WAA/C,EAA4D;EAC1D,MAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD,CAHH;;AAKA7B,iBAAiB,CAAC8B,eAAlB,GAAoC,CAApC;AACA9B,iBAAiB,CAAC+B,cAAlB,GAAmC,CAAnC;AAEA/B,iBAAiB,CAACgC,oBAAlB,GAAyC,CAAzC;AACAhC,iBAAiB,CAACiC,iBAAlB,GAAsC,CAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAjC,iBAAiB,CAACS,SAAlB,CAA4ByB,WAA5B,GACE,SAASC,6BAAT,CAAuCC,SAAvC,EAAkDC,QAAlD,EAA4DC,MAA5D,EAAoE;EAClE,IAAIC,OAAO,GAAGF,QAAQ,IAAI,IAA1B;EACA,IAAIG,KAAK,GAAGF,MAAM,IAAItC,iBAAiB,CAAC8B,eAAxC;EAEA,IAAIW,QAAJ;;EACA,QAAQD,KAAR;IACA,KAAKxC,iBAAiB,CAAC8B,eAAvB;MACEW,QAAQ,GAAG,KAAKC,kBAAhB;MACA;;IACF,KAAK1C,iBAAiB,CAAC+B,cAAvB;MACEU,QAAQ,GAAG,KAAKE,iBAAhB;MACA;;IACF;MACE,MAAM,IAAId,KAAJ,CAAU,6BAAV,CAAN;EARF;;EAWA,IAAIV,UAAU,GAAG,KAAKA,UAAtB;EACAsB,QAAQ,CAACG,GAAT,CAAa,UAAUC,OAAV,EAAmB;IAC9B,IAAIC,MAAM,GAAGD,OAAO,CAACC,MAAR,KAAmB,IAAnB,GAA0B,IAA1B,GAAiC,KAAKC,QAAL,CAAcC,EAAd,CAAiBH,OAAO,CAACC,MAAzB,CAA9C;IACAA,MAAM,GAAGpD,IAAI,CAACuD,gBAAL,CAAsB9B,UAAtB,EAAkC2B,MAAlC,EAA0C,KAAKI,aAA/C,CAAT;IACA,OAAO;MACLJ,MAAM,EAAEA,MADH;MAELK,aAAa,EAAEN,OAAO,CAACM,aAFlB;MAGLC,eAAe,EAAEP,OAAO,CAACO,eAHpB;MAILC,YAAY,EAAER,OAAO,CAACQ,YAJjB;MAKLC,cAAc,EAAET,OAAO,CAACS,cALnB;MAMLC,IAAI,EAAEV,OAAO,CAACU,IAAR,KAAiB,IAAjB,GAAwB,IAAxB,GAA+B,KAAKC,MAAL,CAAYR,EAAZ,CAAeH,OAAO,CAACU,IAAvB;IANhC,CAAP;EAQD,CAXD,EAWG,IAXH,EAWSE,OAXT,CAWiBrB,SAXjB,EAW4BG,OAX5B;AAYD,CA9BH;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvC,iBAAiB,CAACS,SAAlB,CAA4BiD,wBAA5B,GACE,SAASC,0CAAT,CAAoDC,KAApD,EAA2D;EACzD,IAAIC,IAAI,GAAGnE,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,MAAnB,CAAX,CADyD,CAGzD;EACA;EACA;EACA;;EACA,IAAIG,MAAM,GAAG;IACXjB,MAAM,EAAEpD,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB,CADG;IAEXP,YAAY,EAAEQ,IAFH;IAGXP,cAAc,EAAE5D,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB,EAA6B,CAA7B;EAHL,CAAb;EAMAG,MAAM,CAACjB,MAAP,GAAgB,KAAKkB,gBAAL,CAAsBD,MAAM,CAACjB,MAA7B,CAAhB;;EACA,IAAIiB,MAAM,CAACjB,MAAP,GAAgB,CAApB,EAAuB;IACrB,OAAO,EAAP;EACD;;EAED,IAAIL,QAAQ,GAAG,EAAf;;EAEA,IAAIjB,KAAK,GAAG,KAAKyC,YAAL,CAAkBF,MAAlB,EACkB,KAAKpB,iBADvB,EAEkB,cAFlB,EAGkB,gBAHlB,EAIkBjD,IAAI,CAACwE,0BAJvB,EAKkBtE,YAAY,CAACqC,iBAL/B,CAAZ;;EAMA,IAAIT,KAAK,IAAI,CAAb,EAAgB;IACd,IAAIqB,OAAO,GAAG,KAAKF,iBAAL,CAAuBnB,KAAvB,CAAd;;IAEA,IAAIoC,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;MAC9B,IAAIf,YAAY,GAAGR,OAAO,CAACQ,YAA3B,CAD8B,CAG9B;MACA;MACA;MACA;;MACA,OAAOR,OAAO,IAAIA,OAAO,CAACQ,YAAR,KAAyBA,YAA3C,EAAyD;QACvDZ,QAAQ,CAAC4B,IAAT,CAAc;UACZR,IAAI,EAAEnE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,eAArB,EAAsC,IAAtC,CADM;UAEZsB,MAAM,EAAEzE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,iBAArB,EAAwC,IAAxC,CAFI;UAGZyB,UAAU,EAAE5E,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,qBAArB,EAA4C,IAA5C;QAHA,CAAd;QAMAA,OAAO,GAAG,KAAKF,iBAAL,CAAuB,EAAEnB,KAAzB,CAAV;MACD;IACF,CAhBD,MAgBO;MACL,IAAI8B,cAAc,GAAGT,OAAO,CAACS,cAA7B,CADK,CAGL;MACA;MACA;MACA;;MACA,OAAOT,OAAO,IACPA,OAAO,CAACQ,YAAR,KAAyBQ,IADzB,IAEAhB,OAAO,CAACS,cAAR,IAA0BA,cAFjC,EAEiD;QAC/Cb,QAAQ,CAAC4B,IAAT,CAAc;UACZR,IAAI,EAAEnE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,eAArB,EAAsC,IAAtC,CADM;UAEZsB,MAAM,EAAEzE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,iBAArB,EAAwC,IAAxC,CAFI;UAGZyB,UAAU,EAAE5E,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,qBAArB,EAA4C,IAA5C;QAHA,CAAd;QAMAA,OAAO,GAAG,KAAKF,iBAAL,CAAuB,EAAEnB,KAAzB,CAAV;MACD;IACF;EACF;;EAED,OAAOiB,QAAP;AACD,CApEH;;AAsEA8B,OAAO,CAACvE,iBAAR,GAA4BA,iBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASO,sBAAT,CAAgCN,UAAhC,EAA4CC,aAA5C,EAA2D;EACzD,IAAIC,SAAS,GAAGF,UAAhB;;EACA,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;IAClCE,SAAS,GAAGT,IAAI,CAACU,mBAAL,CAAyBH,UAAzB,CAAZ;EACD;;EAED,IAAIuE,OAAO,GAAG9E,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,SAAvB,CAAd;EACA,IAAIsE,OAAO,GAAG/E,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,SAAvB,CAAd,CAPyD,CAQzD;EACA;;EACA,IAAIuE,KAAK,GAAGhF,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,OAAvB,EAAgC,EAAhC,CAAZ;EACA,IAAIgB,UAAU,GAAGzB,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,YAAvB,EAAqC,IAArC,CAAjB;EACA,IAAIwE,cAAc,GAAGjF,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,gBAAvB,EAAyC,IAAzC,CAArB;EACA,IAAIsC,QAAQ,GAAG/C,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,UAAvB,CAAf;EACA,IAAIyE,IAAI,GAAGlF,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,MAAvB,EAA+B,IAA/B,CAAX,CAdyD,CAgBzD;EACA;;EACA,IAAIqE,OAAO,IAAI,KAAK9D,QAApB,EAA8B;IAC5B,MAAM,IAAImB,KAAJ,CAAU,0BAA0B2C,OAApC,CAAN;EACD;;EAED,IAAIrD,UAAJ,EAAgB;IACdA,UAAU,GAAGzB,IAAI,CAACmF,SAAL,CAAe1D,UAAf,CAAb;EACD;;EAEDsD,OAAO,GAAGA,OAAO,CACd7B,GADO,CACHkC,MADG,EAER;EACA;EACA;EAJQ,CAKPlC,GALO,CAKHlD,IAAI,CAACmF,SALF,EAMR;EACA;EACA;EACA;EATQ,CAUPjC,GAVO,CAUH,UAAUE,MAAV,EAAkB;IACrB,OAAO3B,UAAU,IAAIzB,IAAI,CAACqF,UAAL,CAAgB5D,UAAhB,CAAd,IAA6CzB,IAAI,CAACqF,UAAL,CAAgBjC,MAAhB,CAA7C,GACHpD,IAAI,CAACsF,QAAL,CAAc7D,UAAd,EAA0B2B,MAA1B,CADG,GAEHA,MAFJ;EAGD,CAdO,CAAV,CA1ByD,CA0CzD;EACA;EACA;EACA;;EACA,KAAKU,MAAL,GAAc3D,QAAQ,CAACoF,SAAT,CAAmBP,KAAK,CAAC9B,GAAN,CAAUkC,MAAV,CAAnB,EAAsC,IAAtC,CAAd;EACA,KAAK/B,QAAL,GAAgBlD,QAAQ,CAACoF,SAAT,CAAmBR,OAAnB,EAA4B,IAA5B,CAAhB;EAEA,KAAKS,gBAAL,GAAwB,KAAKnC,QAAL,CAAcoC,OAAd,GAAwBvC,GAAxB,CAA4B,UAAUwC,CAAV,EAAa;IAC/D,OAAO1F,IAAI,CAACuD,gBAAL,CAAsB9B,UAAtB,EAAkCiE,CAAlC,EAAqClF,aAArC,CAAP;EACD,CAFuB,CAAxB;EAIA,KAAKiB,UAAL,GAAkBA,UAAlB;EACA,KAAKwD,cAAL,GAAsBA,cAAtB;EACA,KAAKzD,SAAL,GAAiBuB,QAAjB;EACA,KAAKS,aAAL,GAAqBhD,aAArB;EACA,KAAK0E,IAAL,GAAYA,IAAZ;AACD;;AAEDrE,sBAAsB,CAACE,SAAvB,GAAmCG,MAAM,CAACyE,MAAP,CAAcrF,iBAAiB,CAACS,SAAhC,CAAnC;AACAF,sBAAsB,CAACE,SAAvB,CAAiC6E,QAAjC,GAA4CtF,iBAA5C;AAEA;AACA;AACA;AACA;;AACAO,sBAAsB,CAACE,SAAvB,CAAiCuD,gBAAjC,GAAoD,UAASuB,OAAT,EAAkB;EACpE,IAAIC,cAAc,GAAGD,OAArB;;EACA,IAAI,KAAKpE,UAAL,IAAmB,IAAvB,EAA6B;IAC3BqE,cAAc,GAAG9F,IAAI,CAACsF,QAAL,CAAc,KAAK7D,UAAnB,EAA+BqE,cAA/B,CAAjB;EACD;;EAED,IAAI,KAAKzC,QAAL,CAAc0C,GAAd,CAAkBD,cAAlB,CAAJ,EAAuC;IACrC,OAAO,KAAKzC,QAAL,CAAc2C,OAAd,CAAsBF,cAAtB,CAAP;EACD,CARmE,CAUpE;EACA;;;EACA,IAAIG,CAAJ;;EACA,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKT,gBAAL,CAAsBU,MAAtC,EAA8C,EAAED,CAAhD,EAAmD;IACjD,IAAI,KAAKT,gBAAL,CAAsBS,CAAtB,KAA4BJ,OAAhC,EAAyC;MACvC,OAAOI,CAAP;IACD;EACF;;EAED,OAAO,CAAC,CAAR;AACD,CApBD;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACApF,sBAAsB,CAACC,aAAvB,GACE,SAASqF,+BAAT,CAAyC5F,UAAzC,EAAqDC,aAArD,EAAoE;EAClE,IAAI4F,GAAG,GAAGlF,MAAM,CAACyE,MAAP,CAAc9E,sBAAsB,CAACE,SAArC,CAAV;EAEA,IAAIiE,KAAK,GAAGoB,GAAG,CAACtC,MAAJ,GAAa3D,QAAQ,CAACoF,SAAT,CAAmBhF,UAAU,CAACuD,MAAX,CAAkB2B,OAAlB,EAAnB,EAAgD,IAAhD,CAAzB;EACA,IAAIV,OAAO,GAAGqB,GAAG,CAAC/C,QAAJ,GAAelD,QAAQ,CAACoF,SAAT,CAAmBhF,UAAU,CAAC8C,QAAX,CAAoBoC,OAApB,EAAnB,EAAkD,IAAlD,CAA7B;EACAW,GAAG,CAAC3E,UAAJ,GAAiBlB,UAAU,CAAC8F,WAA5B;EACAD,GAAG,CAACnB,cAAJ,GAAqB1E,UAAU,CAAC+F,uBAAX,CAAmCF,GAAG,CAAC/C,QAAJ,CAAaoC,OAAb,EAAnC,EACmCW,GAAG,CAAC3E,UADvC,CAArB;EAEA2E,GAAG,CAAClB,IAAJ,GAAW3E,UAAU,CAACgG,KAAtB;EACAH,GAAG,CAAC5C,aAAJ,GAAoBhD,aAApB;EACA4F,GAAG,CAACZ,gBAAJ,GAAuBY,GAAG,CAAC/C,QAAJ,CAAaoC,OAAb,GAAuBvC,GAAvB,CAA2B,UAAUwC,CAAV,EAAa;IAC7D,OAAO1F,IAAI,CAACuD,gBAAL,CAAsB6C,GAAG,CAAC3E,UAA1B,EAAsCiE,CAAtC,EAAyClF,aAAzC,CAAP;EACD,CAFsB,CAAvB,CAVkE,CAclE;EACA;EACA;EACA;;EAEA,IAAIgG,iBAAiB,GAAGjG,UAAU,CAACiB,SAAX,CAAqBiE,OAArB,GAA+BgB,KAA/B,EAAxB;;EACA,IAAIC,qBAAqB,GAAGN,GAAG,CAACnF,mBAAJ,GAA0B,EAAtD;EACA,IAAI0F,oBAAoB,GAAGP,GAAG,CAAC1E,kBAAJ,GAAyB,EAApD;;EAEA,KAAK,IAAIuE,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGM,iBAAiB,CAACN,MAA3C,EAAmDD,CAAC,GAAGC,MAAvD,EAA+DD,CAAC,EAAhE,EAAoE;IAClE,IAAIW,UAAU,GAAGJ,iBAAiB,CAACP,CAAD,CAAlC;IACA,IAAIY,WAAW,GAAG,IAAIC,OAAJ,EAAlB;IACAD,WAAW,CAACpD,aAAZ,GAA4BmD,UAAU,CAACnD,aAAvC;IACAoD,WAAW,CAACnD,eAAZ,GAA8BkD,UAAU,CAAClD,eAAzC;;IAEA,IAAIkD,UAAU,CAACxD,MAAf,EAAuB;MACrByD,WAAW,CAACzD,MAAZ,GAAqB2B,OAAO,CAACiB,OAAR,CAAgBY,UAAU,CAACxD,MAA3B,CAArB;MACAyD,WAAW,CAAClD,YAAZ,GAA2BiD,UAAU,CAACjD,YAAtC;MACAkD,WAAW,CAACjD,cAAZ,GAA6BgD,UAAU,CAAChD,cAAxC;;MAEA,IAAIgD,UAAU,CAAC/C,IAAf,EAAqB;QACnBgD,WAAW,CAAChD,IAAZ,GAAmBmB,KAAK,CAACgB,OAAN,CAAcY,UAAU,CAAC/C,IAAzB,CAAnB;MACD;;MAED8C,oBAAoB,CAAChC,IAArB,CAA0BkC,WAA1B;IACD;;IAEDH,qBAAqB,CAAC/B,IAAtB,CAA2BkC,WAA3B;EACD;;EAEDxG,SAAS,CAAC+F,GAAG,CAAC1E,kBAAL,EAAyB1B,IAAI,CAACwE,0BAA9B,CAAT;EAEA,OAAO4B,GAAP;AACD,CAhDH;AAkDA;AACA;AACA;;;AACAvF,sBAAsB,CAACE,SAAvB,CAAiCC,QAAjC,GAA4C,CAA5C;AAEA;AACA;AACA;;AACAE,MAAM,CAACC,cAAP,CAAsBN,sBAAsB,CAACE,SAA7C,EAAwD,SAAxD,EAAmE;EACjEO,GAAG,EAAE,YAAY;IACf,OAAO,KAAKkE,gBAAL,CAAsBiB,KAAtB,EAAP;EACD;AAHgE,CAAnE;AAMA;AACA;AACA;;AACA,SAASK,OAAT,GAAmB;EACjB,KAAKrD,aAAL,GAAqB,CAArB;EACA,KAAKC,eAAL,GAAuB,CAAvB;EACA,KAAKN,MAAL,GAAc,IAAd;EACA,KAAKO,YAAL,GAAoB,IAApB;EACA,KAAKC,cAAL,GAAsB,IAAtB;EACA,KAAKC,IAAL,GAAY,IAAZ;AACD;AAED;AACA;AACA;AACA;AACA;;;AACAhD,sBAAsB,CAACE,SAAvB,CAAiCQ,cAAjC,GACE,SAASU,+BAAT,CAAyCJ,IAAzC,EAA+CK,WAA/C,EAA4D;EAC1D,IAAIuB,aAAa,GAAG,CAApB;EACA,IAAIsD,uBAAuB,GAAG,CAA9B;EACA,IAAIC,oBAAoB,GAAG,CAA3B;EACA,IAAIC,sBAAsB,GAAG,CAA7B;EACA,IAAIC,cAAc,GAAG,CAArB;EACA,IAAIC,YAAY,GAAG,CAAnB;EACA,IAAIjB,MAAM,GAAGrE,IAAI,CAACqE,MAAlB;EACA,IAAIpE,KAAK,GAAG,CAAZ;EACA,IAAIsF,cAAc,GAAG,EAArB;EACA,IAAIC,IAAI,GAAG,EAAX;EACA,IAAIC,gBAAgB,GAAG,EAAvB;EACA,IAAId,iBAAiB,GAAG,EAAxB;EACA,IAAIrD,OAAJ,EAAaoE,GAAb,EAAkBC,OAAlB,EAA2BC,GAA3B,EAAgCC,KAAhC;;EAEA,OAAO5F,KAAK,GAAGoE,MAAf,EAAuB;IACrB,IAAIrE,IAAI,CAACG,MAAL,CAAYF,KAAZ,MAAuB,GAA3B,EAAgC;MAC9B2B,aAAa;MACb3B,KAAK;MACLiF,uBAAuB,GAAG,CAA1B;IACD,CAJD,MAKK,IAAIlF,IAAI,CAACG,MAAL,CAAYF,KAAZ,MAAuB,GAA3B,EAAgC;MACnCA,KAAK;IACN,CAFI,MAGA;MACHqB,OAAO,GAAG,IAAI2D,OAAJ,EAAV;MACA3D,OAAO,CAACM,aAAR,GAAwBA,aAAxB,CAFG,CAIH;MACA;MACA;MACA;MACA;;MACA,KAAKgE,GAAG,GAAG3F,KAAX,EAAkB2F,GAAG,GAAGvB,MAAxB,EAAgCuB,GAAG,EAAnC,EAAuC;QACrC,IAAI,KAAK9F,uBAAL,CAA6BE,IAA7B,EAAmC4F,GAAnC,CAAJ,EAA6C;UAC3C;QACD;MACF;;MACDF,GAAG,GAAG1F,IAAI,CAAC4E,KAAL,CAAW3E,KAAX,EAAkB2F,GAAlB,CAAN;MAEAD,OAAO,GAAGJ,cAAc,CAACG,GAAD,CAAxB;;MACA,IAAIC,OAAJ,EAAa;QACX1F,KAAK,IAAIyF,GAAG,CAACrB,MAAb;MACD,CAFD,MAEO;QACLsB,OAAO,GAAG,EAAV;;QACA,OAAO1F,KAAK,GAAG2F,GAAf,EAAoB;UAClBrH,SAAS,CAACuH,MAAV,CAAiB9F,IAAjB,EAAuBC,KAAvB,EAA8BuF,IAA9B;UACAK,KAAK,GAAGL,IAAI,CAACK,KAAb;UACA5F,KAAK,GAAGuF,IAAI,CAACO,IAAb;UACAJ,OAAO,CAAC7C,IAAR,CAAa+C,KAAb;QACD;;QAED,IAAIF,OAAO,CAACtB,MAAR,KAAmB,CAAvB,EAA0B;UACxB,MAAM,IAAI/D,KAAJ,CAAU,wCAAV,CAAN;QACD;;QAED,IAAIqF,OAAO,CAACtB,MAAR,KAAmB,CAAvB,EAA0B;UACxB,MAAM,IAAI/D,KAAJ,CAAU,wCAAV,CAAN;QACD;;QAEDiF,cAAc,CAACG,GAAD,CAAd,GAAsBC,OAAtB;MACD,CArCE,CAuCH;;;MACArE,OAAO,CAACO,eAAR,GAA0BqD,uBAAuB,GAAGS,OAAO,CAAC,CAAD,CAA3D;MACAT,uBAAuB,GAAG5D,OAAO,CAACO,eAAlC;;MAEA,IAAI8D,OAAO,CAACtB,MAAR,GAAiB,CAArB,EAAwB;QACtB;QACA/C,OAAO,CAACC,MAAR,GAAiB8D,cAAc,GAAGM,OAAO,CAAC,CAAD,CAAzC;QACAN,cAAc,IAAIM,OAAO,CAAC,CAAD,CAAzB,CAHsB,CAKtB;;QACArE,OAAO,CAACQ,YAAR,GAAuBqD,oBAAoB,GAAGQ,OAAO,CAAC,CAAD,CAArD;QACAR,oBAAoB,GAAG7D,OAAO,CAACQ,YAA/B,CAPsB,CAQtB;;QACAR,OAAO,CAACQ,YAAR,IAAwB,CAAxB,CATsB,CAWtB;;QACAR,OAAO,CAACS,cAAR,GAAyBqD,sBAAsB,GAAGO,OAAO,CAAC,CAAD,CAAzD;QACAP,sBAAsB,GAAG9D,OAAO,CAACS,cAAjC;;QAEA,IAAI4D,OAAO,CAACtB,MAAR,GAAiB,CAArB,EAAwB;UACtB;UACA/C,OAAO,CAACU,IAAR,GAAesD,YAAY,GAAGK,OAAO,CAAC,CAAD,CAArC;UACAL,YAAY,IAAIK,OAAO,CAAC,CAAD,CAAvB;QACD;MACF;;MAEDhB,iBAAiB,CAAC7B,IAAlB,CAAuBxB,OAAvB;;MACA,IAAI,OAAOA,OAAO,CAACQ,YAAf,KAAgC,QAApC,EAA8C;QAC5C2D,gBAAgB,CAAC3C,IAAjB,CAAsBxB,OAAtB;MACD;IACF;EACF;;EAED9C,SAAS,CAACmG,iBAAD,EAAoBxG,IAAI,CAAC6H,mCAAzB,CAAT;EACA,KAAK5G,mBAAL,GAA2BuF,iBAA3B;EAEAnG,SAAS,CAACiH,gBAAD,EAAmBtH,IAAI,CAACwE,0BAAxB,CAAT;EACA,KAAK9C,kBAAL,GAA0B4F,gBAA1B;AACD,CAtGH;AAwGA;AACA;AACA;AACA;;;AACAzG,sBAAsB,CAACE,SAAvB,CAAiCwD,YAAjC,GACE,SAASuD,6BAAT,CAAuCC,OAAvC,EAAgDC,SAAhD,EAA2DC,SAA3D,EACuCC,WADvC,EACoDC,WADpD,EACiEC,KADjE,EACwE;EACtE;EACA;EACA;EACA;EAEA,IAAIL,OAAO,CAACE,SAAD,CAAP,IAAsB,CAA1B,EAA6B;IAC3B,MAAM,IAAII,SAAJ,CAAc,kDACEN,OAAO,CAACE,SAAD,CADvB,CAAN;EAED;;EACD,IAAIF,OAAO,CAACG,WAAD,CAAP,GAAuB,CAA3B,EAA8B;IAC5B,MAAM,IAAIG,SAAJ,CAAc,oDACEN,OAAO,CAACG,WAAD,CADvB,CAAN;EAED;;EAED,OAAOhI,YAAY,CAACoI,MAAb,CAAoBP,OAApB,EAA6BC,SAA7B,EAAwCG,WAAxC,EAAqDC,KAArD,CAAP;AACD,CAlBH;AAoBA;AACA;AACA;AACA;;;AACAvH,sBAAsB,CAACE,SAAvB,CAAiCwH,kBAAjC,GACE,SAASC,oCAAT,GAAgD;EAC9C,KAAK,IAAI1G,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKkB,kBAAL,CAAwBkD,MAApD,EAA4D,EAAEpE,KAA9D,EAAqE;IACnE,IAAIqB,OAAO,GAAG,KAAKH,kBAAL,CAAwBlB,KAAxB,CAAd,CADmE,CAGnE;IACA;IACA;IACA;;IACA,IAAIA,KAAK,GAAG,CAAR,GAAY,KAAKkB,kBAAL,CAAwBkD,MAAxC,EAAgD;MAC9C,IAAIuC,WAAW,GAAG,KAAKzF,kBAAL,CAAwBlB,KAAK,GAAG,CAAhC,CAAlB;;MAEA,IAAIqB,OAAO,CAACM,aAAR,KAA0BgF,WAAW,CAAChF,aAA1C,EAAyD;QACvDN,OAAO,CAACuF,mBAAR,GAA8BD,WAAW,CAAC/E,eAAZ,GAA8B,CAA5D;QACA;MACD;IACF,CAdkE,CAgBnE;;;IACAP,OAAO,CAACuF,mBAAR,GAA8BC,QAA9B;EACD;AACF,CArBH;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA9H,sBAAsB,CAACE,SAAvB,CAAiC6H,mBAAjC,GACE,SAASC,qCAAT,CAA+C3E,KAA/C,EAAsD;EACpD,IAAIG,MAAM,GAAG;IACXZ,aAAa,EAAEzD,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,MAAnB,CADJ;IAEXR,eAAe,EAAE1D,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB;EAFN,CAAb;;EAKA,IAAIpC,KAAK,GAAG,KAAKyC,YAAL,CACVF,MADU,EAEV,KAAKrB,kBAFK,EAGV,eAHU,EAIV,iBAJU,EAKVhD,IAAI,CAAC6H,mCALK,EAMV7H,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,MAAnB,EAA2B5D,iBAAiB,CAACgC,oBAA7C,CANU,CAAZ;;EASA,IAAIR,KAAK,IAAI,CAAb,EAAgB;IACd,IAAIqB,OAAO,GAAG,KAAKH,kBAAL,CAAwBlB,KAAxB,CAAd;;IAEA,IAAIqB,OAAO,CAACM,aAAR,KAA0BY,MAAM,CAACZ,aAArC,EAAoD;MAClD,IAAIL,MAAM,GAAGpD,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,QAArB,EAA+B,IAA/B,CAAb;;MACA,IAAIC,MAAM,KAAK,IAAf,EAAqB;QACnBA,MAAM,GAAG,KAAKC,QAAL,CAAcC,EAAd,CAAiBF,MAAjB,CAAT;QACAA,MAAM,GAAGpD,IAAI,CAACuD,gBAAL,CAAsB,KAAK9B,UAA3B,EAAuC2B,MAAvC,EAA+C,KAAKI,aAApD,CAAT;MACD;;MACD,IAAIK,IAAI,GAAG7D,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,MAArB,EAA6B,IAA7B,CAAX;;MACA,IAAIU,IAAI,KAAK,IAAb,EAAmB;QACjBA,IAAI,GAAG,KAAKC,MAAL,CAAYR,EAAZ,CAAeO,IAAf,CAAP;MACD;;MACD,OAAO;QACLT,MAAM,EAAEA,MADH;QAELe,IAAI,EAAEnE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,cAArB,EAAqC,IAArC,CAFD;QAGLsB,MAAM,EAAEzE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,gBAArB,EAAuC,IAAvC,CAHH;QAILU,IAAI,EAAEA;MAJD,CAAP;IAMD;EACF;;EAED,OAAO;IACLT,MAAM,EAAE,IADH;IAELe,IAAI,EAAE,IAFD;IAGLM,MAAM,EAAE,IAHH;IAILZ,IAAI,EAAE;EAJD,CAAP;AAMD,CA5CH;AA8CA;AACA;AACA;AACA;;;AACAhD,sBAAsB,CAACE,SAAvB,CAAiC+H,uBAAjC,GACE,SAASC,8CAAT,GAA0D;EACxD,IAAI,CAAC,KAAK9D,cAAV,EAA0B;IACxB,OAAO,KAAP;EACD;;EACD,OAAO,KAAKA,cAAL,CAAoBiB,MAApB,IAA8B,KAAK7C,QAAL,CAAc2F,IAAd,EAA9B,IACL,CAAC,KAAK/D,cAAL,CAAoBgE,IAApB,CAAyB,UAAUC,EAAV,EAAc;IAAE,OAAOA,EAAE,IAAI,IAAb;EAAoB,CAA7D,CADH;AAED,CAPH;AASA;AACA;AACA;AACA;AACA;;;AACArI,sBAAsB,CAACE,SAAvB,CAAiCoI,gBAAjC,GACE,SAASC,kCAAT,CAA4CvD,OAA5C,EAAqDwD,aAArD,EAAoE;EAClE,IAAI,CAAC,KAAKpE,cAAV,EAA0B;IACxB,OAAO,IAAP;EACD;;EAED,IAAInD,KAAK,GAAG,KAAKwC,gBAAL,CAAsBuB,OAAtB,CAAZ;;EACA,IAAI/D,KAAK,IAAI,CAAb,EAAgB;IACd,OAAO,KAAKmD,cAAL,CAAoBnD,KAApB,CAAP;EACD;;EAED,IAAIgE,cAAc,GAAGD,OAArB;;EACA,IAAI,KAAKpE,UAAL,IAAmB,IAAvB,EAA6B;IAC3BqE,cAAc,GAAG9F,IAAI,CAACsF,QAAL,CAAc,KAAK7D,UAAnB,EAA+BqE,cAA/B,CAAjB;EACD;;EAED,IAAIwD,GAAJ;;EACA,IAAI,KAAK7H,UAAL,IAAmB,IAAnB,KACI6H,GAAG,GAAGtJ,IAAI,CAACuJ,QAAL,CAAc,KAAK9H,UAAnB,CADV,CAAJ,EAC+C;IAC7C;IACA;IACA;IACA;IACA,IAAI+H,cAAc,GAAG1D,cAAc,CAAC2D,OAAf,CAAuB,YAAvB,EAAqC,EAArC,CAArB;;IACA,IAAIH,GAAG,CAACI,MAAJ,IAAc,MAAd,IACG,KAAKrG,QAAL,CAAc0C,GAAd,CAAkByD,cAAlB,CADP,EAC0C;MACxC,OAAO,KAAKvE,cAAL,CAAoB,KAAK5B,QAAL,CAAc2C,OAAd,CAAsBwD,cAAtB,CAApB,CAAP;IACD;;IAED,IAAI,CAAC,CAACF,GAAG,CAACK,IAAL,IAAaL,GAAG,CAACK,IAAJ,IAAY,GAA1B,KACG,KAAKtG,QAAL,CAAc0C,GAAd,CAAkB,MAAMD,cAAxB,CADP,EACgD;MAC9C,OAAO,KAAKb,cAAL,CAAoB,KAAK5B,QAAL,CAAc2C,OAAd,CAAsB,MAAMF,cAA5B,CAApB,CAAP;IACD;EACF,CAhCiE,CAkClE;EACA;EACA;EACA;;;EACA,IAAIuD,aAAJ,EAAmB;IACjB,OAAO,IAAP;EACD,CAFD,MAGK;IACH,MAAM,IAAIlH,KAAJ,CAAU,MAAM2D,cAAN,GAAuB,4BAAjC,CAAN;EACD;AACF,CA7CH;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAjF,sBAAsB,CAACE,SAAvB,CAAiC6I,oBAAjC,GACE,SAASC,sCAAT,CAAgD3F,KAAhD,EAAuD;EACrD,IAAId,MAAM,GAAGpD,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB,CAAb;EACAd,MAAM,GAAG,KAAKkB,gBAAL,CAAsBlB,MAAtB,CAAT;;EACA,IAAIA,MAAM,GAAG,CAAb,EAAgB;IACd,OAAO;MACLe,IAAI,EAAE,IADD;MAELM,MAAM,EAAE,IAFH;MAGLG,UAAU,EAAE;IAHP,CAAP;EAKD;;EAED,IAAIP,MAAM,GAAG;IACXjB,MAAM,EAAEA,MADG;IAEXO,YAAY,EAAE3D,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,MAAnB,CAFH;IAGXN,cAAc,EAAE5D,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB;EAHL,CAAb;;EAMA,IAAIpC,KAAK,GAAG,KAAKyC,YAAL,CACVF,MADU,EAEV,KAAKpB,iBAFK,EAGV,cAHU,EAIV,gBAJU,EAKVjD,IAAI,CAACwE,0BALK,EAMVxE,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,MAAnB,EAA2B5D,iBAAiB,CAACgC,oBAA7C,CANU,CAAZ;;EASA,IAAIR,KAAK,IAAI,CAAb,EAAgB;IACd,IAAIqB,OAAO,GAAG,KAAKF,iBAAL,CAAuBnB,KAAvB,CAAd;;IAEA,IAAIqB,OAAO,CAACC,MAAR,KAAmBiB,MAAM,CAACjB,MAA9B,EAAsC;MACpC,OAAO;QACLe,IAAI,EAAEnE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,eAArB,EAAsC,IAAtC,CADD;QAELsB,MAAM,EAAEzE,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,iBAArB,EAAwC,IAAxC,CAFH;QAGLyB,UAAU,EAAE5E,IAAI,CAACoE,MAAL,CAAYjB,OAAZ,EAAqB,qBAArB,EAA4C,IAA5C;MAHP,CAAP;IAKD;EACF;;EAED,OAAO;IACLgB,IAAI,EAAE,IADD;IAELM,MAAM,EAAE,IAFH;IAGLG,UAAU,EAAE;EAHP,CAAP;AAKD,CA5CH;;AA8CAC,OAAO,CAAChE,sBAAR,GAAiCA,sBAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,wBAAT,CAAkCL,UAAlC,EAA8CC,aAA9C,EAA6D;EAC3D,IAAIC,SAAS,GAAGF,UAAhB;;EACA,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;IAClCE,SAAS,GAAGT,IAAI,CAACU,mBAAL,CAAyBH,UAAzB,CAAZ;EACD;;EAED,IAAIuE,OAAO,GAAG9E,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,SAAvB,CAAd;EACA,IAAIE,QAAQ,GAAGX,IAAI,CAACoE,MAAL,CAAY3D,SAAZ,EAAuB,UAAvB,CAAf;;EAEA,IAAIqE,OAAO,IAAI,KAAK9D,QAApB,EAA8B;IAC5B,MAAM,IAAImB,KAAJ,CAAU,0BAA0B2C,OAApC,CAAN;EACD;;EAED,KAAKzB,QAAL,GAAgB,IAAIlD,QAAJ,EAAhB;EACA,KAAK2D,MAAL,GAAc,IAAI3D,QAAJ,EAAd;EAEA,IAAI2J,UAAU,GAAG;IACf3F,IAAI,EAAE,CAAC,CADQ;IAEfM,MAAM,EAAE;EAFO,CAAjB;EAIA,KAAKsF,SAAL,GAAiBpJ,QAAQ,CAACuC,GAAT,CAAa,UAAUwC,CAAV,EAAa;IACzC,IAAIA,CAAC,CAAC4D,GAAN,EAAW;MACT;MACA;MACA,MAAM,IAAInH,KAAJ,CAAU,oDAAV,CAAN;IACD;;IACD,IAAI6H,MAAM,GAAGhK,IAAI,CAACoE,MAAL,CAAYsB,CAAZ,EAAe,QAAf,CAAb;IACA,IAAIuE,UAAU,GAAGjK,IAAI,CAACoE,MAAL,CAAY4F,MAAZ,EAAoB,MAApB,CAAjB;IACA,IAAIE,YAAY,GAAGlK,IAAI,CAACoE,MAAL,CAAY4F,MAAZ,EAAoB,QAApB,CAAnB;;IAEA,IAAIC,UAAU,GAAGH,UAAU,CAAC3F,IAAxB,IACC8F,UAAU,KAAKH,UAAU,CAAC3F,IAA1B,IAAkC+F,YAAY,GAAGJ,UAAU,CAACrF,MADjE,EAC0E;MACxE,MAAM,IAAItC,KAAJ,CAAU,sDAAV,CAAN;IACD;;IACD2H,UAAU,GAAGE,MAAb;IAEA,OAAO;MACLG,eAAe,EAAE;QACf;QACA;QACA1G,aAAa,EAAEwG,UAAU,GAAG,CAHb;QAIfvG,eAAe,EAAEwG,YAAY,GAAG;MAJjB,CADZ;MAOLtE,QAAQ,EAAE,IAAItF,iBAAJ,CAAsBN,IAAI,CAACoE,MAAL,CAAYsB,CAAZ,EAAe,KAAf,CAAtB,EAA6ClF,aAA7C;IAPL,CAAP;EASD,CAzBgB,CAAjB;AA0BD;;AAEDI,wBAAwB,CAACG,SAAzB,GAAqCG,MAAM,CAACyE,MAAP,CAAcrF,iBAAiB,CAACS,SAAhC,CAArC;AACAH,wBAAwB,CAACG,SAAzB,CAAmCqJ,WAAnC,GAAiD9J,iBAAjD;AAEA;AACA;AACA;;AACAM,wBAAwB,CAACG,SAAzB,CAAmCC,QAAnC,GAA8C,CAA9C;AAEA;AACA;AACA;;AACAE,MAAM,CAACC,cAAP,CAAsBP,wBAAwB,CAACG,SAA/C,EAA0D,SAA1D,EAAqE;EACnEO,GAAG,EAAE,YAAY;IACf,IAAIyD,OAAO,GAAG,EAAd;;IACA,KAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK8D,SAAL,CAAe7D,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;MAC9C,KAAK,IAAIoE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKN,SAAL,CAAe9D,CAAf,EAAkBL,QAAlB,CAA2Bb,OAA3B,CAAmCmB,MAAvD,EAA+DmE,CAAC,EAAhE,EAAoE;QAClEtF,OAAO,CAACJ,IAAR,CAAa,KAAKoF,SAAL,CAAe9D,CAAf,EAAkBL,QAAlB,CAA2Bb,OAA3B,CAAmCsF,CAAnC,CAAb;MACD;IACF;;IACD,OAAOtF,OAAP;EACD;AATkE,CAArE;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAnE,wBAAwB,CAACG,SAAzB,CAAmC6H,mBAAnC,GACE,SAAS0B,4CAAT,CAAsDpG,KAAtD,EAA6D;EAC3D,IAAIG,MAAM,GAAG;IACXZ,aAAa,EAAEzD,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,MAAnB,CADJ;IAEXR,eAAe,EAAE1D,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB;EAFN,CAAb,CAD2D,CAM3D;EACA;;EACA,IAAIqG,YAAY,GAAGrK,YAAY,CAACoI,MAAb,CAAoBjE,MAApB,EAA4B,KAAK0F,SAAjC,EACjB,UAAS1F,MAAT,EAAiBmG,OAAjB,EAA0B;IACxB,IAAIC,GAAG,GAAGpG,MAAM,CAACZ,aAAP,GAAuB+G,OAAO,CAACL,eAAR,CAAwB1G,aAAzD;;IACA,IAAIgH,GAAJ,EAAS;MACP,OAAOA,GAAP;IACD;;IAED,OAAQpG,MAAM,CAACX,eAAP,GACA8G,OAAO,CAACL,eAAR,CAAwBzG,eADhC;EAED,CATgB,CAAnB;EAUA,IAAI8G,OAAO,GAAG,KAAKT,SAAL,CAAeQ,YAAf,CAAd;;EAEA,IAAI,CAACC,OAAL,EAAc;IACZ,OAAO;MACLpH,MAAM,EAAE,IADH;MAELe,IAAI,EAAE,IAFD;MAGLM,MAAM,EAAE,IAHH;MAILZ,IAAI,EAAE;IAJD,CAAP;EAMD;;EAED,OAAO2G,OAAO,CAAC5E,QAAR,CAAiBgD,mBAAjB,CAAqC;IAC1CzE,IAAI,EAAEE,MAAM,CAACZ,aAAP,IACH+G,OAAO,CAACL,eAAR,CAAwB1G,aAAxB,GAAwC,CADrC,CADoC;IAG1CgB,MAAM,EAAEJ,MAAM,CAACX,eAAP,IACL8G,OAAO,CAACL,eAAR,CAAwB1G,aAAxB,KAA0CY,MAAM,CAACZ,aAAjD,GACE+G,OAAO,CAACL,eAAR,CAAwBzG,eAAxB,GAA0C,CAD5C,GAEE,CAHG,CAHkC;IAO1CgH,IAAI,EAAExG,KAAK,CAACwG;EAP8B,CAArC,CAAP;AASD,CAvCH;AAyCA;AACA;AACA;AACA;;;AACA9J,wBAAwB,CAACG,SAAzB,CAAmC+H,uBAAnC,GACE,SAAS6B,gDAAT,GAA4D;EAC1D,OAAO,KAAKZ,SAAL,CAAea,KAAf,CAAqB,UAAUlF,CAAV,EAAa;IACvC,OAAOA,CAAC,CAACE,QAAF,CAAWkD,uBAAX,EAAP;EACD,CAFM,CAAP;AAGD,CALH;AAOA;AACA;AACA;AACA;AACA;;;AACAlI,wBAAwB,CAACG,SAAzB,CAAmCoI,gBAAnC,GACE,SAAS0B,yCAAT,CAAmDhF,OAAnD,EAA4DwD,aAA5D,EAA2E;EACzE,KAAK,IAAIpD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK8D,SAAL,CAAe7D,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;IAC9C,IAAIuE,OAAO,GAAG,KAAKT,SAAL,CAAe9D,CAAf,CAAd;IAEA,IAAI6E,OAAO,GAAGN,OAAO,CAAC5E,QAAR,CAAiBuD,gBAAjB,CAAkCtD,OAAlC,EAA2C,IAA3C,CAAd;;IACA,IAAIiF,OAAJ,EAAa;MACX,OAAOA,OAAP;IACD;EACF;;EACD,IAAIzB,aAAJ,EAAmB;IACjB,OAAO,IAAP;EACD,CAFD,MAGK;IACH,MAAM,IAAIlH,KAAJ,CAAU,MAAM0D,OAAN,GAAgB,4BAA1B,CAAN;EACD;AACF,CAhBH;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAjF,wBAAwB,CAACG,SAAzB,CAAmC6I,oBAAnC,GACE,SAASmB,6CAAT,CAAuD7G,KAAvD,EAA8D;EAC5D,KAAK,IAAI+B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK8D,SAAL,CAAe7D,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;IAC9C,IAAIuE,OAAO,GAAG,KAAKT,SAAL,CAAe9D,CAAf,CAAd,CAD8C,CAG9C;IACA;;IACA,IAAIuE,OAAO,CAAC5E,QAAR,CAAiBtB,gBAAjB,CAAkCtE,IAAI,CAACoE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB,CAAlC,MAAoE,CAAC,CAAzE,EAA4E;MAC1E;IACD;;IACD,IAAI8G,iBAAiB,GAAGR,OAAO,CAAC5E,QAAR,CAAiBgE,oBAAjB,CAAsC1F,KAAtC,CAAxB;;IACA,IAAI8G,iBAAJ,EAAuB;MACrB,IAAIC,GAAG,GAAG;QACR9G,IAAI,EAAE6G,iBAAiB,CAAC7G,IAAlB,IACHqG,OAAO,CAACL,eAAR,CAAwB1G,aAAxB,GAAwC,CADrC,CADE;QAGRgB,MAAM,EAAEuG,iBAAiB,CAACvG,MAAlB,IACL+F,OAAO,CAACL,eAAR,CAAwB1G,aAAxB,KAA0CuH,iBAAiB,CAAC7G,IAA5D,GACEqG,OAAO,CAACL,eAAR,CAAwBzG,eAAxB,GAA0C,CAD5C,GAEE,CAHG;MAHA,CAAV;MAQA,OAAOuH,GAAP;IACD;EACF;;EAED,OAAO;IACL9G,IAAI,EAAE,IADD;IAELM,MAAM,EAAE;EAFH,CAAP;AAID,CA5BH;AA8BA;AACA;AACA;AACA;AACA;;;AACA7D,wBAAwB,CAACG,SAAzB,CAAmCQ,cAAnC,GACE,SAAS2J,sCAAT,CAAgDrJ,IAAhD,EAAsDK,WAAtD,EAAmE;EACjE,KAAKjB,mBAAL,GAA2B,EAA3B;EACA,KAAKS,kBAAL,GAA0B,EAA1B;;EACA,KAAK,IAAIuE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK8D,SAAL,CAAe7D,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;IAC9C,IAAIuE,OAAO,GAAG,KAAKT,SAAL,CAAe9D,CAAf,CAAd;IACA,IAAIkF,eAAe,GAAGX,OAAO,CAAC5E,QAAR,CAAiB5C,kBAAvC;;IACA,KAAK,IAAIqH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,eAAe,CAACjF,MAApC,EAA4CmE,CAAC,EAA7C,EAAiD;MAC/C,IAAIlH,OAAO,GAAGgI,eAAe,CAACd,CAAD,CAA7B;;MAEA,IAAIjH,MAAM,GAAGoH,OAAO,CAAC5E,QAAR,CAAiBvC,QAAjB,CAA0BC,EAA1B,CAA6BH,OAAO,CAACC,MAArC,CAAb;;MACAA,MAAM,GAAGpD,IAAI,CAACuD,gBAAL,CAAsBiH,OAAO,CAAC5E,QAAR,CAAiBnE,UAAvC,EAAmD2B,MAAnD,EAA2D,KAAKI,aAAhE,CAAT;;MACA,KAAKH,QAAL,CAAc+H,GAAd,CAAkBhI,MAAlB;;MACAA,MAAM,GAAG,KAAKC,QAAL,CAAc2C,OAAd,CAAsB5C,MAAtB,CAAT;MAEA,IAAIS,IAAI,GAAG,IAAX;;MACA,IAAIV,OAAO,CAACU,IAAZ,EAAkB;QAChBA,IAAI,GAAG2G,OAAO,CAAC5E,QAAR,CAAiB9B,MAAjB,CAAwBR,EAAxB,CAA2BH,OAAO,CAACU,IAAnC,CAAP;;QACA,KAAKC,MAAL,CAAYsH,GAAZ,CAAgBvH,IAAhB;;QACAA,IAAI,GAAG,KAAKC,MAAL,CAAYkC,OAAZ,CAAoBnC,IAApB,CAAP;MACD,CAb8C,CAe/C;MACA;MACA;MACA;;;MACA,IAAIwH,eAAe,GAAG;QACpBjI,MAAM,EAAEA,MADY;QAEpBK,aAAa,EAAEN,OAAO,CAACM,aAAR,IACZ+G,OAAO,CAACL,eAAR,CAAwB1G,aAAxB,GAAwC,CAD5B,CAFK;QAIpBC,eAAe,EAAEP,OAAO,CAACO,eAAR,IACd8G,OAAO,CAACL,eAAR,CAAwB1G,aAAxB,KAA0CN,OAAO,CAACM,aAAlD,GACC+G,OAAO,CAACL,eAAR,CAAwBzG,eAAxB,GAA0C,CAD3C,GAEC,CAHa,CAJG;QAQpBC,YAAY,EAAER,OAAO,CAACQ,YARF;QASpBC,cAAc,EAAET,OAAO,CAACS,cATJ;QAUpBC,IAAI,EAAEA;MAVc,CAAtB;;MAaA,KAAK5C,mBAAL,CAAyB0D,IAAzB,CAA8B0G,eAA9B;;MACA,IAAI,OAAOA,eAAe,CAAC1H,YAAvB,KAAwC,QAA5C,EAAsD;QACpD,KAAKjC,kBAAL,CAAwBiD,IAAxB,CAA6B0G,eAA7B;MACD;IACF;EACF;;EAEDhL,SAAS,CAAC,KAAKY,mBAAN,EAA2BjB,IAAI,CAAC6H,mCAAhC,CAAT;EACAxH,SAAS,CAAC,KAAKqB,kBAAN,EAA0B1B,IAAI,CAACwE,0BAA/B,CAAT;AACD,CAhDH;;AAkDAK,OAAO,CAACjE,wBAAR,GAAmCA,wBAAnC"},"metadata":{},"sourceType":"script"}