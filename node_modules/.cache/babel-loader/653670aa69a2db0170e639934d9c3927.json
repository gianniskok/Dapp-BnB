{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst empty = new Uint8Array(0);\n\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\n\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\n\nconst equals = (aa, bb) => {\n  if (aa === bb) return true;\n\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o;\n  if (o instanceof ArrayBuffer) return new Uint8Array(o);\n\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n\n  throw new Error('Unknown type, must be binary type');\n};\n\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\n\nconst fromString = str => new TextEncoder().encode(str);\n\nconst toString = b => new TextDecoder().decode(b);\n\nexports.coerce = coerce;\nexports.empty = empty;\nexports.equals = equals;\nexports.fromHex = fromHex;\nexports.fromString = fromString;\nexports.isBinary = isBinary;\nexports.toHex = toHex;\nexports.toString = toString;","map":{"version":3,"names":["Object","defineProperty","exports","value","empty","Uint8Array","toHex","d","reduce","hex","byte","toString","padStart","fromHex","hexes","match","map","b","parseInt","equals","aa","bb","byteLength","ii","coerce","o","constructor","name","ArrayBuffer","isView","buffer","byteOffset","Error","isBinary","fromString","str","TextEncoder","encode","TextDecoder","decode"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/multiformats/cjs/src/bytes.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\n\nexports.coerce = coerce;\nexports.empty = empty;\nexports.equals = equals;\nexports.fromHex = fromHex;\nexports.fromString = fromString;\nexports.isBinary = isBinary;\nexports.toHex = toHex;\nexports.toString = toString;\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AAEA,MAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAd;;AACA,MAAMC,KAAK,GAAGC,CAAC,IAAIA,CAAC,CAACC,MAAF,CAAS,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAI,CAACC,QAAL,CAAc,EAAd,EAAkBC,QAAlB,CAA2B,CAA3B,EAA8B,GAA9B,CAA9B,EAAkE,EAAlE,CAAnB;;AACA,MAAMC,OAAO,GAAGJ,GAAG,IAAI;EACrB,MAAMK,KAAK,GAAGL,GAAG,CAACM,KAAJ,CAAU,KAAV,CAAd;EACA,OAAOD,KAAK,GAAG,IAAIT,UAAJ,CAAeS,KAAK,CAACE,GAAN,CAAUC,CAAC,IAAIC,QAAQ,CAACD,CAAD,EAAI,EAAJ,CAAvB,CAAf,CAAH,GAAqDb,KAAjE;AACD,CAHD;;AAIA,MAAMe,MAAM,GAAG,CAACC,EAAD,EAAKC,EAAL,KAAY;EACzB,IAAID,EAAE,KAAKC,EAAX,EACE,OAAO,IAAP;;EACF,IAAID,EAAE,CAACE,UAAH,KAAkBD,EAAE,CAACC,UAAzB,EAAqC;IACnC,OAAO,KAAP;EACD;;EACD,KAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGH,EAAE,CAACE,UAAzB,EAAqCC,EAAE,EAAvC,EAA2C;IACzC,IAAIH,EAAE,CAACG,EAAD,CAAF,KAAWF,EAAE,CAACE,EAAD,CAAjB,EAAuB;MACrB,OAAO,KAAP;IACD;EACF;;EACD,OAAO,IAAP;AACD,CAZD;;AAaA,MAAMC,MAAM,GAAGC,CAAC,IAAI;EAClB,IAAIA,CAAC,YAAYpB,UAAb,IAA2BoB,CAAC,CAACC,WAAF,CAAcC,IAAd,KAAuB,YAAtD,EACE,OAAOF,CAAP;EACF,IAAIA,CAAC,YAAYG,WAAjB,EACE,OAAO,IAAIvB,UAAJ,CAAeoB,CAAf,CAAP;;EACF,IAAIG,WAAW,CAACC,MAAZ,CAAmBJ,CAAnB,CAAJ,EAA2B;IACzB,OAAO,IAAIpB,UAAJ,CAAeoB,CAAC,CAACK,MAAjB,EAAyBL,CAAC,CAACM,UAA3B,EAAuCN,CAAC,CAACH,UAAzC,CAAP;EACD;;EACD,MAAM,IAAIU,KAAJ,CAAU,mCAAV,CAAN;AACD,CATD;;AAUA,MAAMC,QAAQ,GAAGR,CAAC,IAAIA,CAAC,YAAYG,WAAb,IAA4BA,WAAW,CAACC,MAAZ,CAAmBJ,CAAnB,CAAlD;;AACA,MAAMS,UAAU,GAAGC,GAAG,IAAI,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBF,GAAzB,CAA1B;;AACA,MAAMxB,QAAQ,GAAGM,CAAC,IAAI,IAAIqB,WAAJ,GAAkBC,MAAlB,CAAyBtB,CAAzB,CAAtB;;AAEAf,OAAO,CAACsB,MAAR,GAAiBA,MAAjB;AACAtB,OAAO,CAACE,KAAR,GAAgBA,KAAhB;AACAF,OAAO,CAACiB,MAAR,GAAiBA,MAAjB;AACAjB,OAAO,CAACW,OAAR,GAAkBA,OAAlB;AACAX,OAAO,CAACgC,UAAR,GAAqBA,UAArB;AACAhC,OAAO,CAAC+B,QAAR,GAAmBA,QAAnB;AACA/B,OAAO,CAACI,KAAR,GAAgBA,KAAhB;AACAJ,OAAO,CAACS,QAAR,GAAmBA,QAAnB"},"metadata":{},"sourceType":"script"}