{"ast":null,"code":"import { FSM, makeTransition } from \"@webassemblyjs/helper-fsm\";\nimport { codeFrameFromSource } from \"@webassemblyjs/helper-code-frame\"; // eslint-disable-next-line\n\nfunction getCodeFrame(source, line, column) {\n  var loc = {\n    start: {\n      line: line,\n      column: column\n    }\n  };\n  return \"\\n\" + codeFrameFromSource(source, loc) + \"\\n\";\n}\n\nvar WHITESPACE = /\\s/;\nvar PARENS = /\\(|\\)/;\nvar LETTERS = /[a-z0-9_/]/i;\nvar idchar = /[a-z0-9!#$%&*+./:<=>?@\\\\[\\]^_`|~-]/i;\nvar valtypes = [\"i32\", \"i64\", \"f32\", \"f64\"];\nvar NUMBERS = /[0-9|.|_]/;\nvar NUMBER_KEYWORDS = /nan|inf/;\n\nfunction isNewLine(char) {\n  return char.charCodeAt(0) === 10 || char.charCodeAt(0) === 13;\n}\n\nfunction Token(type, value, start, end) {\n  var opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var token = {\n    type: type,\n    value: value,\n    loc: {\n      start: start,\n      end: end\n    }\n  };\n\n  if (Object.keys(opts).length > 0) {\n    // $FlowIgnore\n    token[\"opts\"] = opts;\n  }\n\n  return token;\n}\n\nvar tokenTypes = {\n  openParen: \"openParen\",\n  closeParen: \"closeParen\",\n  number: \"number\",\n  string: \"string\",\n  name: \"name\",\n  identifier: \"identifier\",\n  valtype: \"valtype\",\n  dot: \"dot\",\n  comment: \"comment\",\n  equal: \"equal\",\n  keyword: \"keyword\"\n};\nexport var keywords = {\n  module: \"module\",\n  func: \"func\",\n  param: \"param\",\n  result: \"result\",\n  export: \"export\",\n  loop: \"loop\",\n  block: \"block\",\n  if: \"if\",\n  then: \"then\",\n  else: \"else\",\n  call: \"call\",\n  call_indirect: \"call_indirect\",\n  import: \"import\",\n  memory: \"memory\",\n  table: \"table\",\n  global: \"global\",\n  anyfunc: \"anyfunc\",\n  mut: \"mut\",\n  data: \"data\",\n  type: \"type\",\n  elem: \"elem\",\n  start: \"start\",\n  offset: \"offset\"\n};\nvar NUMERIC_SEPARATOR = \"_\";\n/**\n * Build the FSM for number literals\n */\n\nvar numberLiteralFSM = new FSM({\n  START: [makeTransition(/-|\\+/, \"AFTER_SIGN\"), makeTransition(/nan:0x/, \"NAN_HEX\", {\n    n: 6\n  }), makeTransition(/nan|inf/, \"STOP\", {\n    n: 3\n  }), makeTransition(/0x/, \"HEX\", {\n    n: 2\n  }), makeTransition(/[0-9]/, \"DEC\"), makeTransition(/\\./, \"DEC_FRAC\")],\n  AFTER_SIGN: [makeTransition(/nan:0x/, \"NAN_HEX\", {\n    n: 6\n  }), makeTransition(/nan|inf/, \"STOP\", {\n    n: 3\n  }), makeTransition(/0x/, \"HEX\", {\n    n: 2\n  }), makeTransition(/[0-9]/, \"DEC\"), makeTransition(/\\./, \"DEC_FRAC\")],\n  DEC_FRAC: [makeTransition(/[0-9]/, \"DEC_FRAC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/e|E/, \"DEC_SIGNED_EXP\")],\n  DEC: [makeTransition(/[0-9]/, \"DEC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/\\./, \"DEC_FRAC\"), makeTransition(/e|E/, \"DEC_SIGNED_EXP\")],\n  DEC_SIGNED_EXP: [makeTransition(/\\+|-/, \"DEC_EXP\"), makeTransition(/[0-9]/, \"DEC_EXP\")],\n  DEC_EXP: [makeTransition(/[0-9]/, \"DEC_EXP\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  HEX: [makeTransition(/[0-9|A-F|a-f]/, \"HEX\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/\\./, \"HEX_FRAC\"), makeTransition(/p|P/, \"HEX_SIGNED_EXP\")],\n  HEX_FRAC: [makeTransition(/[0-9|A-F|a-f]/, \"HEX_FRAC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/p|P|/, \"HEX_SIGNED_EXP\")],\n  HEX_SIGNED_EXP: [makeTransition(/[0-9|+|-]/, \"HEX_EXP\")],\n  HEX_EXP: [makeTransition(/[0-9]/, \"HEX_EXP\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  NAN_HEX: [makeTransition(/[0-9|A-F|a-f]/, \"NAN_HEX\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  STOP: []\n}, \"START\", \"STOP\");\nexport function tokenize(input) {\n  var current = 0;\n  var char = input[current]; // Used by SourceLocation\n\n  var column = 1;\n  var line = 1;\n  var tokens = [];\n  /**\n   * Creates a pushToken function for a given type\n   */\n\n  function pushToken(type) {\n    return function (v) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var startColumn = opts.startColumn || column - String(v).length;\n      delete opts.startColumn;\n      var endColumn = opts.endColumn || startColumn + String(v).length - 1;\n      delete opts.endColumn;\n      var start = {\n        line: line,\n        column: startColumn\n      };\n      var end = {\n        line: line,\n        column: endColumn\n      };\n      tokens.push(Token(type, v, start, end, opts));\n    };\n  }\n  /**\n   * Functions to save newly encountered tokens\n   */\n\n\n  var pushCloseParenToken = pushToken(tokenTypes.closeParen);\n  var pushOpenParenToken = pushToken(tokenTypes.openParen);\n  var pushNumberToken = pushToken(tokenTypes.number);\n  var pushValtypeToken = pushToken(tokenTypes.valtype);\n  var pushNameToken = pushToken(tokenTypes.name);\n  var pushIdentifierToken = pushToken(tokenTypes.identifier);\n  var pushKeywordToken = pushToken(tokenTypes.keyword);\n  var pushDotToken = pushToken(tokenTypes.dot);\n  var pushStringToken = pushToken(tokenTypes.string);\n  var pushCommentToken = pushToken(tokenTypes.comment);\n  var pushEqualToken = pushToken(tokenTypes.equal);\n  /**\n   * Can be used to look at the next character(s).\n   *\n   * The default behavior `lookahead()` simply returns the next character without consuming it.\n   * Letters are always returned in lowercase.\n   *\n   * @param {number} length How many characters to query. Default = 1\n   * @param {number} offset How many characters to skip forward from current one. Default = 1\n   *\n   */\n\n  function lookahead() {\n    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return input.substring(current + offset, current + offset + length).toLowerCase();\n  }\n  /**\n   * Advances the cursor in the input by a certain amount\n   *\n   * @param {number} amount How many characters to consume. Default = 1\n   */\n\n\n  function eatCharacter() {\n    var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    column += amount;\n    current += amount;\n    char = input[current];\n  }\n\n  while (current < input.length) {\n    // ;;\n    if (char === \";\" && lookahead() === \";\") {\n      var startColumn = column;\n      eatCharacter(2);\n      var text = \"\";\n\n      while (!isNewLine(char)) {\n        text += char;\n        eatCharacter();\n\n        if (char === undefined) {\n          break;\n        }\n      }\n\n      var endColumn = column;\n      pushCommentToken(text, {\n        type: \"leading\",\n        startColumn: startColumn,\n        endColumn: endColumn\n      });\n      continue;\n    } // (;\n\n\n    if (char === \"(\" && lookahead() === \";\") {\n      var _startColumn = column;\n      eatCharacter(2);\n      var _text = \"\"; // ;)\n\n      while (true) {\n        char = input[current];\n\n        if (char === \";\" && lookahead() === \")\") {\n          eatCharacter(2);\n          break;\n        }\n\n        _text += char;\n        eatCharacter();\n\n        if (isNewLine(char)) {\n          line++;\n          column = 0;\n        }\n      }\n\n      var _endColumn = column;\n      pushCommentToken(_text, {\n        type: \"block\",\n        startColumn: _startColumn,\n        endColumn: _endColumn\n      });\n      continue;\n    }\n\n    if (char === \"(\") {\n      pushOpenParenToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \"=\") {\n      pushEqualToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \")\") {\n      pushCloseParenToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (isNewLine(char)) {\n      line++;\n      eatCharacter();\n      column = 0;\n      continue;\n    }\n\n    if (WHITESPACE.test(char)) {\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \"$\") {\n      var _startColumn2 = column;\n      eatCharacter();\n      var value = \"\";\n\n      while (idchar.test(char)) {\n        value += char;\n        eatCharacter();\n      }\n\n      var _endColumn2 = column;\n      pushIdentifierToken(value, {\n        startColumn: _startColumn2,\n        endColumn: _endColumn2\n      });\n      continue;\n    }\n\n    if (NUMBERS.test(char) || NUMBER_KEYWORDS.test(lookahead(3, 0)) || char === \"-\" || char === \"+\") {\n      var _startColumn3 = column;\n\n      var _value = numberLiteralFSM.run(input.slice(current));\n\n      if (_value === \"\") {\n        throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n      }\n\n      pushNumberToken(_value, {\n        startColumn: _startColumn3\n      });\n      eatCharacter(_value.length);\n\n      if (char && !PARENS.test(char) && !WHITESPACE.test(char)) {\n        throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n      }\n\n      continue;\n    }\n\n    if (char === '\"') {\n      var _startColumn4 = column;\n      var _value2 = \"\";\n      eatCharacter(); // \"\n\n      while (char !== '\"') {\n        if (isNewLine(char)) {\n          throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n        }\n\n        _value2 += char;\n        eatCharacter(); // char\n      }\n\n      eatCharacter(); // \"\n\n      var _endColumn3 = column;\n      pushStringToken(_value2, {\n        startColumn: _startColumn4,\n        endColumn: _endColumn3\n      });\n      continue;\n    }\n\n    if (LETTERS.test(char)) {\n      var _value3 = \"\";\n      var _startColumn5 = column;\n\n      while (char && LETTERS.test(char)) {\n        _value3 += char;\n        eatCharacter();\n      }\n      /*\n       * Handle MemberAccess\n       */\n\n\n      if (char === \".\") {\n        var dotStartColumn = column;\n\n        if (valtypes.indexOf(_value3) !== -1) {\n          pushValtypeToken(_value3, {\n            startColumn: _startColumn5\n          });\n        } else {\n          pushNameToken(_value3);\n        }\n\n        eatCharacter();\n        _value3 = \"\";\n        var nameStartColumn = column;\n\n        while (LETTERS.test(char)) {\n          _value3 += char;\n          eatCharacter();\n        }\n\n        pushDotToken(\".\", {\n          startColumn: dotStartColumn\n        });\n        pushNameToken(_value3, {\n          startColumn: nameStartColumn\n        });\n        continue;\n      }\n      /*\n       * Handle keywords\n       */\n      // $FlowIgnore\n\n\n      if (typeof keywords[_value3] === \"string\") {\n        pushKeywordToken(_value3, {\n          startColumn: _startColumn5\n        });\n        continue;\n      }\n      /*\n       * Handle types\n       */\n\n\n      if (valtypes.indexOf(_value3) !== -1) {\n        pushValtypeToken(_value3, {\n          startColumn: _startColumn5\n        });\n        continue;\n      }\n      /*\n       * Handle literals\n       */\n\n\n      pushNameToken(_value3, {\n        startColumn: _startColumn5\n      });\n      continue;\n    }\n\n    throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n  }\n\n  return tokens;\n}\nexport var tokens = tokenTypes;","map":{"version":3,"names":["FSM","makeTransition","codeFrameFromSource","getCodeFrame","source","line","column","loc","start","WHITESPACE","PARENS","LETTERS","idchar","valtypes","NUMBERS","NUMBER_KEYWORDS","isNewLine","char","charCodeAt","Token","type","value","end","opts","arguments","length","undefined","token","Object","keys","tokenTypes","openParen","closeParen","number","string","name","identifier","valtype","dot","comment","equal","keyword","keywords","module","func","param","result","export","loop","block","if","then","else","call","call_indirect","import","memory","table","global","anyfunc","mut","data","elem","offset","NUMERIC_SEPARATOR","numberLiteralFSM","START","n","AFTER_SIGN","DEC_FRAC","allowedSeparator","DEC","DEC_SIGNED_EXP","DEC_EXP","HEX","HEX_FRAC","HEX_SIGNED_EXP","HEX_EXP","NAN_HEX","STOP","tokenize","input","current","tokens","pushToken","v","startColumn","String","endColumn","push","pushCloseParenToken","pushOpenParenToken","pushNumberToken","pushValtypeToken","pushNameToken","pushIdentifierToken","pushKeywordToken","pushDotToken","pushStringToken","pushCommentToken","pushEqualToken","lookahead","substring","toLowerCase","eatCharacter","amount","text","_startColumn","_text","_endColumn","test","_startColumn2","_endColumn2","_startColumn3","_value","run","slice","Error","JSON","stringify","_startColumn4","_value2","_endColumn3","_value3","_startColumn5","dotStartColumn","indexOf","nameStartColumn"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/@webassemblyjs/wast-parser/esm/tokenizer.js"],"sourcesContent":["import { FSM, makeTransition } from \"@webassemblyjs/helper-fsm\";\nimport { codeFrameFromSource } from \"@webassemblyjs/helper-code-frame\";\n\n// eslint-disable-next-line\nfunction getCodeFrame(source, line, column) {\n  var loc = {\n    start: {\n      line: line,\n      column: column\n    }\n  };\n  return \"\\n\" + codeFrameFromSource(source, loc) + \"\\n\";\n}\n\nvar WHITESPACE = /\\s/;\nvar PARENS = /\\(|\\)/;\nvar LETTERS = /[a-z0-9_/]/i;\nvar idchar = /[a-z0-9!#$%&*+./:<=>?@\\\\[\\]^_`|~-]/i;\nvar valtypes = [\"i32\", \"i64\", \"f32\", \"f64\"];\nvar NUMBERS = /[0-9|.|_]/;\nvar NUMBER_KEYWORDS = /nan|inf/;\n\nfunction isNewLine(char) {\n  return char.charCodeAt(0) === 10 || char.charCodeAt(0) === 13;\n}\n\nfunction Token(type, value, start, end) {\n  var opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var token = {\n    type: type,\n    value: value,\n    loc: {\n      start: start,\n      end: end\n    }\n  };\n\n  if (Object.keys(opts).length > 0) {\n    // $FlowIgnore\n    token[\"opts\"] = opts;\n  }\n\n  return token;\n}\n\nvar tokenTypes = {\n  openParen: \"openParen\",\n  closeParen: \"closeParen\",\n  number: \"number\",\n  string: \"string\",\n  name: \"name\",\n  identifier: \"identifier\",\n  valtype: \"valtype\",\n  dot: \"dot\",\n  comment: \"comment\",\n  equal: \"equal\",\n  keyword: \"keyword\"\n};\nexport var keywords = {\n  module: \"module\",\n  func: \"func\",\n  param: \"param\",\n  result: \"result\",\n  export: \"export\",\n  loop: \"loop\",\n  block: \"block\",\n  if: \"if\",\n  then: \"then\",\n  else: \"else\",\n  call: \"call\",\n  call_indirect: \"call_indirect\",\n  import: \"import\",\n  memory: \"memory\",\n  table: \"table\",\n  global: \"global\",\n  anyfunc: \"anyfunc\",\n  mut: \"mut\",\n  data: \"data\",\n  type: \"type\",\n  elem: \"elem\",\n  start: \"start\",\n  offset: \"offset\"\n};\nvar NUMERIC_SEPARATOR = \"_\";\n/**\n * Build the FSM for number literals\n */\n\nvar numberLiteralFSM = new FSM({\n  START: [makeTransition(/-|\\+/, \"AFTER_SIGN\"), makeTransition(/nan:0x/, \"NAN_HEX\", {\n    n: 6\n  }), makeTransition(/nan|inf/, \"STOP\", {\n    n: 3\n  }), makeTransition(/0x/, \"HEX\", {\n    n: 2\n  }), makeTransition(/[0-9]/, \"DEC\"), makeTransition(/\\./, \"DEC_FRAC\")],\n  AFTER_SIGN: [makeTransition(/nan:0x/, \"NAN_HEX\", {\n    n: 6\n  }), makeTransition(/nan|inf/, \"STOP\", {\n    n: 3\n  }), makeTransition(/0x/, \"HEX\", {\n    n: 2\n  }), makeTransition(/[0-9]/, \"DEC\"), makeTransition(/\\./, \"DEC_FRAC\")],\n  DEC_FRAC: [makeTransition(/[0-9]/, \"DEC_FRAC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/e|E/, \"DEC_SIGNED_EXP\")],\n  DEC: [makeTransition(/[0-9]/, \"DEC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/\\./, \"DEC_FRAC\"), makeTransition(/e|E/, \"DEC_SIGNED_EXP\")],\n  DEC_SIGNED_EXP: [makeTransition(/\\+|-/, \"DEC_EXP\"), makeTransition(/[0-9]/, \"DEC_EXP\")],\n  DEC_EXP: [makeTransition(/[0-9]/, \"DEC_EXP\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  HEX: [makeTransition(/[0-9|A-F|a-f]/, \"HEX\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/\\./, \"HEX_FRAC\"), makeTransition(/p|P/, \"HEX_SIGNED_EXP\")],\n  HEX_FRAC: [makeTransition(/[0-9|A-F|a-f]/, \"HEX_FRAC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/p|P|/, \"HEX_SIGNED_EXP\")],\n  HEX_SIGNED_EXP: [makeTransition(/[0-9|+|-]/, \"HEX_EXP\")],\n  HEX_EXP: [makeTransition(/[0-9]/, \"HEX_EXP\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  NAN_HEX: [makeTransition(/[0-9|A-F|a-f]/, \"NAN_HEX\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  STOP: []\n}, \"START\", \"STOP\");\nexport function tokenize(input) {\n  var current = 0;\n  var char = input[current]; // Used by SourceLocation\n\n  var column = 1;\n  var line = 1;\n  var tokens = [];\n  /**\n   * Creates a pushToken function for a given type\n   */\n\n  function pushToken(type) {\n    return function (v) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var startColumn = opts.startColumn || column - String(v).length;\n      delete opts.startColumn;\n      var endColumn = opts.endColumn || startColumn + String(v).length - 1;\n      delete opts.endColumn;\n      var start = {\n        line: line,\n        column: startColumn\n      };\n      var end = {\n        line: line,\n        column: endColumn\n      };\n      tokens.push(Token(type, v, start, end, opts));\n    };\n  }\n  /**\n   * Functions to save newly encountered tokens\n   */\n\n\n  var pushCloseParenToken = pushToken(tokenTypes.closeParen);\n  var pushOpenParenToken = pushToken(tokenTypes.openParen);\n  var pushNumberToken = pushToken(tokenTypes.number);\n  var pushValtypeToken = pushToken(tokenTypes.valtype);\n  var pushNameToken = pushToken(tokenTypes.name);\n  var pushIdentifierToken = pushToken(tokenTypes.identifier);\n  var pushKeywordToken = pushToken(tokenTypes.keyword);\n  var pushDotToken = pushToken(tokenTypes.dot);\n  var pushStringToken = pushToken(tokenTypes.string);\n  var pushCommentToken = pushToken(tokenTypes.comment);\n  var pushEqualToken = pushToken(tokenTypes.equal);\n  /**\n   * Can be used to look at the next character(s).\n   *\n   * The default behavior `lookahead()` simply returns the next character without consuming it.\n   * Letters are always returned in lowercase.\n   *\n   * @param {number} length How many characters to query. Default = 1\n   * @param {number} offset How many characters to skip forward from current one. Default = 1\n   *\n   */\n\n  function lookahead() {\n    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return input.substring(current + offset, current + offset + length).toLowerCase();\n  }\n  /**\n   * Advances the cursor in the input by a certain amount\n   *\n   * @param {number} amount How many characters to consume. Default = 1\n   */\n\n\n  function eatCharacter() {\n    var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    column += amount;\n    current += amount;\n    char = input[current];\n  }\n\n  while (current < input.length) {\n    // ;;\n    if (char === \";\" && lookahead() === \";\") {\n      var startColumn = column;\n      eatCharacter(2);\n      var text = \"\";\n\n      while (!isNewLine(char)) {\n        text += char;\n        eatCharacter();\n\n        if (char === undefined) {\n          break;\n        }\n      }\n\n      var endColumn = column;\n      pushCommentToken(text, {\n        type: \"leading\",\n        startColumn: startColumn,\n        endColumn: endColumn\n      });\n      continue;\n    } // (;\n\n\n    if (char === \"(\" && lookahead() === \";\") {\n      var _startColumn = column;\n      eatCharacter(2);\n      var _text = \"\"; // ;)\n\n      while (true) {\n        char = input[current];\n\n        if (char === \";\" && lookahead() === \")\") {\n          eatCharacter(2);\n          break;\n        }\n\n        _text += char;\n        eatCharacter();\n\n        if (isNewLine(char)) {\n          line++;\n          column = 0;\n        }\n      }\n\n      var _endColumn = column;\n      pushCommentToken(_text, {\n        type: \"block\",\n        startColumn: _startColumn,\n        endColumn: _endColumn\n      });\n      continue;\n    }\n\n    if (char === \"(\") {\n      pushOpenParenToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \"=\") {\n      pushEqualToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \")\") {\n      pushCloseParenToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (isNewLine(char)) {\n      line++;\n      eatCharacter();\n      column = 0;\n      continue;\n    }\n\n    if (WHITESPACE.test(char)) {\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \"$\") {\n      var _startColumn2 = column;\n      eatCharacter();\n      var value = \"\";\n\n      while (idchar.test(char)) {\n        value += char;\n        eatCharacter();\n      }\n\n      var _endColumn2 = column;\n      pushIdentifierToken(value, {\n        startColumn: _startColumn2,\n        endColumn: _endColumn2\n      });\n      continue;\n    }\n\n    if (NUMBERS.test(char) || NUMBER_KEYWORDS.test(lookahead(3, 0)) || char === \"-\" || char === \"+\") {\n      var _startColumn3 = column;\n\n      var _value = numberLiteralFSM.run(input.slice(current));\n\n      if (_value === \"\") {\n        throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n      }\n\n      pushNumberToken(_value, {\n        startColumn: _startColumn3\n      });\n      eatCharacter(_value.length);\n\n      if (char && !PARENS.test(char) && !WHITESPACE.test(char)) {\n        throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n      }\n\n      continue;\n    }\n\n    if (char === '\"') {\n      var _startColumn4 = column;\n      var _value2 = \"\";\n      eatCharacter(); // \"\n\n      while (char !== '\"') {\n        if (isNewLine(char)) {\n          throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n        }\n\n        _value2 += char;\n        eatCharacter(); // char\n      }\n\n      eatCharacter(); // \"\n\n      var _endColumn3 = column;\n      pushStringToken(_value2, {\n        startColumn: _startColumn4,\n        endColumn: _endColumn3\n      });\n      continue;\n    }\n\n    if (LETTERS.test(char)) {\n      var _value3 = \"\";\n      var _startColumn5 = column;\n\n      while (char && LETTERS.test(char)) {\n        _value3 += char;\n        eatCharacter();\n      }\n      /*\n       * Handle MemberAccess\n       */\n\n\n      if (char === \".\") {\n        var dotStartColumn = column;\n\n        if (valtypes.indexOf(_value3) !== -1) {\n          pushValtypeToken(_value3, {\n            startColumn: _startColumn5\n          });\n        } else {\n          pushNameToken(_value3);\n        }\n\n        eatCharacter();\n        _value3 = \"\";\n        var nameStartColumn = column;\n\n        while (LETTERS.test(char)) {\n          _value3 += char;\n          eatCharacter();\n        }\n\n        pushDotToken(\".\", {\n          startColumn: dotStartColumn\n        });\n        pushNameToken(_value3, {\n          startColumn: nameStartColumn\n        });\n        continue;\n      }\n      /*\n       * Handle keywords\n       */\n      // $FlowIgnore\n\n\n      if (typeof keywords[_value3] === \"string\") {\n        pushKeywordToken(_value3, {\n          startColumn: _startColumn5\n        });\n        continue;\n      }\n      /*\n       * Handle types\n       */\n\n\n      if (valtypes.indexOf(_value3) !== -1) {\n        pushValtypeToken(_value3, {\n          startColumn: _startColumn5\n        });\n        continue;\n      }\n      /*\n       * Handle literals\n       */\n\n\n      pushNameToken(_value3, {\n        startColumn: _startColumn5\n      });\n      continue;\n    }\n\n    throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n  }\n\n  return tokens;\n}\nexport var tokens = tokenTypes;"],"mappings":"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"},"metadata":{},"sourceType":"module"}