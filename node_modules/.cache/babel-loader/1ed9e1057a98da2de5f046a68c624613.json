{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RequireContextDependency = require(\"./RequireContextDependency\");\n\nmodule.exports = class RequireContextDependencyParserPlugin {\n  apply(parser) {\n    parser.hooks.call.for(\"require.context\").tap(\"RequireContextDependencyParserPlugin\", expr => {\n      let regExp = /^\\.\\/.*$/;\n      let recursive = true;\n      let mode = \"sync\";\n\n      switch (expr.arguments.length) {\n        case 4:\n          {\n            const modeExpr = parser.evaluateExpression(expr.arguments[3]);\n            if (!modeExpr.isString()) return;\n            mode = modeExpr.string;\n          }\n        // falls through\n\n        case 3:\n          {\n            const regExpExpr = parser.evaluateExpression(expr.arguments[2]);\n            if (!regExpExpr.isRegExp()) return;\n            regExp = regExpExpr.regExp;\n          }\n        // falls through\n\n        case 2:\n          {\n            const recursiveExpr = parser.evaluateExpression(expr.arguments[1]);\n            if (!recursiveExpr.isBoolean()) return;\n            recursive = recursiveExpr.bool;\n          }\n        // falls through\n\n        case 1:\n          {\n            const requestExpr = parser.evaluateExpression(expr.arguments[0]);\n            if (!requestExpr.isString()) return;\n            const dep = new RequireContextDependency({\n              request: requestExpr.string,\n              recursive,\n              regExp,\n              mode\n            }, expr.range);\n            dep.loc = expr.loc;\n            dep.optional = parser.scope.inTry;\n            parser.state.current.addDependency(dep);\n            return true;\n          }\n      }\n    });\n  }\n\n};","map":{"version":3,"names":["RequireContextDependency","require","module","exports","RequireContextDependencyParserPlugin","apply","parser","hooks","call","for","tap","expr","regExp","recursive","mode","arguments","length","modeExpr","evaluateExpression","isString","string","regExpExpr","isRegExp","recursiveExpr","isBoolean","bool","requestExpr","dep","request","range","loc","optional","scope","inTry","state","current","addDependency"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/dependencies/RequireContextDependencyParserPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RequireContextDependency = require(\"./RequireContextDependency\");\n\nmodule.exports = class RequireContextDependencyParserPlugin {\n\tapply(parser) {\n\t\tparser.hooks.call\n\t\t\t.for(\"require.context\")\n\t\t\t.tap(\"RequireContextDependencyParserPlugin\", expr => {\n\t\t\t\tlet regExp = /^\\.\\/.*$/;\n\t\t\t\tlet recursive = true;\n\t\t\t\tlet mode = \"sync\";\n\t\t\t\tswitch (expr.arguments.length) {\n\t\t\t\t\tcase 4: {\n\t\t\t\t\t\tconst modeExpr = parser.evaluateExpression(expr.arguments[3]);\n\t\t\t\t\t\tif (!modeExpr.isString()) return;\n\t\t\t\t\t\tmode = modeExpr.string;\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\t\tcase 3: {\n\t\t\t\t\t\tconst regExpExpr = parser.evaluateExpression(expr.arguments[2]);\n\t\t\t\t\t\tif (!regExpExpr.isRegExp()) return;\n\t\t\t\t\t\tregExp = regExpExpr.regExp;\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\t\tcase 2: {\n\t\t\t\t\t\tconst recursiveExpr = parser.evaluateExpression(expr.arguments[1]);\n\t\t\t\t\t\tif (!recursiveExpr.isBoolean()) return;\n\t\t\t\t\t\trecursive = recursiveExpr.bool;\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\t\tcase 1: {\n\t\t\t\t\t\tconst requestExpr = parser.evaluateExpression(expr.arguments[0]);\n\t\t\t\t\t\tif (!requestExpr.isString()) return;\n\t\t\t\t\t\tconst dep = new RequireContextDependency(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trequest: requestExpr.string,\n\t\t\t\t\t\t\t\trecursive,\n\t\t\t\t\t\t\t\tregExp,\n\t\t\t\t\t\t\t\tmode\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\texpr.range\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\tdep.optional = parser.scope.inTry;\n\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,wBAAwB,GAAGC,OAAO,CAAC,4BAAD,CAAxC;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,oCAAN,CAA2C;EAC3DC,KAAK,CAACC,MAAD,EAAS;IACbA,MAAM,CAACC,KAAP,CAAaC,IAAb,CACEC,GADF,CACM,iBADN,EAEEC,GAFF,CAEM,sCAFN,EAE8CC,IAAI,IAAI;MACpD,IAAIC,MAAM,GAAG,UAAb;MACA,IAAIC,SAAS,GAAG,IAAhB;MACA,IAAIC,IAAI,GAAG,MAAX;;MACA,QAAQH,IAAI,CAACI,SAAL,CAAeC,MAAvB;QACC,KAAK,CAAL;UAAQ;YACP,MAAMC,QAAQ,GAAGX,MAAM,CAACY,kBAAP,CAA0BP,IAAI,CAACI,SAAL,CAAe,CAAf,CAA1B,CAAjB;YACA,IAAI,CAACE,QAAQ,CAACE,QAAT,EAAL,EAA0B;YAC1BL,IAAI,GAAGG,QAAQ,CAACG,MAAhB;UACA;QACD;;QACA,KAAK,CAAL;UAAQ;YACP,MAAMC,UAAU,GAAGf,MAAM,CAACY,kBAAP,CAA0BP,IAAI,CAACI,SAAL,CAAe,CAAf,CAA1B,CAAnB;YACA,IAAI,CAACM,UAAU,CAACC,QAAX,EAAL,EAA4B;YAC5BV,MAAM,GAAGS,UAAU,CAACT,MAApB;UACA;QACD;;QACA,KAAK,CAAL;UAAQ;YACP,MAAMW,aAAa,GAAGjB,MAAM,CAACY,kBAAP,CAA0BP,IAAI,CAACI,SAAL,CAAe,CAAf,CAA1B,CAAtB;YACA,IAAI,CAACQ,aAAa,CAACC,SAAd,EAAL,EAAgC;YAChCX,SAAS,GAAGU,aAAa,CAACE,IAA1B;UACA;QACD;;QACA,KAAK,CAAL;UAAQ;YACP,MAAMC,WAAW,GAAGpB,MAAM,CAACY,kBAAP,CAA0BP,IAAI,CAACI,SAAL,CAAe,CAAf,CAA1B,CAApB;YACA,IAAI,CAACW,WAAW,CAACP,QAAZ,EAAL,EAA6B;YAC7B,MAAMQ,GAAG,GAAG,IAAI3B,wBAAJ,CACX;cACC4B,OAAO,EAAEF,WAAW,CAACN,MADtB;cAECP,SAFD;cAGCD,MAHD;cAICE;YAJD,CADW,EAOXH,IAAI,CAACkB,KAPM,CAAZ;YASAF,GAAG,CAACG,GAAJ,GAAUnB,IAAI,CAACmB,GAAf;YACAH,GAAG,CAACI,QAAJ,GAAezB,MAAM,CAAC0B,KAAP,CAAaC,KAA5B;YACA3B,MAAM,CAAC4B,KAAP,CAAaC,OAAb,CAAqBC,aAArB,CAAmCT,GAAnC;YACA,OAAO,IAAP;UACA;MAnCF;IAqCA,CA3CF;EA4CA;;AA9C0D,CAA5D"},"metadata":{},"sourceType":"script"}