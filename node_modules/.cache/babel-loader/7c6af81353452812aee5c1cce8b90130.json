{"ast":null,"code":"'use strict';\n\nvar MissingRefError = require('./error_classes').MissingRef;\n\nmodule.exports = compileAsync;\n/**\n * Creates validating function for passed schema with asynchronous loading of missing schemas.\n * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\n * @this  Ajv\n * @param {Object}   schema schema object\n * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped\n * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.\n * @return {Promise} promise that resolves with a validating function.\n */\n\nfunction compileAsync(schema, meta, callback) {\n  /* eslint no-shadow: 0 */\n\n  /* global Promise */\n\n  /* jshint validthis: true */\n  var self = this;\n  if (typeof this._opts.loadSchema != 'function') throw new Error('options.loadSchema should be a function');\n\n  if (typeof meta == 'function') {\n    callback = meta;\n    meta = undefined;\n  }\n\n  var p = loadMetaSchemaOf(schema).then(function () {\n    var schemaObj = self._addSchema(schema, undefined, meta);\n\n    return schemaObj.validate || _compileAsync(schemaObj);\n  });\n\n  if (callback) {\n    p.then(function (v) {\n      callback(null, v);\n    }, callback);\n  }\n\n  return p;\n\n  function loadMetaSchemaOf(sch) {\n    var $schema = sch.$schema;\n    return $schema && !self.getSchema($schema) ? compileAsync.call(self, {\n      $ref: $schema\n    }, true) : Promise.resolve();\n  }\n\n  function _compileAsync(schemaObj) {\n    try {\n      return self._compile(schemaObj);\n    } catch (e) {\n      if (e instanceof MissingRefError) return loadMissingSchema(e);\n      throw e;\n    }\n\n    function loadMissingSchema(e) {\n      var ref = e.missingSchema;\n      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');\n      var schemaPromise = self._loadingSchemas[ref];\n\n      if (!schemaPromise) {\n        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);\n        schemaPromise.then(removePromise, removePromise);\n      }\n\n      return schemaPromise.then(function (sch) {\n        if (!added(ref)) {\n          return loadMetaSchemaOf(sch).then(function () {\n            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);\n          });\n        }\n      }).then(function () {\n        return _compileAsync(schemaObj);\n      });\n\n      function removePromise() {\n        delete self._loadingSchemas[ref];\n      }\n\n      function added(ref) {\n        return self._refs[ref] || self._schemas[ref];\n      }\n    }\n  }\n}","map":{"version":3,"names":["MissingRefError","require","MissingRef","module","exports","compileAsync","schema","meta","callback","self","_opts","loadSchema","Error","undefined","p","loadMetaSchemaOf","then","schemaObj","_addSchema","validate","_compileAsync","v","sch","$schema","getSchema","call","$ref","Promise","resolve","_compile","e","loadMissingSchema","ref","missingSchema","added","missingRef","schemaPromise","_loadingSchemas","removePromise","addSchema","_refs","_schemas"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ajv/lib/compile/async.js"],"sourcesContent":["'use strict';\n\nvar MissingRefError = require('./error_classes').MissingRef;\n\nmodule.exports = compileAsync;\n\n\n/**\n * Creates validating function for passed schema with asynchronous loading of missing schemas.\n * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\n * @this  Ajv\n * @param {Object}   schema schema object\n * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped\n * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.\n * @return {Promise} promise that resolves with a validating function.\n */\nfunction compileAsync(schema, meta, callback) {\n  /* eslint no-shadow: 0 */\n  /* global Promise */\n  /* jshint validthis: true */\n  var self = this;\n  if (typeof this._opts.loadSchema != 'function')\n    throw new Error('options.loadSchema should be a function');\n\n  if (typeof meta == 'function') {\n    callback = meta;\n    meta = undefined;\n  }\n\n  var p = loadMetaSchemaOf(schema).then(function () {\n    var schemaObj = self._addSchema(schema, undefined, meta);\n    return schemaObj.validate || _compileAsync(schemaObj);\n  });\n\n  if (callback) {\n    p.then(\n      function(v) { callback(null, v); },\n      callback\n    );\n  }\n\n  return p;\n\n\n  function loadMetaSchemaOf(sch) {\n    var $schema = sch.$schema;\n    return $schema && !self.getSchema($schema)\n            ? compileAsync.call(self, { $ref: $schema }, true)\n            : Promise.resolve();\n  }\n\n\n  function _compileAsync(schemaObj) {\n    try { return self._compile(schemaObj); }\n    catch(e) {\n      if (e instanceof MissingRefError) return loadMissingSchema(e);\n      throw e;\n    }\n\n\n    function loadMissingSchema(e) {\n      var ref = e.missingSchema;\n      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');\n\n      var schemaPromise = self._loadingSchemas[ref];\n      if (!schemaPromise) {\n        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);\n        schemaPromise.then(removePromise, removePromise);\n      }\n\n      return schemaPromise.then(function (sch) {\n        if (!added(ref)) {\n          return loadMetaSchemaOf(sch).then(function () {\n            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);\n          });\n        }\n      }).then(function() {\n        return _compileAsync(schemaObj);\n      });\n\n      function removePromise() {\n        delete self._loadingSchemas[ref];\n      }\n\n      function added(ref) {\n        return self._refs[ref] || self._schemas[ref];\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}