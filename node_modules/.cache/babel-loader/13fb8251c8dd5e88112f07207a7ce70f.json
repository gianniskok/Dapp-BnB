{"ast":null,"code":"'use strict';\n\nconst toCamel = require('./lib/object-to-camel');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst configure = require('./lib/configure');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    const output = { ...toCamel(data)\n    };\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((\n      /** @type {string} */\n      ma) => new Multiaddr(ma));\n    } // @ts-ignore server output is not typed\n\n\n    return output;\n  }\n\n  return id;\n});","map":{"version":3,"names":["toCamel","require","Multiaddr","configure","toUrlSearchParams","module","exports","api","id","options","res","post","signal","searchParams","arg","peerId","toString","undefined","headers","data","json","output","addresses","map","ma"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/id.js"],"sourcesContent":["'use strict'\n\nconst toCamel = require('./lib/object-to-camel')\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...toCamel(data)\n    }\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => new Multiaddr(ma))\n    }\n\n    // @ts-ignore server output is not typed\n    return output\n  }\n  return id\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,uBAAD,CAAvB;;AACA,MAAM;EAAEC;AAAF,IAAgBD,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,4BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,EAAf,GAAiC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC/B,MAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,IAAT,EAAe;MAC/BC,MAAM,EAAEH,OAAO,CAACG,MADe;MAE/BC,YAAY,EAAET,iBAAiB,CAAC;QAC9BU,GAAG,EAAEL,OAAO,CAACM,MAAR,GAAiBN,OAAO,CAACM,MAAR,CAAeC,QAAf,EAAjB,GAA6CC,SADpB;QAE9B,GAAGR;MAF2B,CAAD,CAFA;MAM/BS,OAAO,EAAET,OAAO,CAACS;IANc,CAAf,CAAlB;IAQA,MAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAJ,EAAnB;IAEA,MAAMC,MAAM,GAAG,EACb,GAAGrB,OAAO,CAACmB,IAAD;IADG,CAAf;;IAIA,IAAIE,MAAM,CAACC,SAAX,EAAsB;MACpBD,MAAM,CAACC,SAAP,GAAmBD,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqB;MAAC;MAAsBC,EAAvB,KAA8B,IAAItB,SAAJ,CAAcsB,EAAd,CAAnD,CAAnB;IACD,CAjB8B,CAmB/B;;;IACA,OAAOH,MAAP;EACD;;EACD,OAAOb,EAAP;AACD,CA3ByB,CAA1B"},"metadata":{},"sourceType":"script"}