{"ast":null,"code":"import Long from \"@xtuc/long\";\nimport parseHexFloat from \"@webassemblyjs/floating-point-hex-parser\";\nimport { CompileError } from \"@webassemblyjs/helper-api-error\";\nexport function parse32F(sourceString) {\n  if (isHexLiteral(sourceString)) {\n    return parseHexFloat(sourceString);\n  }\n\n  if (isInfLiteral(sourceString)) {\n    return sourceString[0] === \"-\" ? -1 : 1;\n  }\n\n  if (isNanLiteral(sourceString)) {\n    return (sourceString[0] === \"-\" ? -1 : 1) * (sourceString.includes(\":\") ? parseInt(sourceString.substring(sourceString.indexOf(\":\") + 1), 16) : 0x400000);\n  }\n\n  return parseFloat(sourceString);\n}\nexport function parse64F(sourceString) {\n  if (isHexLiteral(sourceString)) {\n    return parseHexFloat(sourceString);\n  }\n\n  if (isInfLiteral(sourceString)) {\n    return sourceString[0] === \"-\" ? -1 : 1;\n  }\n\n  if (isNanLiteral(sourceString)) {\n    return (sourceString[0] === \"-\" ? -1 : 1) * (sourceString.includes(\":\") ? parseInt(sourceString.substring(sourceString.indexOf(\":\") + 1), 16) : 0x8000000000000);\n  }\n\n  if (isHexLiteral(sourceString)) {\n    return parseHexFloat(sourceString);\n  }\n\n  return parseFloat(sourceString);\n}\nexport function parse32I(sourceString) {\n  var value = 0;\n\n  if (isHexLiteral(sourceString)) {\n    value = ~~parseInt(sourceString, 16);\n  } else if (isDecimalExponentLiteral(sourceString)) {\n    throw new Error(\"This number literal format is yet to be implemented.\");\n  } else {\n    value = parseInt(sourceString, 10);\n  }\n\n  return value;\n}\nexport function parseU32(sourceString) {\n  var value = parse32I(sourceString);\n\n  if (value < 0) {\n    throw new CompileError(\"Illegal value for u32: \" + sourceString);\n  }\n\n  return value;\n}\nexport function parse64I(sourceString) {\n  var long;\n\n  if (isHexLiteral(sourceString)) {\n    long = Long.fromString(sourceString, false, 16);\n  } else if (isDecimalExponentLiteral(sourceString)) {\n    throw new Error(\"This number literal format is yet to be implemented.\");\n  } else {\n    long = Long.fromString(sourceString);\n  }\n\n  return {\n    high: long.high,\n    low: long.low\n  };\n}\nvar NAN_WORD = /^\\+?-?nan/;\nvar INF_WORD = /^\\+?-?inf/;\nexport function isInfLiteral(sourceString) {\n  return INF_WORD.test(sourceString.toLowerCase());\n}\nexport function isNanLiteral(sourceString) {\n  return NAN_WORD.test(sourceString.toLowerCase());\n}\n\nfunction isDecimalExponentLiteral(sourceString) {\n  return !isHexLiteral(sourceString) && sourceString.toUpperCase().includes(\"E\");\n}\n\nfunction isHexLiteral(sourceString) {\n  return sourceString.substring(0, 2).toUpperCase() === \"0X\" || sourceString.substring(0, 3).toUpperCase() === \"-0X\";\n}","map":{"version":3,"names":["Long","parseHexFloat","CompileError","parse32F","sourceString","isHexLiteral","isInfLiteral","isNanLiteral","includes","parseInt","substring","indexOf","parseFloat","parse64F","parse32I","value","isDecimalExponentLiteral","Error","parseU32","parse64I","long","fromString","high","low","NAN_WORD","INF_WORD","test","toLowerCase","toUpperCase"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/@webassemblyjs/wast-parser/esm/number-literals.js"],"sourcesContent":["import Long from \"@xtuc/long\";\nimport parseHexFloat from \"@webassemblyjs/floating-point-hex-parser\";\nimport { CompileError } from \"@webassemblyjs/helper-api-error\";\nexport function parse32F(sourceString) {\n  if (isHexLiteral(sourceString)) {\n    return parseHexFloat(sourceString);\n  }\n\n  if (isInfLiteral(sourceString)) {\n    return sourceString[0] === \"-\" ? -1 : 1;\n  }\n\n  if (isNanLiteral(sourceString)) {\n    return (sourceString[0] === \"-\" ? -1 : 1) * (sourceString.includes(\":\") ? parseInt(sourceString.substring(sourceString.indexOf(\":\") + 1), 16) : 0x400000);\n  }\n\n  return parseFloat(sourceString);\n}\nexport function parse64F(sourceString) {\n  if (isHexLiteral(sourceString)) {\n    return parseHexFloat(sourceString);\n  }\n\n  if (isInfLiteral(sourceString)) {\n    return sourceString[0] === \"-\" ? -1 : 1;\n  }\n\n  if (isNanLiteral(sourceString)) {\n    return (sourceString[0] === \"-\" ? -1 : 1) * (sourceString.includes(\":\") ? parseInt(sourceString.substring(sourceString.indexOf(\":\") + 1), 16) : 0x8000000000000);\n  }\n\n  if (isHexLiteral(sourceString)) {\n    return parseHexFloat(sourceString);\n  }\n\n  return parseFloat(sourceString);\n}\nexport function parse32I(sourceString) {\n  var value = 0;\n\n  if (isHexLiteral(sourceString)) {\n    value = ~~parseInt(sourceString, 16);\n  } else if (isDecimalExponentLiteral(sourceString)) {\n    throw new Error(\"This number literal format is yet to be implemented.\");\n  } else {\n    value = parseInt(sourceString, 10);\n  }\n\n  return value;\n}\nexport function parseU32(sourceString) {\n  var value = parse32I(sourceString);\n\n  if (value < 0) {\n    throw new CompileError(\"Illegal value for u32: \" + sourceString);\n  }\n\n  return value;\n}\nexport function parse64I(sourceString) {\n  var long;\n\n  if (isHexLiteral(sourceString)) {\n    long = Long.fromString(sourceString, false, 16);\n  } else if (isDecimalExponentLiteral(sourceString)) {\n    throw new Error(\"This number literal format is yet to be implemented.\");\n  } else {\n    long = Long.fromString(sourceString);\n  }\n\n  return {\n    high: long.high,\n    low: long.low\n  };\n}\nvar NAN_WORD = /^\\+?-?nan/;\nvar INF_WORD = /^\\+?-?inf/;\nexport function isInfLiteral(sourceString) {\n  return INF_WORD.test(sourceString.toLowerCase());\n}\nexport function isNanLiteral(sourceString) {\n  return NAN_WORD.test(sourceString.toLowerCase());\n}\n\nfunction isDecimalExponentLiteral(sourceString) {\n  return !isHexLiteral(sourceString) && sourceString.toUpperCase().includes(\"E\");\n}\n\nfunction isHexLiteral(sourceString) {\n  return sourceString.substring(0, 2).toUpperCase() === \"0X\" || sourceString.substring(0, 3).toUpperCase() === \"-0X\";\n}"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,OAAO,SAASC,QAAT,CAAkBC,YAAlB,EAAgC;EACrC,IAAIC,YAAY,CAACD,YAAD,CAAhB,EAAgC;IAC9B,OAAOH,aAAa,CAACG,YAAD,CAApB;EACD;;EAED,IAAIE,YAAY,CAACF,YAAD,CAAhB,EAAgC;IAC9B,OAAOA,YAAY,CAAC,CAAD,CAAZ,KAAoB,GAApB,GAA0B,CAAC,CAA3B,GAA+B,CAAtC;EACD;;EAED,IAAIG,YAAY,CAACH,YAAD,CAAhB,EAAgC;IAC9B,OAAO,CAACA,YAAY,CAAC,CAAD,CAAZ,KAAoB,GAApB,GAA0B,CAAC,CAA3B,GAA+B,CAAhC,KAAsCA,YAAY,CAACI,QAAb,CAAsB,GAAtB,IAA6BC,QAAQ,CAACL,YAAY,CAACM,SAAb,CAAuBN,YAAY,CAACO,OAAb,CAAqB,GAArB,IAA4B,CAAnD,CAAD,EAAwD,EAAxD,CAArC,GAAmG,QAAzI,CAAP;EACD;;EAED,OAAOC,UAAU,CAACR,YAAD,CAAjB;AACD;AACD,OAAO,SAASS,QAAT,CAAkBT,YAAlB,EAAgC;EACrC,IAAIC,YAAY,CAACD,YAAD,CAAhB,EAAgC;IAC9B,OAAOH,aAAa,CAACG,YAAD,CAApB;EACD;;EAED,IAAIE,YAAY,CAACF,YAAD,CAAhB,EAAgC;IAC9B,OAAOA,YAAY,CAAC,CAAD,CAAZ,KAAoB,GAApB,GAA0B,CAAC,CAA3B,GAA+B,CAAtC;EACD;;EAED,IAAIG,YAAY,CAACH,YAAD,CAAhB,EAAgC;IAC9B,OAAO,CAACA,YAAY,CAAC,CAAD,CAAZ,KAAoB,GAApB,GAA0B,CAAC,CAA3B,GAA+B,CAAhC,KAAsCA,YAAY,CAACI,QAAb,CAAsB,GAAtB,IAA6BC,QAAQ,CAACL,YAAY,CAACM,SAAb,CAAuBN,YAAY,CAACO,OAAb,CAAqB,GAArB,IAA4B,CAAnD,CAAD,EAAwD,EAAxD,CAArC,GAAmG,eAAzI,CAAP;EACD;;EAED,IAAIN,YAAY,CAACD,YAAD,CAAhB,EAAgC;IAC9B,OAAOH,aAAa,CAACG,YAAD,CAApB;EACD;;EAED,OAAOQ,UAAU,CAACR,YAAD,CAAjB;AACD;AACD,OAAO,SAASU,QAAT,CAAkBV,YAAlB,EAAgC;EACrC,IAAIW,KAAK,GAAG,CAAZ;;EAEA,IAAIV,YAAY,CAACD,YAAD,CAAhB,EAAgC;IAC9BW,KAAK,GAAG,CAAC,CAACN,QAAQ,CAACL,YAAD,EAAe,EAAf,CAAlB;EACD,CAFD,MAEO,IAAIY,wBAAwB,CAACZ,YAAD,CAA5B,EAA4C;IACjD,MAAM,IAAIa,KAAJ,CAAU,sDAAV,CAAN;EACD,CAFM,MAEA;IACLF,KAAK,GAAGN,QAAQ,CAACL,YAAD,EAAe,EAAf,CAAhB;EACD;;EAED,OAAOW,KAAP;AACD;AACD,OAAO,SAASG,QAAT,CAAkBd,YAAlB,EAAgC;EACrC,IAAIW,KAAK,GAAGD,QAAQ,CAACV,YAAD,CAApB;;EAEA,IAAIW,KAAK,GAAG,CAAZ,EAAe;IACb,MAAM,IAAIb,YAAJ,CAAiB,4BAA4BE,YAA7C,CAAN;EACD;;EAED,OAAOW,KAAP;AACD;AACD,OAAO,SAASI,QAAT,CAAkBf,YAAlB,EAAgC;EACrC,IAAIgB,IAAJ;;EAEA,IAAIf,YAAY,CAACD,YAAD,CAAhB,EAAgC;IAC9BgB,IAAI,GAAGpB,IAAI,CAACqB,UAAL,CAAgBjB,YAAhB,EAA8B,KAA9B,EAAqC,EAArC,CAAP;EACD,CAFD,MAEO,IAAIY,wBAAwB,CAACZ,YAAD,CAA5B,EAA4C;IACjD,MAAM,IAAIa,KAAJ,CAAU,sDAAV,CAAN;EACD,CAFM,MAEA;IACLG,IAAI,GAAGpB,IAAI,CAACqB,UAAL,CAAgBjB,YAAhB,CAAP;EACD;;EAED,OAAO;IACLkB,IAAI,EAAEF,IAAI,CAACE,IADN;IAELC,GAAG,EAAEH,IAAI,CAACG;EAFL,CAAP;AAID;AACD,IAAIC,QAAQ,GAAG,WAAf;AACA,IAAIC,QAAQ,GAAG,WAAf;AACA,OAAO,SAASnB,YAAT,CAAsBF,YAAtB,EAAoC;EACzC,OAAOqB,QAAQ,CAACC,IAAT,CAActB,YAAY,CAACuB,WAAb,EAAd,CAAP;AACD;AACD,OAAO,SAASpB,YAAT,CAAsBH,YAAtB,EAAoC;EACzC,OAAOoB,QAAQ,CAACE,IAAT,CAActB,YAAY,CAACuB,WAAb,EAAd,CAAP;AACD;;AAED,SAASX,wBAAT,CAAkCZ,YAAlC,EAAgD;EAC9C,OAAO,CAACC,YAAY,CAACD,YAAD,CAAb,IAA+BA,YAAY,CAACwB,WAAb,GAA2BpB,QAA3B,CAAoC,GAApC,CAAtC;AACD;;AAED,SAASH,YAAT,CAAsBD,YAAtB,EAAoC;EAClC,OAAOA,YAAY,CAACM,SAAb,CAAuB,CAAvB,EAA0B,CAA1B,EAA6BkB,WAA7B,OAA+C,IAA/C,IAAuDxB,YAAY,CAACM,SAAb,CAAuB,CAAvB,EAA0B,CAA1B,EAA6BkB,WAA7B,OAA+C,KAA7G;AACD"},"metadata":{},"sourceType":"module"}