{"ast":null,"code":"\"use strict\";\n/**\n * intersect creates Set containing the intersection of elements between all sets\n * @param {Set[]} sets an array of sets being checked for shared elements\n * @returns {Set<TODO>} returns a new Set containing the intersecting items\n */\n\nconst intersect = sets => {\n  if (sets.length === 0) return new Set();\n  if (sets.length === 1) return new Set(sets[0]);\n  let minSize = Infinity;\n  let minIndex = -1;\n\n  for (let i = 0; i < sets.length; i++) {\n    const size = sets[i].size;\n\n    if (size < minSize) {\n      minIndex = i;\n      minSize = size;\n    }\n  }\n\n  const current = new Set(sets[minIndex]);\n\n  for (let i = 0; i < sets.length; i++) {\n    if (i === minIndex) continue;\n    const set = sets[i];\n\n    for (const item of current) {\n      if (!set.has(item)) {\n        current.delete(item);\n      }\n    }\n  }\n\n  return current;\n};\n/**\n * Checks if a set is the subset of another set\n * @param {Set<TODO>} bigSet a Set which contains the original elements to compare against\n * @param {Set<TODO>} smallSet the set whos elements might be contained inside of bigSet\n * @returns {boolean} returns true if smallSet contains all elements inside of the bigSet\n */\n\n\nconst isSubset = (bigSet, smallSet) => {\n  if (bigSet.size < smallSet.size) return false;\n\n  for (const item of smallSet) {\n    if (!bigSet.has(item)) return false;\n  }\n\n  return true;\n};\n\nexports.intersect = intersect;\nexports.isSubset = isSubset;","map":{"version":3,"names":["intersect","sets","length","Set","minSize","Infinity","minIndex","i","size","current","set","item","has","delete","isSubset","bigSet","smallSet","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/util/SetHelpers.js"],"sourcesContent":["\"use strict\";\n\n/**\n * intersect creates Set containing the intersection of elements between all sets\n * @param {Set[]} sets an array of sets being checked for shared elements\n * @returns {Set<TODO>} returns a new Set containing the intersecting items\n */\nconst intersect = sets => {\n\tif (sets.length === 0) return new Set();\n\tif (sets.length === 1) return new Set(sets[0]);\n\tlet minSize = Infinity;\n\tlet minIndex = -1;\n\tfor (let i = 0; i < sets.length; i++) {\n\t\tconst size = sets[i].size;\n\t\tif (size < minSize) {\n\t\t\tminIndex = i;\n\t\t\tminSize = size;\n\t\t}\n\t}\n\tconst current = new Set(sets[minIndex]);\n\tfor (let i = 0; i < sets.length; i++) {\n\t\tif (i === minIndex) continue;\n\t\tconst set = sets[i];\n\t\tfor (const item of current) {\n\t\t\tif (!set.has(item)) {\n\t\t\t\tcurrent.delete(item);\n\t\t\t}\n\t\t}\n\t}\n\treturn current;\n};\n\n/**\n * Checks if a set is the subset of another set\n * @param {Set<TODO>} bigSet a Set which contains the original elements to compare against\n * @param {Set<TODO>} smallSet the set whos elements might be contained inside of bigSet\n * @returns {boolean} returns true if smallSet contains all elements inside of the bigSet\n */\nconst isSubset = (bigSet, smallSet) => {\n\tif (bigSet.size < smallSet.size) return false;\n\tfor (const item of smallSet) {\n\t\tif (!bigSet.has(item)) return false;\n\t}\n\treturn true;\n};\n\nexports.intersect = intersect;\nexports.isSubset = isSubset;\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMA,SAAS,GAAGC,IAAI,IAAI;EACzB,IAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB,OAAO,IAAIC,GAAJ,EAAP;EACvB,IAAIF,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB,OAAO,IAAIC,GAAJ,CAAQF,IAAI,CAAC,CAAD,CAAZ,CAAP;EACvB,IAAIG,OAAO,GAAGC,QAAd;EACA,IAAIC,QAAQ,GAAG,CAAC,CAAhB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACC,MAAzB,EAAiCK,CAAC,EAAlC,EAAsC;IACrC,MAAMC,IAAI,GAAGP,IAAI,CAACM,CAAD,CAAJ,CAAQC,IAArB;;IACA,IAAIA,IAAI,GAAGJ,OAAX,EAAoB;MACnBE,QAAQ,GAAGC,CAAX;MACAH,OAAO,GAAGI,IAAV;IACA;EACD;;EACD,MAAMC,OAAO,GAAG,IAAIN,GAAJ,CAAQF,IAAI,CAACK,QAAD,CAAZ,CAAhB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACC,MAAzB,EAAiCK,CAAC,EAAlC,EAAsC;IACrC,IAAIA,CAAC,KAAKD,QAAV,EAAoB;IACpB,MAAMI,GAAG,GAAGT,IAAI,CAACM,CAAD,CAAhB;;IACA,KAAK,MAAMI,IAAX,IAAmBF,OAAnB,EAA4B;MAC3B,IAAI,CAACC,GAAG,CAACE,GAAJ,CAAQD,IAAR,CAAL,EAAoB;QACnBF,OAAO,CAACI,MAAR,CAAeF,IAAf;MACA;IACD;EACD;;EACD,OAAOF,OAAP;AACA,CAvBD;AAyBA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMK,QAAQ,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;EACtC,IAAID,MAAM,CAACP,IAAP,GAAcQ,QAAQ,CAACR,IAA3B,EAAiC,OAAO,KAAP;;EACjC,KAAK,MAAMG,IAAX,IAAmBK,QAAnB,EAA6B;IAC5B,IAAI,CAACD,MAAM,CAACH,GAAP,CAAWD,IAAX,CAAL,EAAuB,OAAO,KAAP;EACvB;;EACD,OAAO,IAAP;AACA,CAND;;AAQAM,OAAO,CAACjB,SAAR,GAAoBA,SAApB;AACAiB,OAAO,CAACH,QAAR,GAAmBA,QAAnB"},"metadata":{},"sourceType":"script"}