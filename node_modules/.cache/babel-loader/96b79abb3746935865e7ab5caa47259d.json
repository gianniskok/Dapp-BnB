{"ast":null,"code":"var once = require('once');\n\nvar eos = require('end-of-stream');\n\nvar fs = require('fs'); // we only need fs to get the ReadStream and WriteStream prototypes\n\n\nvar noop = function () {};\n\nvar ancient = /^v?\\.0/.test(process.version);\n\nvar isFn = function (fn) {\n  return typeof fn === 'function';\n};\n\nvar isFS = function (stream) {\n  if (!ancient) return false; // newer node version do not need to care about fs is a special way\n\n  if (!fs) return false; // browser\n\n  return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close);\n};\n\nvar isRequest = function (stream) {\n  return stream.setHeader && isFn(stream.abort);\n};\n\nvar destroyer = function (stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true;\n    if (isFS(stream)) return stream.close(noop); // use close for fs streams to avoid fd leaks\n\n    if (isRequest(stream)) return stream.abort(); // request.destroy just do .end - .abort is what we want\n\n    if (isFn(stream.destroy)) return stream.destroy();\n    callback(err || new Error('stream was destroyed'));\n  };\n};\n\nvar call = function (fn) {\n  fn();\n};\n\nvar pipe = function (from, to) {\n  return from.pipe(to);\n};\n\nvar pump = function () {\n  var streams = Array.prototype.slice.call(arguments);\n  var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop;\n  if (Array.isArray(streams[0])) streams = streams[0];\n  if (streams.length < 2) throw new Error('pump requires two streams per minimum');\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  streams.reduce(pipe);\n};\n\nmodule.exports = pump;","map":{"version":3,"names":["once","require","eos","fs","noop","ancient","test","process","version","isFn","fn","isFS","stream","ReadStream","WriteStream","close","isRequest","setHeader","abort","destroyer","reading","writing","callback","closed","on","readable","writable","err","destroyed","destroy","Error","call","pipe","from","to","pump","streams","Array","prototype","slice","arguments","length","pop","isArray","error","destroys","map","i","forEach","reduce","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/pumpify/node_modules/pump/index.js"],"sourcesContent":["var once = require('once')\nvar eos = require('end-of-stream')\nvar fs = require('fs') // we only need fs to get the ReadStream and WriteStream prototypes\n\nvar noop = function () {}\nvar ancient = /^v?\\.0/.test(process.version)\n\nvar isFn = function (fn) {\n  return typeof fn === 'function'\n}\n\nvar isFS = function (stream) {\n  if (!ancient) return false // newer node version do not need to care about fs is a special way\n  if (!fs) return false // browser\n  return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close)\n}\n\nvar isRequest = function (stream) {\n  return stream.setHeader && isFn(stream.abort)\n}\n\nvar destroyer = function (stream, reading, writing, callback) {\n  callback = once(callback)\n\n  var closed = false\n  stream.on('close', function () {\n    closed = true\n  })\n\n  eos(stream, {readable: reading, writable: writing}, function (err) {\n    if (err) return callback(err)\n    closed = true\n    callback()\n  })\n\n  var destroyed = false\n  return function (err) {\n    if (closed) return\n    if (destroyed) return\n    destroyed = true\n\n    if (isFS(stream)) return stream.close(noop) // use close for fs streams to avoid fd leaks\n    if (isRequest(stream)) return stream.abort() // request.destroy just do .end - .abort is what we want\n\n    if (isFn(stream.destroy)) return stream.destroy()\n\n    callback(err || new Error('stream was destroyed'))\n  }\n}\n\nvar call = function (fn) {\n  fn()\n}\n\nvar pipe = function (from, to) {\n  return from.pipe(to)\n}\n\nvar pump = function () {\n  var streams = Array.prototype.slice.call(arguments)\n  var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop\n\n  if (Array.isArray(streams[0])) streams = streams[0]\n  if (streams.length < 2) throw new Error('pump requires two streams per minimum')\n\n  var error\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1\n    var writing = i > 0\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err\n      if (err) destroys.forEach(call)\n      if (reading) return\n      destroys.forEach(call)\n      callback(error)\n    })\n  })\n\n  streams.reduce(pipe)\n}\n\nmodule.exports = pump\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}