{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  RawSource,\n  ReplaceSource\n} = require(\"webpack-sources\"); // TODO: clean up this file\n// replace with newer constructs\n// TODO: remove DependencyVariables and replace them with something better\n\n\nclass JavascriptGenerator {\n  generate(module, dependencyTemplates, runtimeTemplate) {\n    const originalSource = module.originalSource();\n\n    if (!originalSource) {\n      return new RawSource(\"throw new Error('No source available');\");\n    }\n\n    const source = new ReplaceSource(originalSource);\n    this.sourceBlock(module, module, [], dependencyTemplates, source, runtimeTemplate);\n    return source;\n  }\n\n  sourceBlock(module, block, availableVars, dependencyTemplates, source, runtimeTemplate) {\n    for (const dependency of block.dependencies) {\n      this.sourceDependency(dependency, dependencyTemplates, source, runtimeTemplate);\n    }\n    /**\n     * Get the variables of all blocks that we need to inject.\n     * These will contain the variable name and its expression.\n     * The name will be added as a parameter in a IIFE the expression as its value.\n     */\n\n\n    const vars = block.variables.reduce((result, value) => {\n      const variable = this.sourceVariables(value, availableVars, dependencyTemplates, runtimeTemplate);\n\n      if (variable) {\n        result.push(variable);\n      }\n\n      return result;\n    }, []);\n    /**\n     * if we actually have variables\n     * this is important as how #splitVariablesInUniqueNamedChunks works\n     * it will always return an array in an array which would lead to a IIFE wrapper around\n     * a module if we do this with an empty vars array.\n     */\n\n    if (vars.length > 0) {\n      /**\n       * Split all variables up into chunks of unique names.\n       * e.g. imagine you have the following variable names that need to be injected:\n       * [foo, bar, baz, foo, some, more]\n       * we can not inject \"foo\" twice, therefore we just make two IIFEs like so:\n       * (function(foo, bar, baz){\n       *   (function(foo, some, more){\n       *     …\n       *   }(…));\n       * }(…));\n       *\n       * \"splitVariablesInUniqueNamedChunks\" splits the variables shown above up to this:\n       * [[foo, bar, baz], [foo, some, more]]\n       */\n      const injectionVariableChunks = this.splitVariablesInUniqueNamedChunks(vars); // create all the beginnings of IIFEs\n\n      const functionWrapperStarts = injectionVariableChunks.map(variableChunk => {\n        return this.variableInjectionFunctionWrapperStartCode(variableChunk.map(variable => variable.name));\n      }); // and all the ends\n\n      const functionWrapperEnds = injectionVariableChunks.map(variableChunk => {\n        return this.variableInjectionFunctionWrapperEndCode(module, variableChunk.map(variable => variable.expression), block);\n      }); // join them to one big string\n\n      const varStartCode = functionWrapperStarts.join(\"\"); // reverse the ends first before joining them, as the last added must be the inner most\n\n      const varEndCode = functionWrapperEnds.reverse().join(\"\"); // if we have anything, add it to the source\n\n      if (varStartCode && varEndCode) {\n        const start = block.range ? block.range[0] : -10;\n        const end = block.range ? block.range[1] : module.originalSource().size() + 1;\n        source.insert(start + 0.5, varStartCode);\n        source.insert(end + 0.5, \"\\n/* WEBPACK VAR INJECTION */\" + varEndCode);\n      }\n    }\n\n    for (const childBlock of block.blocks) {\n      this.sourceBlock(module, childBlock, availableVars.concat(vars), dependencyTemplates, source, runtimeTemplate);\n    }\n  }\n\n  sourceDependency(dependency, dependencyTemplates, source, runtimeTemplate) {\n    const template = dependencyTemplates.get(dependency.constructor);\n\n    if (!template) {\n      throw new Error(\"No template for dependency: \" + dependency.constructor.name);\n    }\n\n    template.apply(dependency, source, runtimeTemplate, dependencyTemplates);\n  }\n\n  sourceVariables(variable, availableVars, dependencyTemplates, runtimeTemplate) {\n    const name = variable.name;\n    const expr = variable.expressionSource(dependencyTemplates, runtimeTemplate);\n\n    if (availableVars.some(v => v.name === name && v.expression.source() === expr.source())) {\n      return;\n    }\n\n    return {\n      name: name,\n      expression: expr\n    };\n  }\n  /*\n   * creates the start part of a IIFE around the module to inject a variable name\n   * (function(…){   <- this part\n   * }.call(…))\n   */\n\n\n  variableInjectionFunctionWrapperStartCode(varNames) {\n    const args = varNames.join(\", \");\n    return `/* WEBPACK VAR INJECTION */(function(${args}) {`;\n  }\n\n  contextArgument(module, block) {\n    if (this === block) {\n      return module.exportsArgument;\n    }\n\n    return \"this\";\n  }\n  /*\n   * creates the end part of a IIFE around the module to inject a variable name\n   * (function(…){\n   * }.call(…))   <- this part\n   */\n\n\n  variableInjectionFunctionWrapperEndCode(module, varExpressions, block) {\n    const firstParam = this.contextArgument(module, block);\n    const furtherParams = varExpressions.map(e => e.source()).join(\", \");\n    return `}.call(${firstParam}, ${furtherParams}))`;\n  }\n\n  splitVariablesInUniqueNamedChunks(vars) {\n    const startState = [[]];\n    return vars.reduce((chunks, variable) => {\n      const current = chunks[chunks.length - 1]; // check if variable with same name exists already\n      // if so create a new chunk of variables.\n\n      const variableNameAlreadyExists = current.some(v => v.name === variable.name);\n\n      if (variableNameAlreadyExists) {\n        // start new chunk with current variable\n        chunks.push([variable]);\n      } else {\n        // else add it to current chunk\n        current.push(variable);\n      }\n\n      return chunks;\n    }, startState);\n  }\n\n}\n\nmodule.exports = JavascriptGenerator;","map":{"version":3,"names":["RawSource","ReplaceSource","require","JavascriptGenerator","generate","module","dependencyTemplates","runtimeTemplate","originalSource","source","sourceBlock","block","availableVars","dependency","dependencies","sourceDependency","vars","variables","reduce","result","value","variable","sourceVariables","push","length","injectionVariableChunks","splitVariablesInUniqueNamedChunks","functionWrapperStarts","map","variableChunk","variableInjectionFunctionWrapperStartCode","name","functionWrapperEnds","variableInjectionFunctionWrapperEndCode","expression","varStartCode","join","varEndCode","reverse","start","range","end","size","insert","childBlock","blocks","concat","template","get","constructor","Error","apply","expr","expressionSource","some","v","varNames","args","contextArgument","exportsArgument","varExpressions","firstParam","furtherParams","e","startState","chunks","current","variableNameAlreadyExists","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/JavascriptGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { RawSource, ReplaceSource } = require(\"webpack-sources\");\n\n// TODO: clean up this file\n// replace with newer constructs\n\n// TODO: remove DependencyVariables and replace them with something better\n\nclass JavascriptGenerator {\n\tgenerate(module, dependencyTemplates, runtimeTemplate) {\n\t\tconst originalSource = module.originalSource();\n\t\tif (!originalSource) {\n\t\t\treturn new RawSource(\"throw new Error('No source available');\");\n\t\t}\n\n\t\tconst source = new ReplaceSource(originalSource);\n\n\t\tthis.sourceBlock(\n\t\t\tmodule,\n\t\t\tmodule,\n\t\t\t[],\n\t\t\tdependencyTemplates,\n\t\t\tsource,\n\t\t\truntimeTemplate\n\t\t);\n\n\t\treturn source;\n\t}\n\n\tsourceBlock(\n\t\tmodule,\n\t\tblock,\n\t\tavailableVars,\n\t\tdependencyTemplates,\n\t\tsource,\n\t\truntimeTemplate\n\t) {\n\t\tfor (const dependency of block.dependencies) {\n\t\t\tthis.sourceDependency(\n\t\t\t\tdependency,\n\t\t\t\tdependencyTemplates,\n\t\t\t\tsource,\n\t\t\t\truntimeTemplate\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Get the variables of all blocks that we need to inject.\n\t\t * These will contain the variable name and its expression.\n\t\t * The name will be added as a parameter in a IIFE the expression as its value.\n\t\t */\n\t\tconst vars = block.variables.reduce((result, value) => {\n\t\t\tconst variable = this.sourceVariables(\n\t\t\t\tvalue,\n\t\t\t\tavailableVars,\n\t\t\t\tdependencyTemplates,\n\t\t\t\truntimeTemplate\n\t\t\t);\n\n\t\t\tif (variable) {\n\t\t\t\tresult.push(variable);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}, []);\n\n\t\t/**\n\t\t * if we actually have variables\n\t\t * this is important as how #splitVariablesInUniqueNamedChunks works\n\t\t * it will always return an array in an array which would lead to a IIFE wrapper around\n\t\t * a module if we do this with an empty vars array.\n\t\t */\n\t\tif (vars.length > 0) {\n\t\t\t/**\n\t\t\t * Split all variables up into chunks of unique names.\n\t\t\t * e.g. imagine you have the following variable names that need to be injected:\n\t\t\t * [foo, bar, baz, foo, some, more]\n\t\t\t * we can not inject \"foo\" twice, therefore we just make two IIFEs like so:\n\t\t\t * (function(foo, bar, baz){\n\t\t\t *   (function(foo, some, more){\n\t\t\t *     …\n\t\t\t *   }(…));\n\t\t\t * }(…));\n\t\t\t *\n\t\t\t * \"splitVariablesInUniqueNamedChunks\" splits the variables shown above up to this:\n\t\t\t * [[foo, bar, baz], [foo, some, more]]\n\t\t\t */\n\t\t\tconst injectionVariableChunks = this.splitVariablesInUniqueNamedChunks(\n\t\t\t\tvars\n\t\t\t);\n\n\t\t\t// create all the beginnings of IIFEs\n\t\t\tconst functionWrapperStarts = injectionVariableChunks.map(\n\t\t\t\tvariableChunk => {\n\t\t\t\t\treturn this.variableInjectionFunctionWrapperStartCode(\n\t\t\t\t\t\tvariableChunk.map(variable => variable.name)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// and all the ends\n\t\t\tconst functionWrapperEnds = injectionVariableChunks.map(variableChunk => {\n\t\t\t\treturn this.variableInjectionFunctionWrapperEndCode(\n\t\t\t\t\tmodule,\n\t\t\t\t\tvariableChunk.map(variable => variable.expression),\n\t\t\t\t\tblock\n\t\t\t\t);\n\t\t\t});\n\n\t\t\t// join them to one big string\n\t\t\tconst varStartCode = functionWrapperStarts.join(\"\");\n\n\t\t\t// reverse the ends first before joining them, as the last added must be the inner most\n\t\t\tconst varEndCode = functionWrapperEnds.reverse().join(\"\");\n\n\t\t\t// if we have anything, add it to the source\n\t\t\tif (varStartCode && varEndCode) {\n\t\t\t\tconst start = block.range ? block.range[0] : -10;\n\t\t\t\tconst end = block.range\n\t\t\t\t\t? block.range[1]\n\t\t\t\t\t: module.originalSource().size() + 1;\n\t\t\t\tsource.insert(start + 0.5, varStartCode);\n\t\t\t\tsource.insert(end + 0.5, \"\\n/* WEBPACK VAR INJECTION */\" + varEndCode);\n\t\t\t}\n\t\t}\n\n\t\tfor (const childBlock of block.blocks) {\n\t\t\tthis.sourceBlock(\n\t\t\t\tmodule,\n\t\t\t\tchildBlock,\n\t\t\t\tavailableVars.concat(vars),\n\t\t\t\tdependencyTemplates,\n\t\t\t\tsource,\n\t\t\t\truntimeTemplate\n\t\t\t);\n\t\t}\n\t}\n\n\tsourceDependency(dependency, dependencyTemplates, source, runtimeTemplate) {\n\t\tconst template = dependencyTemplates.get(dependency.constructor);\n\t\tif (!template) {\n\t\t\tthrow new Error(\n\t\t\t\t\"No template for dependency: \" + dependency.constructor.name\n\t\t\t);\n\t\t}\n\t\ttemplate.apply(dependency, source, runtimeTemplate, dependencyTemplates);\n\t}\n\n\tsourceVariables(\n\t\tvariable,\n\t\tavailableVars,\n\t\tdependencyTemplates,\n\t\truntimeTemplate\n\t) {\n\t\tconst name = variable.name;\n\t\tconst expr = variable.expressionSource(\n\t\t\tdependencyTemplates,\n\t\t\truntimeTemplate\n\t\t);\n\n\t\tif (\n\t\t\tavailableVars.some(\n\t\t\t\tv => v.name === name && v.expression.source() === expr.source()\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\treturn {\n\t\t\tname: name,\n\t\t\texpression: expr\n\t\t};\n\t}\n\n\t/*\n\t * creates the start part of a IIFE around the module to inject a variable name\n\t * (function(…){   <- this part\n\t * }.call(…))\n\t */\n\tvariableInjectionFunctionWrapperStartCode(varNames) {\n\t\tconst args = varNames.join(\", \");\n\t\treturn `/* WEBPACK VAR INJECTION */(function(${args}) {`;\n\t}\n\n\tcontextArgument(module, block) {\n\t\tif (this === block) {\n\t\t\treturn module.exportsArgument;\n\t\t}\n\t\treturn \"this\";\n\t}\n\n\t/*\n\t * creates the end part of a IIFE around the module to inject a variable name\n\t * (function(…){\n\t * }.call(…))   <- this part\n\t */\n\tvariableInjectionFunctionWrapperEndCode(module, varExpressions, block) {\n\t\tconst firstParam = this.contextArgument(module, block);\n\t\tconst furtherParams = varExpressions.map(e => e.source()).join(\", \");\n\t\treturn `}.call(${firstParam}, ${furtherParams}))`;\n\t}\n\n\tsplitVariablesInUniqueNamedChunks(vars) {\n\t\tconst startState = [[]];\n\t\treturn vars.reduce((chunks, variable) => {\n\t\t\tconst current = chunks[chunks.length - 1];\n\t\t\t// check if variable with same name exists already\n\t\t\t// if so create a new chunk of variables.\n\t\t\tconst variableNameAlreadyExists = current.some(\n\t\t\t\tv => v.name === variable.name\n\t\t\t);\n\n\t\t\tif (variableNameAlreadyExists) {\n\t\t\t\t// start new chunk with current variable\n\t\t\t\tchunks.push([variable]);\n\t\t\t} else {\n\t\t\t\t// else add it to current chunk\n\t\t\t\tcurrent.push(variable);\n\t\t\t}\n\t\t\treturn chunks;\n\t\t}, startState);\n\t}\n}\n\nmodule.exports = JavascriptGenerator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}