{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\n\nconst {\n  ConcatSource,\n  RawSource\n} = require(\"webpack-sources\");\n\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nconst SourceMapDevToolModuleOptionsPlugin = require(\"./SourceMapDevToolModuleOptionsPlugin\");\n\nconst createHash = require(\"./util/createHash\");\n\nconst {\n  absolutify\n} = require(\"./util/identifier\");\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../schemas/plugins/SourceMapDevToolPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/SourceMapDevToolPlugin\").SourceMapDevToolPluginOptions} SourceMapDevToolPluginOptions */\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"source-map\").RawSourceMap} SourceMap */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./Compilation\")} SourceMapDefinition */\n\n/**\n * @typedef {object} SourceMapTask\n * @property {Source} asset\n * @property {Array<string | Module>} [modules]\n * @property {string} source\n * @property {string} file\n * @property {SourceMap} sourceMap\n * @property {Chunk} chunk\n */\n\n/**\n * @param {string} name file path\n * @returns {string} file name\n */\n\n\nconst basename = name => {\n  if (!name.includes(\"/\")) return name;\n  return name.substr(name.lastIndexOf(\"/\") + 1);\n};\n/**\n * @type {WeakMap<Source, {file: string, assets: {[k: string]: ConcatSource | RawSource}}>}\n */\n\n\nconst assetsCache = new WeakMap();\n/**\n * Creating {@link SourceMapTask} for given file\n * @param {string} file current compiled file\n * @param {Source} asset the asset\n * @param {Chunk} chunk related chunk\n * @param {SourceMapDevToolPluginOptions} options source map options\n * @param {Compilation} compilation compilation instance\n * @returns {SourceMapTask | undefined} created task instance or `undefined`\n */\n\nconst getTaskForFile = (file, asset, chunk, options, compilation) => {\n  let source, sourceMap;\n  /**\n   * Check if asset can build source map\n   */\n\n  if (asset.sourceAndMap) {\n    const sourceAndMap = asset.sourceAndMap(options);\n    sourceMap = sourceAndMap.map;\n    source = sourceAndMap.source;\n  } else {\n    sourceMap = asset.map(options);\n    source = asset.source();\n  }\n\n  if (!sourceMap || typeof source !== \"string\") return;\n  const context = compilation.options.context;\n  const modules = sourceMap.sources.map(source => {\n    if (source.startsWith(\"webpack://\")) {\n      source = absolutify(context, source.slice(10));\n    }\n\n    const module = compilation.findModule(source);\n    return module || source;\n  });\n  return {\n    chunk,\n    file,\n    asset,\n    source,\n    sourceMap,\n    modules\n  };\n};\n\nclass SourceMapDevToolPlugin {\n  /**\n   * @param {SourceMapDevToolPluginOptions} [options] options object\n   * @throws {Error} throws error, if got more than 1 arguments\n   */\n  constructor(options) {\n    if (arguments.length > 1) {\n      throw new Error(\"SourceMapDevToolPlugin only takes one argument (pass an options object)\");\n    }\n\n    if (!options) options = {};\n    validateOptions(schema, options, \"SourceMap DevTool Plugin\");\n    /** @type {string | false} */\n\n    this.sourceMapFilename = options.filename;\n    /** @type {string | false} */\n\n    this.sourceMappingURLComment = options.append === false ? false : options.append || \"\\n//# sourceMappingURL=[url]\";\n    /** @type {string | Function} */\n\n    this.moduleFilenameTemplate = options.moduleFilenameTemplate || \"webpack://[namespace]/[resourcePath]\";\n    /** @type {string | Function} */\n\n    this.fallbackModuleFilenameTemplate = options.fallbackModuleFilenameTemplate || \"webpack://[namespace]/[resourcePath]?[hash]\";\n    /** @type {string} */\n\n    this.namespace = options.namespace || \"\";\n    /** @type {SourceMapDevToolPluginOptions} */\n\n    this.options = options;\n  }\n  /**\n   * Apply compiler\n   * @param {Compiler} compiler compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const sourceMapFilename = this.sourceMapFilename;\n    const sourceMappingURLComment = this.sourceMappingURLComment;\n    const moduleFilenameTemplate = this.moduleFilenameTemplate;\n    const namespace = this.namespace;\n    const fallbackModuleFilenameTemplate = this.fallbackModuleFilenameTemplate;\n    const requestShortener = compiler.requestShortener;\n    const options = this.options;\n    options.test = options.test || /\\.(m?js|css)($|\\?)/i;\n    const matchObject = ModuleFilenameHelpers.matchObject.bind(undefined, options);\n    compiler.hooks.compilation.tap(\"SourceMapDevToolPlugin\", compilation => {\n      new SourceMapDevToolModuleOptionsPlugin(options).apply(compilation);\n      compilation.hooks.afterOptimizeChunkAssets.tap(\n      /** @type {TODO} */\n      {\n        name: \"SourceMapDevToolPlugin\",\n        context: true\n      },\n      /**\n       * @param {object} context hook context\n       * @param {Array<Chunk>} chunks resulted chunks\n       * @throws {Error} throws error, if `sourceMapFilename === false && sourceMappingURLComment === false`\n       * @returns {void}\n       */\n      (context, chunks) => {\n        /** @type {Map<string | Module, string>} */\n        const moduleToSourceNameMapping = new Map();\n        /**\n         * @type {Function}\n         * @returns {void}\n         */\n\n        const reportProgress = context && context.reportProgress ? context.reportProgress : () => {};\n        const files = [];\n\n        for (const chunk of chunks) {\n          for (const file of chunk.files) {\n            if (matchObject(file)) {\n              files.push({\n                file,\n                chunk\n              });\n            }\n          }\n        }\n\n        reportProgress(0.0);\n        const tasks = [];\n        files.forEach((_ref, idx) => {\n          let {\n            file,\n            chunk\n          } = _ref;\n          const asset = compilation.getAsset(file).source;\n          const cache = assetsCache.get(asset);\n          /**\n           * If presented in cache, reassigns assets. Cache assets already have source maps.\n           */\n\n          if (cache && cache.file === file) {\n            for (const cachedFile in cache.assets) {\n              if (cachedFile === file) {\n                compilation.updateAsset(cachedFile, cache.assets[cachedFile]);\n              } else {\n                compilation.emitAsset(cachedFile, cache.assets[cachedFile], {\n                  development: true\n                });\n              }\n              /**\n               * Add file to chunk, if not presented there\n               */\n\n\n              if (cachedFile !== file) chunk.files.push(cachedFile);\n            }\n\n            return;\n          }\n\n          reportProgress(0.5 * idx / files.length, file, \"generate SourceMap\");\n          /** @type {SourceMapTask | undefined} */\n\n          const task = getTaskForFile(file, asset, chunk, options, compilation);\n\n          if (task) {\n            const modules = task.modules;\n\n            for (let idx = 0; idx < modules.length; idx++) {\n              const module = modules[idx];\n\n              if (!moduleToSourceNameMapping.get(module)) {\n                moduleToSourceNameMapping.set(module, ModuleFilenameHelpers.createFilename(module, {\n                  moduleFilenameTemplate: moduleFilenameTemplate,\n                  namespace: namespace\n                }, requestShortener));\n              }\n            }\n\n            tasks.push(task);\n          }\n        });\n        reportProgress(0.5, \"resolve sources\");\n        /** @type {Set<string>} */\n\n        const usedNamesSet = new Set(moduleToSourceNameMapping.values());\n        /** @type {Set<string>} */\n\n        const conflictDetectionSet = new Set();\n        /**\n         * all modules in defined order (longest identifier first)\n         * @type {Array<string | Module>}\n         */\n\n        const allModules = Array.from(moduleToSourceNameMapping.keys()).sort((a, b) => {\n          const ai = typeof a === \"string\" ? a : a.identifier();\n          const bi = typeof b === \"string\" ? b : b.identifier();\n          return ai.length - bi.length;\n        }); // find modules with conflicting source names\n\n        for (let idx = 0; idx < allModules.length; idx++) {\n          const module = allModules[idx];\n          let sourceName = moduleToSourceNameMapping.get(module);\n          let hasName = conflictDetectionSet.has(sourceName);\n\n          if (!hasName) {\n            conflictDetectionSet.add(sourceName);\n            continue;\n          } // try the fallback name first\n\n\n          sourceName = ModuleFilenameHelpers.createFilename(module, {\n            moduleFilenameTemplate: fallbackModuleFilenameTemplate,\n            namespace: namespace\n          }, requestShortener);\n          hasName = usedNamesSet.has(sourceName);\n\n          if (!hasName) {\n            moduleToSourceNameMapping.set(module, sourceName);\n            usedNamesSet.add(sourceName);\n            continue;\n          } // elsewise just append stars until we have a valid name\n\n\n          while (hasName) {\n            sourceName += \"*\";\n            hasName = usedNamesSet.has(sourceName);\n          }\n\n          moduleToSourceNameMapping.set(module, sourceName);\n          usedNamesSet.add(sourceName);\n        }\n\n        tasks.forEach((task, index) => {\n          reportProgress(0.5 + 0.5 * index / tasks.length, task.file, \"attach SourceMap\");\n          const assets = Object.create(null);\n          const chunk = task.chunk;\n          const file = task.file;\n          const asset = task.asset;\n          const sourceMap = task.sourceMap;\n          const source = task.source;\n          const modules = task.modules;\n          const moduleFilenames = modules.map(m => moduleToSourceNameMapping.get(m));\n          sourceMap.sources = moduleFilenames;\n\n          if (options.noSources) {\n            sourceMap.sourcesContent = undefined;\n          }\n\n          sourceMap.sourceRoot = options.sourceRoot || \"\";\n          sourceMap.file = file;\n          assetsCache.set(asset, {\n            file,\n            assets\n          });\n          /** @type {string | false} */\n\n          let currentSourceMappingURLComment = sourceMappingURLComment;\n\n          if (currentSourceMappingURLComment !== false && /\\.css($|\\?)/i.test(file)) {\n            currentSourceMappingURLComment = currentSourceMappingURLComment.replace(/^\\n\\/\\/(.*)$/, \"\\n/*$1*/\");\n          }\n\n          const sourceMapString = JSON.stringify(sourceMap);\n\n          if (sourceMapFilename) {\n            let filename = file;\n            let query = \"\";\n            const idx = filename.indexOf(\"?\");\n\n            if (idx >= 0) {\n              query = filename.substr(idx);\n              filename = filename.substr(0, idx);\n            }\n\n            const pathParams = {\n              chunk,\n              filename: options.fileContext ? path.relative(options.fileContext, filename) : filename,\n              query,\n              basename: basename(filename),\n              contentHash: createHash(\"md4\").update(sourceMapString).digest(\"hex\")\n            };\n            let sourceMapFile = compilation.getPath(sourceMapFilename, pathParams);\n            const sourceMapUrl = options.publicPath ? options.publicPath + sourceMapFile.replace(/\\\\/g, \"/\") : path.relative(path.dirname(file), sourceMapFile).replace(/\\\\/g, \"/\");\n            /**\n             * Add source map url to compilation asset, if {@link currentSourceMappingURLComment} presented\n             */\n\n            if (currentSourceMappingURLComment !== false) {\n              const asset = new ConcatSource(new RawSource(source), compilation.getPath(currentSourceMappingURLComment, Object.assign({\n                url: sourceMapUrl\n              }, pathParams)));\n              assets[file] = asset;\n              compilation.updateAsset(file, asset);\n            }\n            /**\n             * Add source map file to compilation assets and chunk files\n             */\n\n\n            const asset = new RawSource(sourceMapString);\n            assets[sourceMapFile] = asset;\n            compilation.emitAsset(sourceMapFile, asset, {\n              development: true\n            });\n            chunk.files.push(sourceMapFile);\n          } else {\n            if (currentSourceMappingURLComment === false) {\n              throw new Error(\"SourceMapDevToolPlugin: append can't be false when no filename is provided\");\n            }\n            /**\n             * Add source map as data url to asset\n             */\n\n\n            const asset = new ConcatSource(new RawSource(source), currentSourceMappingURLComment.replace(/\\[map\\]/g, () => sourceMapString).replace(/\\[url\\]/g, () => `data:application/json;charset=utf-8;base64,${Buffer.from(sourceMapString, \"utf-8\").toString(\"base64\")}`));\n            assets[file] = asset;\n            compilation.updateAsset(file, asset);\n          }\n        });\n        reportProgress(1.0);\n      });\n    });\n  }\n\n}\n\nmodule.exports = SourceMapDevToolPlugin;","map":{"version":3,"names":["path","require","ConcatSource","RawSource","ModuleFilenameHelpers","SourceMapDevToolModuleOptionsPlugin","createHash","absolutify","validateOptions","schema","basename","name","includes","substr","lastIndexOf","assetsCache","WeakMap","getTaskForFile","file","asset","chunk","options","compilation","source","sourceMap","sourceAndMap","map","context","modules","sources","startsWith","slice","module","findModule","SourceMapDevToolPlugin","constructor","arguments","length","Error","sourceMapFilename","filename","sourceMappingURLComment","append","moduleFilenameTemplate","fallbackModuleFilenameTemplate","namespace","apply","compiler","requestShortener","test","matchObject","bind","undefined","hooks","tap","afterOptimizeChunkAssets","chunks","moduleToSourceNameMapping","Map","reportProgress","files","push","tasks","forEach","idx","getAsset","cache","get","cachedFile","assets","updateAsset","emitAsset","development","task","set","createFilename","usedNamesSet","Set","values","conflictDetectionSet","allModules","Array","from","keys","sort","a","b","ai","identifier","bi","sourceName","hasName","has","add","index","Object","create","moduleFilenames","m","noSources","sourcesContent","sourceRoot","currentSourceMappingURLComment","replace","sourceMapString","JSON","stringify","query","indexOf","pathParams","fileContext","relative","contentHash","update","digest","sourceMapFile","getPath","sourceMapUrl","publicPath","dirname","assign","url","Buffer","toString","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/SourceMapDevToolPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\nconst { ConcatSource, RawSource } = require(\"webpack-sources\");\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\nconst SourceMapDevToolModuleOptionsPlugin = require(\"./SourceMapDevToolModuleOptionsPlugin\");\nconst createHash = require(\"./util/createHash\");\nconst { absolutify } = require(\"./util/identifier\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/SourceMapDevToolPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/SourceMapDevToolPlugin\").SourceMapDevToolPluginOptions} SourceMapDevToolPluginOptions */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"source-map\").RawSourceMap} SourceMap */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./Compilation\")} Compilation */\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Compilation\")} SourceMapDefinition */\n\n/**\n * @typedef {object} SourceMapTask\n * @property {Source} asset\n * @property {Array<string | Module>} [modules]\n * @property {string} source\n * @property {string} file\n * @property {SourceMap} sourceMap\n * @property {Chunk} chunk\n */\n\n/**\n * @param {string} name file path\n * @returns {string} file name\n */\nconst basename = name => {\n\tif (!name.includes(\"/\")) return name;\n\treturn name.substr(name.lastIndexOf(\"/\") + 1);\n};\n\n/**\n * @type {WeakMap<Source, {file: string, assets: {[k: string]: ConcatSource | RawSource}}>}\n */\nconst assetsCache = new WeakMap();\n\n/**\n * Creating {@link SourceMapTask} for given file\n * @param {string} file current compiled file\n * @param {Source} asset the asset\n * @param {Chunk} chunk related chunk\n * @param {SourceMapDevToolPluginOptions} options source map options\n * @param {Compilation} compilation compilation instance\n * @returns {SourceMapTask | undefined} created task instance or `undefined`\n */\nconst getTaskForFile = (file, asset, chunk, options, compilation) => {\n\tlet source, sourceMap;\n\t/**\n\t * Check if asset can build source map\n\t */\n\tif (asset.sourceAndMap) {\n\t\tconst sourceAndMap = asset.sourceAndMap(options);\n\t\tsourceMap = sourceAndMap.map;\n\t\tsource = sourceAndMap.source;\n\t} else {\n\t\tsourceMap = asset.map(options);\n\t\tsource = asset.source();\n\t}\n\tif (!sourceMap || typeof source !== \"string\") return;\n\tconst context = compilation.options.context;\n\tconst modules = sourceMap.sources.map(source => {\n\t\tif (source.startsWith(\"webpack://\")) {\n\t\t\tsource = absolutify(context, source.slice(10));\n\t\t}\n\t\tconst module = compilation.findModule(source);\n\t\treturn module || source;\n\t});\n\n\treturn {\n\t\tchunk,\n\t\tfile,\n\t\tasset,\n\t\tsource,\n\t\tsourceMap,\n\t\tmodules\n\t};\n};\n\nclass SourceMapDevToolPlugin {\n\t/**\n\t * @param {SourceMapDevToolPluginOptions} [options] options object\n\t * @throws {Error} throws error, if got more than 1 arguments\n\t */\n\tconstructor(options) {\n\t\tif (arguments.length > 1) {\n\t\t\tthrow new Error(\n\t\t\t\t\"SourceMapDevToolPlugin only takes one argument (pass an options object)\"\n\t\t\t);\n\t\t}\n\n\t\tif (!options) options = {};\n\n\t\tvalidateOptions(schema, options, \"SourceMap DevTool Plugin\");\n\n\t\t/** @type {string | false} */\n\t\tthis.sourceMapFilename = options.filename;\n\t\t/** @type {string | false} */\n\t\tthis.sourceMappingURLComment =\n\t\t\toptions.append === false\n\t\t\t\t? false\n\t\t\t\t: options.append || \"\\n//# sourceMappingURL=[url]\";\n\t\t/** @type {string | Function} */\n\t\tthis.moduleFilenameTemplate =\n\t\t\toptions.moduleFilenameTemplate || \"webpack://[namespace]/[resourcePath]\";\n\t\t/** @type {string | Function} */\n\t\tthis.fallbackModuleFilenameTemplate =\n\t\t\toptions.fallbackModuleFilenameTemplate ||\n\t\t\t\"webpack://[namespace]/[resourcePath]?[hash]\";\n\t\t/** @type {string} */\n\t\tthis.namespace = options.namespace || \"\";\n\t\t/** @type {SourceMapDevToolPluginOptions} */\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply compiler\n\t * @param {Compiler} compiler compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst sourceMapFilename = this.sourceMapFilename;\n\t\tconst sourceMappingURLComment = this.sourceMappingURLComment;\n\t\tconst moduleFilenameTemplate = this.moduleFilenameTemplate;\n\t\tconst namespace = this.namespace;\n\t\tconst fallbackModuleFilenameTemplate = this.fallbackModuleFilenameTemplate;\n\t\tconst requestShortener = compiler.requestShortener;\n\t\tconst options = this.options;\n\t\toptions.test = options.test || /\\.(m?js|css)($|\\?)/i;\n\n\t\tconst matchObject = ModuleFilenameHelpers.matchObject.bind(\n\t\t\tundefined,\n\t\t\toptions\n\t\t);\n\n\t\tcompiler.hooks.compilation.tap(\"SourceMapDevToolPlugin\", compilation => {\n\t\t\tnew SourceMapDevToolModuleOptionsPlugin(options).apply(compilation);\n\n\t\t\tcompilation.hooks.afterOptimizeChunkAssets.tap(\n\t\t\t\t/** @type {TODO} */\n\t\t\t\t({ name: \"SourceMapDevToolPlugin\", context: true }),\n\t\t\t\t/**\n\t\t\t\t * @param {object} context hook context\n\t\t\t\t * @param {Array<Chunk>} chunks resulted chunks\n\t\t\t\t * @throws {Error} throws error, if `sourceMapFilename === false && sourceMappingURLComment === false`\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\t(context, chunks) => {\n\t\t\t\t\t/** @type {Map<string | Module, string>} */\n\t\t\t\t\tconst moduleToSourceNameMapping = new Map();\n\t\t\t\t\t/**\n\t\t\t\t\t * @type {Function}\n\t\t\t\t\t * @returns {void}\n\t\t\t\t\t */\n\t\t\t\t\tconst reportProgress =\n\t\t\t\t\t\tcontext && context.reportProgress\n\t\t\t\t\t\t\t? context.reportProgress\n\t\t\t\t\t\t\t: () => {};\n\n\t\t\t\t\tconst files = [];\n\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\tfor (const file of chunk.files) {\n\t\t\t\t\t\t\tif (matchObject(file)) {\n\t\t\t\t\t\t\t\tfiles.push({\n\t\t\t\t\t\t\t\t\tfile,\n\t\t\t\t\t\t\t\t\tchunk\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treportProgress(0.0);\n\t\t\t\t\tconst tasks = [];\n\t\t\t\t\tfiles.forEach(({ file, chunk }, idx) => {\n\t\t\t\t\t\tconst asset = compilation.getAsset(file).source;\n\t\t\t\t\t\tconst cache = assetsCache.get(asset);\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * If presented in cache, reassigns assets. Cache assets already have source maps.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif (cache && cache.file === file) {\n\t\t\t\t\t\t\tfor (const cachedFile in cache.assets) {\n\t\t\t\t\t\t\t\tif (cachedFile === file) {\n\t\t\t\t\t\t\t\t\tcompilation.updateAsset(cachedFile, cache.assets[cachedFile]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcompilation.emitAsset(cachedFile, cache.assets[cachedFile], {\n\t\t\t\t\t\t\t\t\t\tdevelopment: true\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t * Add file to chunk, if not presented there\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\tif (cachedFile !== file) chunk.files.push(cachedFile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treportProgress(\n\t\t\t\t\t\t\t(0.5 * idx) / files.length,\n\t\t\t\t\t\t\tfile,\n\t\t\t\t\t\t\t\"generate SourceMap\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\t/** @type {SourceMapTask | undefined} */\n\t\t\t\t\t\tconst task = getTaskForFile(\n\t\t\t\t\t\t\tfile,\n\t\t\t\t\t\t\tasset,\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tcompilation\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (task) {\n\t\t\t\t\t\t\tconst modules = task.modules;\n\n\t\t\t\t\t\t\tfor (let idx = 0; idx < modules.length; idx++) {\n\t\t\t\t\t\t\t\tconst module = modules[idx];\n\t\t\t\t\t\t\t\tif (!moduleToSourceNameMapping.get(module)) {\n\t\t\t\t\t\t\t\t\tmoduleToSourceNameMapping.set(\n\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\tModuleFilenameHelpers.createFilename(\n\t\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmoduleFilenameTemplate: moduleFilenameTemplate,\n\t\t\t\t\t\t\t\t\t\t\t\tnamespace: namespace\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttasks.push(task);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treportProgress(0.5, \"resolve sources\");\n\t\t\t\t\t/** @type {Set<string>} */\n\t\t\t\t\tconst usedNamesSet = new Set(moduleToSourceNameMapping.values());\n\t\t\t\t\t/** @type {Set<string>} */\n\t\t\t\t\tconst conflictDetectionSet = new Set();\n\n\t\t\t\t\t/**\n\t\t\t\t\t * all modules in defined order (longest identifier first)\n\t\t\t\t\t * @type {Array<string | Module>}\n\t\t\t\t\t */\n\t\t\t\t\tconst allModules = Array.from(moduleToSourceNameMapping.keys()).sort(\n\t\t\t\t\t\t(a, b) => {\n\t\t\t\t\t\t\tconst ai = typeof a === \"string\" ? a : a.identifier();\n\t\t\t\t\t\t\tconst bi = typeof b === \"string\" ? b : b.identifier();\n\t\t\t\t\t\t\treturn ai.length - bi.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\t// find modules with conflicting source names\n\t\t\t\t\tfor (let idx = 0; idx < allModules.length; idx++) {\n\t\t\t\t\t\tconst module = allModules[idx];\n\t\t\t\t\t\tlet sourceName = moduleToSourceNameMapping.get(module);\n\t\t\t\t\t\tlet hasName = conflictDetectionSet.has(sourceName);\n\t\t\t\t\t\tif (!hasName) {\n\t\t\t\t\t\t\tconflictDetectionSet.add(sourceName);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// try the fallback name first\n\t\t\t\t\t\tsourceName = ModuleFilenameHelpers.createFilename(\n\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmoduleFilenameTemplate: fallbackModuleFilenameTemplate,\n\t\t\t\t\t\t\t\tnamespace: namespace\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t);\n\t\t\t\t\t\thasName = usedNamesSet.has(sourceName);\n\t\t\t\t\t\tif (!hasName) {\n\t\t\t\t\t\t\tmoduleToSourceNameMapping.set(module, sourceName);\n\t\t\t\t\t\t\tusedNamesSet.add(sourceName);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// elsewise just append stars until we have a valid name\n\t\t\t\t\t\twhile (hasName) {\n\t\t\t\t\t\t\tsourceName += \"*\";\n\t\t\t\t\t\t\thasName = usedNamesSet.has(sourceName);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmoduleToSourceNameMapping.set(module, sourceName);\n\t\t\t\t\t\tusedNamesSet.add(sourceName);\n\t\t\t\t\t}\n\t\t\t\t\ttasks.forEach((task, index) => {\n\t\t\t\t\t\treportProgress(\n\t\t\t\t\t\t\t0.5 + (0.5 * index) / tasks.length,\n\t\t\t\t\t\t\ttask.file,\n\t\t\t\t\t\t\t\"attach SourceMap\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst assets = Object.create(null);\n\t\t\t\t\t\tconst chunk = task.chunk;\n\t\t\t\t\t\tconst file = task.file;\n\t\t\t\t\t\tconst asset = task.asset;\n\t\t\t\t\t\tconst sourceMap = task.sourceMap;\n\t\t\t\t\t\tconst source = task.source;\n\t\t\t\t\t\tconst modules = task.modules;\n\t\t\t\t\t\tconst moduleFilenames = modules.map(m =>\n\t\t\t\t\t\t\tmoduleToSourceNameMapping.get(m)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsourceMap.sources = moduleFilenames;\n\t\t\t\t\t\tif (options.noSources) {\n\t\t\t\t\t\t\tsourceMap.sourcesContent = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsourceMap.sourceRoot = options.sourceRoot || \"\";\n\t\t\t\t\t\tsourceMap.file = file;\n\t\t\t\t\t\tassetsCache.set(asset, { file, assets });\n\t\t\t\t\t\t/** @type {string | false} */\n\t\t\t\t\t\tlet currentSourceMappingURLComment = sourceMappingURLComment;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcurrentSourceMappingURLComment !== false &&\n\t\t\t\t\t\t\t/\\.css($|\\?)/i.test(file)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcurrentSourceMappingURLComment = currentSourceMappingURLComment.replace(\n\t\t\t\t\t\t\t\t/^\\n\\/\\/(.*)$/,\n\t\t\t\t\t\t\t\t\"\\n/*$1*/\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst sourceMapString = JSON.stringify(sourceMap);\n\t\t\t\t\t\tif (sourceMapFilename) {\n\t\t\t\t\t\t\tlet filename = file;\n\t\t\t\t\t\t\tlet query = \"\";\n\t\t\t\t\t\t\tconst idx = filename.indexOf(\"?\");\n\t\t\t\t\t\t\tif (idx >= 0) {\n\t\t\t\t\t\t\t\tquery = filename.substr(idx);\n\t\t\t\t\t\t\t\tfilename = filename.substr(0, idx);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst pathParams = {\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tfilename: options.fileContext\n\t\t\t\t\t\t\t\t\t? path.relative(options.fileContext, filename)\n\t\t\t\t\t\t\t\t\t: filename,\n\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\tbasename: basename(filename),\n\t\t\t\t\t\t\t\tcontentHash: createHash(\"md4\")\n\t\t\t\t\t\t\t\t\t.update(sourceMapString)\n\t\t\t\t\t\t\t\t\t.digest(\"hex\")\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tlet sourceMapFile = compilation.getPath(\n\t\t\t\t\t\t\t\tsourceMapFilename,\n\t\t\t\t\t\t\t\tpathParams\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst sourceMapUrl = options.publicPath\n\t\t\t\t\t\t\t\t? options.publicPath + sourceMapFile.replace(/\\\\/g, \"/\")\n\t\t\t\t\t\t\t\t: path\n\t\t\t\t\t\t\t\t\t\t.relative(path.dirname(file), sourceMapFile)\n\t\t\t\t\t\t\t\t\t\t.replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Add source map url to compilation asset, if {@link currentSourceMappingURLComment} presented\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tif (currentSourceMappingURLComment !== false) {\n\t\t\t\t\t\t\t\tconst asset = new ConcatSource(\n\t\t\t\t\t\t\t\t\tnew RawSource(source),\n\t\t\t\t\t\t\t\t\tcompilation.getPath(\n\t\t\t\t\t\t\t\t\t\tcurrentSourceMappingURLComment,\n\t\t\t\t\t\t\t\t\t\tObject.assign({ url: sourceMapUrl }, pathParams)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tassets[file] = asset;\n\t\t\t\t\t\t\t\tcompilation.updateAsset(file, asset);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Add source map file to compilation assets and chunk files\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tconst asset = new RawSource(sourceMapString);\n\t\t\t\t\t\t\tassets[sourceMapFile] = asset;\n\t\t\t\t\t\t\tcompilation.emitAsset(sourceMapFile, asset, {\n\t\t\t\t\t\t\t\tdevelopment: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tchunk.files.push(sourceMapFile);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (currentSourceMappingURLComment === false) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\"SourceMapDevToolPlugin: append can't be false when no filename is provided\"\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Add source map as data url to asset\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tconst asset = new ConcatSource(\n\t\t\t\t\t\t\t\tnew RawSource(source),\n\t\t\t\t\t\t\t\tcurrentSourceMappingURLComment\n\t\t\t\t\t\t\t\t\t.replace(/\\[map\\]/g, () => sourceMapString)\n\t\t\t\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t\t\t\t/\\[url\\]/g,\n\t\t\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t\t\t\t`data:application/json;charset=utf-8;base64,${Buffer.from(\n\t\t\t\t\t\t\t\t\t\t\t\tsourceMapString,\n\t\t\t\t\t\t\t\t\t\t\t\t\"utf-8\"\n\t\t\t\t\t\t\t\t\t\t\t).toString(\"base64\")}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tassets[file] = asset;\n\t\t\t\t\t\t\tcompilation.updateAsset(file, asset);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treportProgress(1.0);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = SourceMapDevToolPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;EAAEC,YAAF;EAAgBC;AAAhB,IAA8BF,OAAO,CAAC,iBAAD,CAA3C;;AACA,MAAMG,qBAAqB,GAAGH,OAAO,CAAC,yBAAD,CAArC;;AACA,MAAMI,mCAAmC,GAAGJ,OAAO,CAAC,uCAAD,CAAnD;;AACA,MAAMK,UAAU,GAAGL,OAAO,CAAC,mBAAD,CAA1B;;AACA,MAAM;EAAEM;AAAF,IAAiBN,OAAO,CAAC,mBAAD,CAA9B;;AAEA,MAAMO,eAAe,GAAGP,OAAO,CAAC,cAAD,CAA/B;;AACA,MAAMQ,MAAM,GAAGR,OAAO,CAAC,gDAAD,CAAtB;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,MAAMS,QAAQ,GAAGC,IAAI,IAAI;EACxB,IAAI,CAACA,IAAI,CAACC,QAAL,CAAc,GAAd,CAAL,EAAyB,OAAOD,IAAP;EACzB,OAAOA,IAAI,CAACE,MAAL,CAAYF,IAAI,CAACG,WAAL,CAAiB,GAAjB,IAAwB,CAApC,CAAP;AACA,CAHD;AAKA;AACA;AACA;;;AACA,MAAMC,WAAW,GAAG,IAAIC,OAAJ,EAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAqBC,OAArB,EAA8BC,WAA9B,KAA8C;EACpE,IAAIC,MAAJ,EAAYC,SAAZ;EACA;AACD;AACA;;EACC,IAAIL,KAAK,CAACM,YAAV,EAAwB;IACvB,MAAMA,YAAY,GAAGN,KAAK,CAACM,YAAN,CAAmBJ,OAAnB,CAArB;IACAG,SAAS,GAAGC,YAAY,CAACC,GAAzB;IACAH,MAAM,GAAGE,YAAY,CAACF,MAAtB;EACA,CAJD,MAIO;IACNC,SAAS,GAAGL,KAAK,CAACO,GAAN,CAAUL,OAAV,CAAZ;IACAE,MAAM,GAAGJ,KAAK,CAACI,MAAN,EAAT;EACA;;EACD,IAAI,CAACC,SAAD,IAAc,OAAOD,MAAP,KAAkB,QAApC,EAA8C;EAC9C,MAAMI,OAAO,GAAGL,WAAW,CAACD,OAAZ,CAAoBM,OAApC;EACA,MAAMC,OAAO,GAAGJ,SAAS,CAACK,OAAV,CAAkBH,GAAlB,CAAsBH,MAAM,IAAI;IAC/C,IAAIA,MAAM,CAACO,UAAP,CAAkB,YAAlB,CAAJ,EAAqC;MACpCP,MAAM,GAAGhB,UAAU,CAACoB,OAAD,EAAUJ,MAAM,CAACQ,KAAP,CAAa,EAAb,CAAV,CAAnB;IACA;;IACD,MAAMC,MAAM,GAAGV,WAAW,CAACW,UAAZ,CAAuBV,MAAvB,CAAf;IACA,OAAOS,MAAM,IAAIT,MAAjB;EACA,CANe,CAAhB;EAQA,OAAO;IACNH,KADM;IAENF,IAFM;IAGNC,KAHM;IAINI,MAJM;IAKNC,SALM;IAMNI;EANM,CAAP;AAQA,CA/BD;;AAiCA,MAAMM,sBAAN,CAA6B;EAC5B;AACD;AACA;AACA;EACCC,WAAW,CAACd,OAAD,EAAU;IACpB,IAAIe,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;MACzB,MAAM,IAAIC,KAAJ,CACL,yEADK,CAAN;IAGA;;IAED,IAAI,CAACjB,OAAL,EAAcA,OAAO,GAAG,EAAV;IAEdb,eAAe,CAACC,MAAD,EAASY,OAAT,EAAkB,0BAAlB,CAAf;IAEA;;IACA,KAAKkB,iBAAL,GAAyBlB,OAAO,CAACmB,QAAjC;IACA;;IACA,KAAKC,uBAAL,GACCpB,OAAO,CAACqB,MAAR,KAAmB,KAAnB,GACG,KADH,GAEGrB,OAAO,CAACqB,MAAR,IAAkB,8BAHtB;IAIA;;IACA,KAAKC,sBAAL,GACCtB,OAAO,CAACsB,sBAAR,IAAkC,sCADnC;IAEA;;IACA,KAAKC,8BAAL,GACCvB,OAAO,CAACuB,8BAAR,IACA,6CAFD;IAGA;;IACA,KAAKC,SAAL,GAAiBxB,OAAO,CAACwB,SAAR,IAAqB,EAAtC;IACA;;IACA,KAAKxB,OAAL,GAAeA,OAAf;EACA;EAED;AACD;AACA;AACA;AACA;;;EACCyB,KAAK,CAACC,QAAD,EAAW;IACf,MAAMR,iBAAiB,GAAG,KAAKA,iBAA/B;IACA,MAAME,uBAAuB,GAAG,KAAKA,uBAArC;IACA,MAAME,sBAAsB,GAAG,KAAKA,sBAApC;IACA,MAAME,SAAS,GAAG,KAAKA,SAAvB;IACA,MAAMD,8BAA8B,GAAG,KAAKA,8BAA5C;IACA,MAAMI,gBAAgB,GAAGD,QAAQ,CAACC,gBAAlC;IACA,MAAM3B,OAAO,GAAG,KAAKA,OAArB;IACAA,OAAO,CAAC4B,IAAR,GAAe5B,OAAO,CAAC4B,IAAR,IAAgB,qBAA/B;IAEA,MAAMC,WAAW,GAAG9C,qBAAqB,CAAC8C,WAAtB,CAAkCC,IAAlC,CACnBC,SADmB,EAEnB/B,OAFmB,CAApB;IAKA0B,QAAQ,CAACM,KAAT,CAAe/B,WAAf,CAA2BgC,GAA3B,CAA+B,wBAA/B,EAAyDhC,WAAW,IAAI;MACvE,IAAIjB,mCAAJ,CAAwCgB,OAAxC,EAAiDyB,KAAjD,CAAuDxB,WAAvD;MAEAA,WAAW,CAAC+B,KAAZ,CAAkBE,wBAAlB,CAA2CD,GAA3C;MACC;MACC;QAAE3C,IAAI,EAAE,wBAAR;QAAkCgB,OAAO,EAAE;MAA3C,CAFF;MAGC;AACJ;AACA;AACA;AACA;AACA;MACI,CAACA,OAAD,EAAU6B,MAAV,KAAqB;QACpB;QACA,MAAMC,yBAAyB,GAAG,IAAIC,GAAJ,EAAlC;QACA;AACL;AACA;AACA;;QACK,MAAMC,cAAc,GACnBhC,OAAO,IAAIA,OAAO,CAACgC,cAAnB,GACGhC,OAAO,CAACgC,cADX,GAEG,MAAM,CAAE,CAHZ;QAKA,MAAMC,KAAK,GAAG,EAAd;;QACA,KAAK,MAAMxC,KAAX,IAAoBoC,MAApB,EAA4B;UAC3B,KAAK,MAAMtC,IAAX,IAAmBE,KAAK,CAACwC,KAAzB,EAAgC;YAC/B,IAAIV,WAAW,CAAChC,IAAD,CAAf,EAAuB;cACtB0C,KAAK,CAACC,IAAN,CAAW;gBACV3C,IADU;gBAEVE;cAFU,CAAX;YAIA;UACD;QACD;;QAEDuC,cAAc,CAAC,GAAD,CAAd;QACA,MAAMG,KAAK,GAAG,EAAd;QACAF,KAAK,CAACG,OAAN,CAAc,OAAkBC,GAAlB,KAA0B;UAAA,IAAzB;YAAE9C,IAAF;YAAQE;UAAR,CAAyB;UACvC,MAAMD,KAAK,GAAGG,WAAW,CAAC2C,QAAZ,CAAqB/C,IAArB,EAA2BK,MAAzC;UACA,MAAM2C,KAAK,GAAGnD,WAAW,CAACoD,GAAZ,CAAgBhD,KAAhB,CAAd;UACA;AACN;AACA;;UACM,IAAI+C,KAAK,IAAIA,KAAK,CAAChD,IAAN,KAAeA,IAA5B,EAAkC;YACjC,KAAK,MAAMkD,UAAX,IAAyBF,KAAK,CAACG,MAA/B,EAAuC;cACtC,IAAID,UAAU,KAAKlD,IAAnB,EAAyB;gBACxBI,WAAW,CAACgD,WAAZ,CAAwBF,UAAxB,EAAoCF,KAAK,CAACG,MAAN,CAAaD,UAAb,CAApC;cACA,CAFD,MAEO;gBACN9C,WAAW,CAACiD,SAAZ,CAAsBH,UAAtB,EAAkCF,KAAK,CAACG,MAAN,CAAaD,UAAb,CAAlC,EAA4D;kBAC3DI,WAAW,EAAE;gBAD8C,CAA5D;cAGA;cACD;AACR;AACA;;;cACQ,IAAIJ,UAAU,KAAKlD,IAAnB,EAAyBE,KAAK,CAACwC,KAAN,CAAYC,IAAZ,CAAiBO,UAAjB;YACzB;;YACD;UACA;;UAEDT,cAAc,CACZ,MAAMK,GAAP,GAAcJ,KAAK,CAACvB,MADP,EAEbnB,IAFa,EAGb,oBAHa,CAAd;UAKA;;UACA,MAAMuD,IAAI,GAAGxD,cAAc,CAC1BC,IAD0B,EAE1BC,KAF0B,EAG1BC,KAH0B,EAI1BC,OAJ0B,EAK1BC,WAL0B,CAA3B;;UAQA,IAAImD,IAAJ,EAAU;YACT,MAAM7C,OAAO,GAAG6C,IAAI,CAAC7C,OAArB;;YAEA,KAAK,IAAIoC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGpC,OAAO,CAACS,MAAhC,EAAwC2B,GAAG,EAA3C,EAA+C;cAC9C,MAAMhC,MAAM,GAAGJ,OAAO,CAACoC,GAAD,CAAtB;;cACA,IAAI,CAACP,yBAAyB,CAACU,GAA1B,CAA8BnC,MAA9B,CAAL,EAA4C;gBAC3CyB,yBAAyB,CAACiB,GAA1B,CACC1C,MADD,EAEC5B,qBAAqB,CAACuE,cAAtB,CACC3C,MADD,EAEC;kBACCW,sBAAsB,EAAEA,sBADzB;kBAECE,SAAS,EAAEA;gBAFZ,CAFD,EAMCG,gBAND,CAFD;cAWA;YACD;;YAEDc,KAAK,CAACD,IAAN,CAAWY,IAAX;UACA;QACD,CA3DD;QA6DAd,cAAc,CAAC,GAAD,EAAM,iBAAN,CAAd;QACA;;QACA,MAAMiB,YAAY,GAAG,IAAIC,GAAJ,CAAQpB,yBAAyB,CAACqB,MAA1B,EAAR,CAArB;QACA;;QACA,MAAMC,oBAAoB,GAAG,IAAIF,GAAJ,EAA7B;QAEA;AACL;AACA;AACA;;QACK,MAAMG,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWzB,yBAAyB,CAAC0B,IAA1B,EAAX,EAA6CC,IAA7C,CAClB,CAACC,CAAD,EAAIC,CAAJ,KAAU;UACT,MAAMC,EAAE,GAAG,OAAOF,CAAP,KAAa,QAAb,GAAwBA,CAAxB,GAA4BA,CAAC,CAACG,UAAF,EAAvC;UACA,MAAMC,EAAE,GAAG,OAAOH,CAAP,KAAa,QAAb,GAAwBA,CAAxB,GAA4BA,CAAC,CAACE,UAAF,EAAvC;UACA,OAAOD,EAAE,CAAClD,MAAH,GAAYoD,EAAE,CAACpD,MAAtB;QACA,CALiB,CAAnB,CAjGoB,CAyGpB;;QACA,KAAK,IAAI2B,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGgB,UAAU,CAAC3C,MAAnC,EAA2C2B,GAAG,EAA9C,EAAkD;UACjD,MAAMhC,MAAM,GAAGgD,UAAU,CAAChB,GAAD,CAAzB;UACA,IAAI0B,UAAU,GAAGjC,yBAAyB,CAACU,GAA1B,CAA8BnC,MAA9B,CAAjB;UACA,IAAI2D,OAAO,GAAGZ,oBAAoB,CAACa,GAArB,CAAyBF,UAAzB,CAAd;;UACA,IAAI,CAACC,OAAL,EAAc;YACbZ,oBAAoB,CAACc,GAArB,CAAyBH,UAAzB;YACA;UACA,CAPgD,CASjD;;;UACAA,UAAU,GAAGtF,qBAAqB,CAACuE,cAAtB,CACZ3C,MADY,EAEZ;YACCW,sBAAsB,EAAEC,8BADzB;YAECC,SAAS,EAAEA;UAFZ,CAFY,EAMZG,gBANY,CAAb;UAQA2C,OAAO,GAAGf,YAAY,CAACgB,GAAb,CAAiBF,UAAjB,CAAV;;UACA,IAAI,CAACC,OAAL,EAAc;YACblC,yBAAyB,CAACiB,GAA1B,CAA8B1C,MAA9B,EAAsC0D,UAAtC;YACAd,YAAY,CAACiB,GAAb,CAAiBH,UAAjB;YACA;UACA,CAvBgD,CAyBjD;;;UACA,OAAOC,OAAP,EAAgB;YACfD,UAAU,IAAI,GAAd;YACAC,OAAO,GAAGf,YAAY,CAACgB,GAAb,CAAiBF,UAAjB,CAAV;UACA;;UACDjC,yBAAyB,CAACiB,GAA1B,CAA8B1C,MAA9B,EAAsC0D,UAAtC;UACAd,YAAY,CAACiB,GAAb,CAAiBH,UAAjB;QACA;;QACD5B,KAAK,CAACC,OAAN,CAAc,CAACU,IAAD,EAAOqB,KAAP,KAAiB;UAC9BnC,cAAc,CACb,MAAO,MAAMmC,KAAP,GAAgBhC,KAAK,CAACzB,MADf,EAEboC,IAAI,CAACvD,IAFQ,EAGb,kBAHa,CAAd;UAKA,MAAMmD,MAAM,GAAG0B,MAAM,CAACC,MAAP,CAAc,IAAd,CAAf;UACA,MAAM5E,KAAK,GAAGqD,IAAI,CAACrD,KAAnB;UACA,MAAMF,IAAI,GAAGuD,IAAI,CAACvD,IAAlB;UACA,MAAMC,KAAK,GAAGsD,IAAI,CAACtD,KAAnB;UACA,MAAMK,SAAS,GAAGiD,IAAI,CAACjD,SAAvB;UACA,MAAMD,MAAM,GAAGkD,IAAI,CAAClD,MAApB;UACA,MAAMK,OAAO,GAAG6C,IAAI,CAAC7C,OAArB;UACA,MAAMqE,eAAe,GAAGrE,OAAO,CAACF,GAAR,CAAYwE,CAAC,IACpCzC,yBAAyB,CAACU,GAA1B,CAA8B+B,CAA9B,CADuB,CAAxB;UAGA1E,SAAS,CAACK,OAAV,GAAoBoE,eAApB;;UACA,IAAI5E,OAAO,CAAC8E,SAAZ,EAAuB;YACtB3E,SAAS,CAAC4E,cAAV,GAA2BhD,SAA3B;UACA;;UACD5B,SAAS,CAAC6E,UAAV,GAAuBhF,OAAO,CAACgF,UAAR,IAAsB,EAA7C;UACA7E,SAAS,CAACN,IAAV,GAAiBA,IAAjB;UACAH,WAAW,CAAC2D,GAAZ,CAAgBvD,KAAhB,EAAuB;YAAED,IAAF;YAAQmD;UAAR,CAAvB;UACA;;UACA,IAAIiC,8BAA8B,GAAG7D,uBAArC;;UACA,IACC6D,8BAA8B,KAAK,KAAnC,IACA,eAAerD,IAAf,CAAoB/B,IAApB,CAFD,EAGE;YACDoF,8BAA8B,GAAGA,8BAA8B,CAACC,OAA/B,CAChC,cADgC,EAEhC,UAFgC,CAAjC;UAIA;;UACD,MAAMC,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAelF,SAAf,CAAxB;;UACA,IAAIe,iBAAJ,EAAuB;YACtB,IAAIC,QAAQ,GAAGtB,IAAf;YACA,IAAIyF,KAAK,GAAG,EAAZ;YACA,MAAM3C,GAAG,GAAGxB,QAAQ,CAACoE,OAAT,CAAiB,GAAjB,CAAZ;;YACA,IAAI5C,GAAG,IAAI,CAAX,EAAc;cACb2C,KAAK,GAAGnE,QAAQ,CAAC3B,MAAT,CAAgBmD,GAAhB,CAAR;cACAxB,QAAQ,GAAGA,QAAQ,CAAC3B,MAAT,CAAgB,CAAhB,EAAmBmD,GAAnB,CAAX;YACA;;YACD,MAAM6C,UAAU,GAAG;cAClBzF,KADkB;cAElBoB,QAAQ,EAAEnB,OAAO,CAACyF,WAAR,GACP9G,IAAI,CAAC+G,QAAL,CAAc1F,OAAO,CAACyF,WAAtB,EAAmCtE,QAAnC,CADO,GAEPA,QAJe;cAKlBmE,KALkB;cAMlBjG,QAAQ,EAAEA,QAAQ,CAAC8B,QAAD,CANA;cAOlBwE,WAAW,EAAE1G,UAAU,CAAC,KAAD,CAAV,CACX2G,MADW,CACJT,eADI,EAEXU,MAFW,CAEJ,KAFI;YAPK,CAAnB;YAWA,IAAIC,aAAa,GAAG7F,WAAW,CAAC8F,OAAZ,CACnB7E,iBADmB,EAEnBsE,UAFmB,CAApB;YAIA,MAAMQ,YAAY,GAAGhG,OAAO,CAACiG,UAAR,GAClBjG,OAAO,CAACiG,UAAR,GAAqBH,aAAa,CAACZ,OAAd,CAAsB,KAAtB,EAA6B,GAA7B,CADH,GAElBvG,IAAI,CACH+G,QADD,CACU/G,IAAI,CAACuH,OAAL,CAAarG,IAAb,CADV,EAC8BiG,aAD9B,EAECZ,OAFD,CAES,KAFT,EAEgB,GAFhB,CAFH;YAKA;AACP;AACA;;YACO,IAAID,8BAA8B,KAAK,KAAvC,EAA8C;cAC7C,MAAMnF,KAAK,GAAG,IAAIjB,YAAJ,CACb,IAAIC,SAAJ,CAAcoB,MAAd,CADa,EAEbD,WAAW,CAAC8F,OAAZ,CACCd,8BADD,EAECP,MAAM,CAACyB,MAAP,CAAc;gBAAEC,GAAG,EAAEJ;cAAP,CAAd,EAAqCR,UAArC,CAFD,CAFa,CAAd;cAOAxC,MAAM,CAACnD,IAAD,CAAN,GAAeC,KAAf;cACAG,WAAW,CAACgD,WAAZ,CAAwBpD,IAAxB,EAA8BC,KAA9B;YACA;YACD;AACP;AACA;;;YACO,MAAMA,KAAK,GAAG,IAAIhB,SAAJ,CAAcqG,eAAd,CAAd;YACAnC,MAAM,CAAC8C,aAAD,CAAN,GAAwBhG,KAAxB;YACAG,WAAW,CAACiD,SAAZ,CAAsB4C,aAAtB,EAAqChG,KAArC,EAA4C;cAC3CqD,WAAW,EAAE;YAD8B,CAA5C;YAGApD,KAAK,CAACwC,KAAN,CAAYC,IAAZ,CAAiBsD,aAAjB;UACA,CAnDD,MAmDO;YACN,IAAIb,8BAA8B,KAAK,KAAvC,EAA8C;cAC7C,MAAM,IAAIhE,KAAJ,CACL,4EADK,CAAN;YAGA;YACD;AACP;AACA;;;YACO,MAAMnB,KAAK,GAAG,IAAIjB,YAAJ,CACb,IAAIC,SAAJ,CAAcoB,MAAd,CADa,EAEb+E,8BAA8B,CAC5BC,OADF,CACU,UADV,EACsB,MAAMC,eAD5B,EAEED,OAFF,CAGE,UAHF,EAIE,MACE,8CAA6CmB,MAAM,CAACxC,IAAP,CAC7CsB,eAD6C,EAE7C,OAF6C,EAG5CmB,QAH4C,CAGnC,QAHmC,CAGzB,EARxB,CAFa,CAAd;YAaAtD,MAAM,CAACnD,IAAD,CAAN,GAAeC,KAAf;YACAG,WAAW,CAACgD,WAAZ,CAAwBpD,IAAxB,EAA8BC,KAA9B;UACA;QACD,CA/GD;QAgHAwC,cAAc,CAAC,GAAD,CAAd;MACA,CArQF;IAuQA,CA1QD;EA2QA;;AAnU2B;;AAsU7B3B,MAAM,CAAC4F,OAAP,GAAiB1F,sBAAjB"},"metadata":{},"sourceType":"script"}