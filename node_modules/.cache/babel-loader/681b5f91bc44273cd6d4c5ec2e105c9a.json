{"ast":null,"code":"import BN from \"bn.js\";\nimport * as encoding from \"@walletconnect/encoding\";\nexport function convertArrayBufferToBuffer(arrBuf) {\n  return encoding.arrayToBuffer(new Uint8Array(arrBuf));\n}\nexport function convertArrayBufferToUtf8(arrBuf) {\n  return encoding.arrayToUtf8(new Uint8Array(arrBuf));\n}\nexport function convertArrayBufferToHex(arrBuf, noPrefix) {\n  return encoding.arrayToHex(new Uint8Array(arrBuf), !noPrefix);\n}\nexport function convertArrayBufferToNumber(arrBuf) {\n  return encoding.arrayToNumber(new Uint8Array(arrBuf));\n}\nexport function concatArrayBuffers() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return encoding.hexToArray(args.map(b => encoding.arrayToHex(new Uint8Array(b))).join(\"\")).buffer;\n}\nexport function convertBufferToArrayBuffer(buf) {\n  return encoding.bufferToArray(buf).buffer;\n}\nexport function convertBufferToUtf8(buf) {\n  return encoding.bufferToUtf8(buf);\n}\nexport function convertBufferToHex(buf, noPrefix) {\n  return encoding.bufferToHex(buf, !noPrefix);\n}\nexport function convertBufferToNumber(buf) {\n  return encoding.bufferToNumber(buf);\n}\nexport function concatBuffers() {\n  return encoding.concatBuffers(...arguments);\n}\nexport function convertUtf8ToArrayBuffer(utf8) {\n  return encoding.utf8ToArray(utf8).buffer;\n}\nexport function convertUtf8ToBuffer(utf8) {\n  return encoding.utf8ToBuffer(utf8);\n}\nexport function convertUtf8ToHex(utf8, noPrefix) {\n  return encoding.utf8ToHex(utf8, !noPrefix);\n}\nexport function convertUtf8ToNumber(utf8) {\n  return new BN(utf8, 10).toNumber();\n}\nexport function convertHexToBuffer(hex) {\n  return encoding.hexToBuffer(hex);\n}\nexport function convertHexToArrayBuffer(hex) {\n  return encoding.hexToArray(hex).buffer;\n}\nexport function convertHexToUtf8(hex) {\n  return encoding.hexToUtf8(hex);\n}\nexport function convertHexToNumber(hex) {\n  return new BN(encoding.removeHexPrefix(hex), \"hex\").toNumber();\n}\nexport function convertNumberToBuffer(num) {\n  return encoding.numberToBuffer(num);\n}\nexport function convertNumberToArrayBuffer(num) {\n  return encoding.numberToArray(num).buffer;\n}\nexport function convertNumberToUtf8(num) {\n  return new BN(num).toString();\n}\nexport function convertNumberToHex(num, noPrefix) {\n  const hex = encoding.removeHexPrefix(encoding.sanitizeHex(new BN(num).toString(16)));\n  return noPrefix ? hex : encoding.addHexPrefix(hex);\n}","map":{"version":3,"mappings":"AAAA,OAAOA,EAAP,MAAe,OAAf;AACA,OAAO,KAAKC,QAAZ,MAA0B,yBAA1B;AAIA,OAAM,SAAUC,0BAAV,CAAqCC,MAArC,EAAwD;EAC5D,OAAOF,QAAQ,CAACG,aAAT,CAAuB,IAAIC,UAAJ,CAAeF,MAAf,CAAvB,CAAP;AACD;AAED,OAAM,SAAUG,wBAAV,CAAmCH,MAAnC,EAAsD;EAC1D,OAAOF,QAAQ,CAACM,WAAT,CAAqB,IAAIF,UAAJ,CAAeF,MAAf,CAArB,CAAP;AACD;AAED,OAAM,SAAUK,uBAAV,CAAkCL,MAAlC,EAAuDM,QAAvD,EAAyE;EAC7E,OAAOR,QAAQ,CAACS,UAAT,CAAoB,IAAIL,UAAJ,CAAeF,MAAf,CAApB,EAA4C,CAACM,QAA7C,CAAP;AACD;AAED,OAAM,SAAUE,0BAAV,CAAqCR,MAArC,EAAwD;EAC5D,OAAOF,QAAQ,CAACW,aAAT,CAAuB,IAAIP,UAAJ,CAAeF,MAAf,CAAvB,CAAP;AACD;AAED,OAAM,SAAUU,kBAAV,GAAmD;EAAA,kCAAnBC,IAAmB;IAAnBA,IAAmB;EAAA;;EACvD,OAAOb,QAAQ,CAACc,UAAT,CAAoBD,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIhB,QAAQ,CAACS,UAAT,CAAoB,IAAIL,UAAJ,CAAeY,CAAf,CAApB,CAAd,EAAsDC,IAAtD,CAA2D,EAA3D,CAApB,EAAoFC,MAA3F;AACD;AAID,OAAM,SAAUC,0BAAV,CAAqCC,GAArC,EAAgD;EACpD,OAAOpB,QAAQ,CAACqB,aAAT,CAAuBD,GAAvB,EAA4BF,MAAnC;AACD;AAED,OAAM,SAAUI,mBAAV,CAA8BF,GAA9B,EAAyC;EAC7C,OAAOpB,QAAQ,CAACuB,YAAT,CAAsBH,GAAtB,CAAP;AACD;AAED,OAAM,SAAUI,kBAAV,CAA6BJ,GAA7B,EAA0CZ,QAA1C,EAA4D;EAChE,OAAOR,QAAQ,CAACyB,WAAT,CAAqBL,GAArB,EAA0B,CAACZ,QAA3B,CAAP;AACD;AAED,OAAM,SAAUkB,qBAAV,CAAgCN,GAAhC,EAA2C;EAC/C,OAAOpB,QAAQ,CAAC2B,cAAT,CAAwBP,GAAxB,CAAP;AACD;AAED,OAAM,SAAUQ,aAAV,GAAyC;EAC7C,OAAO5B,QAAQ,CAAC4B,aAAT,CAAuB,YAAvB,CAAP;AACD;AAID,OAAM,SAAUC,wBAAV,CAAmCC,IAAnC,EAA+C;EACnD,OAAO9B,QAAQ,CAAC+B,WAAT,CAAqBD,IAArB,EAA2BZ,MAAlC;AACD;AAED,OAAM,SAAUc,mBAAV,CAA8BF,IAA9B,EAA0C;EAC9C,OAAO9B,QAAQ,CAACiC,YAAT,CAAsBH,IAAtB,CAAP;AACD;AAED,OAAM,SAAUI,gBAAV,CAA2BJ,IAA3B,EAAyCtB,QAAzC,EAA2D;EAC/D,OAAOR,QAAQ,CAACmC,SAAT,CAAmBL,IAAnB,EAAyB,CAACtB,QAA1B,CAAP;AACD;AAED,OAAM,SAAU4B,mBAAV,CAA8BN,IAA9B,EAA0C;EAC9C,OAAO,IAAI/B,EAAJ,CAAO+B,IAAP,EAAa,EAAb,EAAiBO,QAAjB,EAAP;AACD;AAID,OAAM,SAAUC,kBAAV,CAA6BC,GAA7B,EAAwC;EAC5C,OAAOvC,QAAQ,CAACwC,WAAT,CAAqBD,GAArB,CAAP;AACD;AAED,OAAM,SAAUE,uBAAV,CAAkCF,GAAlC,EAA6C;EACjD,OAAOvC,QAAQ,CAACc,UAAT,CAAoByB,GAApB,EAAyBrB,MAAhC;AACD;AAED,OAAM,SAAUwB,gBAAV,CAA2BH,GAA3B,EAAsC;EAC1C,OAAOvC,QAAQ,CAAC2C,SAAT,CAAmBJ,GAAnB,CAAP;AACD;AAED,OAAM,SAAUK,kBAAV,CAA6BL,GAA7B,EAAwC;EAC5C,OAAO,IAAIxC,EAAJ,CAAOC,QAAQ,CAAC6C,eAAT,CAAyBN,GAAzB,CAAP,EAAsC,KAAtC,EAA6CF,QAA7C,EAAP;AACD;AAID,OAAM,SAAUS,qBAAV,CAAgCC,GAAhC,EAA2C;EAC/C,OAAO/C,QAAQ,CAACgD,cAAT,CAAwBD,GAAxB,CAAP;AACD;AAED,OAAM,SAAUE,0BAAV,CAAqCF,GAArC,EAAgD;EACpD,OAAO/C,QAAQ,CAACkD,aAAT,CAAuBH,GAAvB,EAA4B7B,MAAnC;AACD;AAED,OAAM,SAAUiC,mBAAV,CAA8BJ,GAA9B,EAAyC;EAC7C,OAAO,IAAIhD,EAAJ,CAAOgD,GAAP,EAAYK,QAAZ,EAAP;AACD;AAED,OAAM,SAAUC,kBAAV,CAA6BN,GAA7B,EAAmDvC,QAAnD,EAAqE;EACzE,MAAM+B,GAAG,GAAGvC,QAAQ,CAAC6C,eAAT,CAAyB7C,QAAQ,CAACsD,WAAT,CAAqB,IAAIvD,EAAJ,CAAOgD,GAAP,EAAYK,QAAZ,CAAqB,EAArB,CAArB,CAAzB,CAAZ;EACA,OAAO5C,QAAQ,GAAG+B,GAAH,GAASvC,QAAQ,CAACuD,YAAT,CAAsBhB,GAAtB,CAAxB;AACD","names":["BN","encoding","convertArrayBufferToBuffer","arrBuf","arrayToBuffer","Uint8Array","convertArrayBufferToUtf8","arrayToUtf8","convertArrayBufferToHex","noPrefix","arrayToHex","convertArrayBufferToNumber","arrayToNumber","concatArrayBuffers","args","hexToArray","map","b","join","buffer","convertBufferToArrayBuffer","buf","bufferToArray","convertBufferToUtf8","bufferToUtf8","convertBufferToHex","bufferToHex","convertBufferToNumber","bufferToNumber","concatBuffers","convertUtf8ToArrayBuffer","utf8","utf8ToArray","convertUtf8ToBuffer","utf8ToBuffer","convertUtf8ToHex","utf8ToHex","convertUtf8ToNumber","toNumber","convertHexToBuffer","hex","hexToBuffer","convertHexToArrayBuffer","convertHexToUtf8","hexToUtf8","convertHexToNumber","removeHexPrefix","convertNumberToBuffer","num","numberToBuffer","convertNumberToArrayBuffer","numberToArray","convertNumberToUtf8","toString","convertNumberToHex","sanitizeHex","addHexPrefix"],"sourceRoot":"","sources":["../../src/encoding.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}