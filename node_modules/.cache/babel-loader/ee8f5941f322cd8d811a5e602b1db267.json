{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"clear\"]}\n   */\n  async function clear() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({ ...options,\n        all: true\n      }),\n      headers: options.headers\n    });\n    const {\n      Peers\n    } = await res.json();\n    return {\n      Peers: Peers.map((\n      /** @type {string} */\n      ma) => new Multiaddr(ma))\n    };\n  }\n\n  return clear;\n});","map":{"version":3,"names":["configure","require","toUrlSearchParams","Multiaddr","module","exports","api","clear","options","res","post","signal","searchParams","all","headers","Peers","json","map","ma"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/bootstrap/clear.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Multiaddr } = require('multiaddr')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"clear\"]}\n   */\n  async function clear (options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        all: true\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => new Multiaddr(ma)) }\n  }\n\n  return clear\n})\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;EAAEE;AAAF,IAAgBF,OAAO,CAAC,WAAD,CAA7B;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,KAAf,GAAoC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAClC,MAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,cAAT,EAAyB;MACzCC,MAAM,EAAEH,OAAO,CAACG,MADyB;MAEzCC,YAAY,EAAEV,iBAAiB,CAAC,EAC9B,GAAGM,OAD2B;QAE9BK,GAAG,EAAE;MAFyB,CAAD,CAFU;MAMzCC,OAAO,EAAEN,OAAO,CAACM;IANwB,CAAzB,CAAlB;IASA,MAAM;MAAEC;IAAF,IAAY,MAAMN,GAAG,CAACO,IAAJ,EAAxB;IAEA,OAAO;MAAED,KAAK,EAAEA,KAAK,CAACE,GAAN,CAAU;MAAC;MAAsBC,EAAvB,KAA8B,IAAIf,SAAJ,CAAce,EAAd,CAAxC;IAAT,CAAP;EACD;;EAED,OAAOX,KAAP;AACD,CApByB,CAA1B"},"metadata":{},"sourceType":"script"}