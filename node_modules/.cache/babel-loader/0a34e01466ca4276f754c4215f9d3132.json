{"ast":null,"code":"'use strict';\n/**\n * Module dependencies\n */\n\nvar Snapdragon = require('snapdragon');\n\nvar define = require('define-property');\n\nvar extend = require('extend-shallow');\n/**\n * Local dependencies\n */\n\n\nvar compilers = require('./compilers');\n\nvar parsers = require('./parsers');\n/**\n * Customize Snapdragon parser and renderer\n */\n\n\nfunction Extglob(options) {\n  this.options = extend({\n    source: 'extglob'\n  }, options);\n  this.snapdragon = this.options.snapdragon || new Snapdragon(this.options);\n  this.snapdragon.patterns = this.snapdragon.patterns || {};\n  this.compiler = this.snapdragon.compiler;\n  this.parser = this.snapdragon.parser;\n  compilers(this.snapdragon);\n  parsers(this.snapdragon);\n  /**\n   * Override Snapdragon `.parse` method\n   */\n\n  define(this.snapdragon, 'parse', function (str, options) {\n    var parsed = Snapdragon.prototype.parse.apply(this, arguments);\n    parsed.input = str; // escape unmatched brace/bracket/parens\n\n    var last = this.parser.stack.pop();\n\n    if (last && this.options.strict !== true) {\n      var node = last.nodes[0];\n      node.val = '\\\\' + node.val;\n      var sibling = node.parent.nodes[1];\n\n      if (sibling.type === 'star') {\n        sibling.loose = true;\n      }\n    } // add non-enumerable parser reference\n\n\n    define(parsed, 'parser', this.parser);\n    return parsed;\n  });\n  /**\n   * Decorate `.parse` method\n   */\n\n  define(this, 'parse', function (ast, options) {\n    return this.snapdragon.parse.apply(this.snapdragon, arguments);\n  });\n  /**\n   * Decorate `.compile` method\n   */\n\n  define(this, 'compile', function (ast, options) {\n    return this.snapdragon.compile.apply(this.snapdragon, arguments);\n  });\n}\n/**\n * Expose `Extglob`\n */\n\n\nmodule.exports = Extglob;","map":{"version":3,"names":["Snapdragon","require","define","extend","compilers","parsers","Extglob","options","source","snapdragon","patterns","compiler","parser","str","parsed","prototype","parse","apply","arguments","input","last","stack","pop","strict","node","nodes","val","sibling","parent","type","loose","ast","compile","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/extglob/lib/extglob.js"],"sourcesContent":["'use strict';\n\n/**\n * Module dependencies\n */\n\nvar Snapdragon = require('snapdragon');\nvar define = require('define-property');\nvar extend = require('extend-shallow');\n\n/**\n * Local dependencies\n */\n\nvar compilers = require('./compilers');\nvar parsers = require('./parsers');\n\n/**\n * Customize Snapdragon parser and renderer\n */\n\nfunction Extglob(options) {\n  this.options = extend({source: 'extglob'}, options);\n  this.snapdragon = this.options.snapdragon || new Snapdragon(this.options);\n  this.snapdragon.patterns = this.snapdragon.patterns || {};\n  this.compiler = this.snapdragon.compiler;\n  this.parser = this.snapdragon.parser;\n\n  compilers(this.snapdragon);\n  parsers(this.snapdragon);\n\n  /**\n   * Override Snapdragon `.parse` method\n   */\n\n  define(this.snapdragon, 'parse', function(str, options) {\n    var parsed = Snapdragon.prototype.parse.apply(this, arguments);\n    parsed.input = str;\n\n    // escape unmatched brace/bracket/parens\n    var last = this.parser.stack.pop();\n    if (last && this.options.strict !== true) {\n      var node = last.nodes[0];\n      node.val = '\\\\' + node.val;\n      var sibling = node.parent.nodes[1];\n      if (sibling.type === 'star') {\n        sibling.loose = true;\n      }\n    }\n\n    // add non-enumerable parser reference\n    define(parsed, 'parser', this.parser);\n    return parsed;\n  });\n\n  /**\n   * Decorate `.parse` method\n   */\n\n  define(this, 'parse', function(ast, options) {\n    return this.snapdragon.parse.apply(this.snapdragon, arguments);\n  });\n\n  /**\n   * Decorate `.compile` method\n   */\n\n  define(this, 'compile', function(ast, options) {\n    return this.snapdragon.compile.apply(this.snapdragon, arguments);\n  });\n\n}\n\n/**\n * Expose `Extglob`\n */\n\nmodule.exports = Extglob;\n"],"mappings":"AAAA;AAEA;AACA;AACA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,gBAAD,CAApB;AAEA;AACA;AACA;;;AAEA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAII,OAAO,GAAGJ,OAAO,CAAC,WAAD,CAArB;AAEA;AACA;AACA;;;AAEA,SAASK,OAAT,CAAiBC,OAAjB,EAA0B;EACxB,KAAKA,OAAL,GAAeJ,MAAM,CAAC;IAACK,MAAM,EAAE;EAAT,CAAD,EAAsBD,OAAtB,CAArB;EACA,KAAKE,UAAL,GAAkB,KAAKF,OAAL,CAAaE,UAAb,IAA2B,IAAIT,UAAJ,CAAe,KAAKO,OAApB,CAA7C;EACA,KAAKE,UAAL,CAAgBC,QAAhB,GAA2B,KAAKD,UAAL,CAAgBC,QAAhB,IAA4B,EAAvD;EACA,KAAKC,QAAL,GAAgB,KAAKF,UAAL,CAAgBE,QAAhC;EACA,KAAKC,MAAL,GAAc,KAAKH,UAAL,CAAgBG,MAA9B;EAEAR,SAAS,CAAC,KAAKK,UAAN,CAAT;EACAJ,OAAO,CAAC,KAAKI,UAAN,CAAP;EAEA;AACF;AACA;;EAEEP,MAAM,CAAC,KAAKO,UAAN,EAAkB,OAAlB,EAA2B,UAASI,GAAT,EAAcN,OAAd,EAAuB;IACtD,IAAIO,MAAM,GAAGd,UAAU,CAACe,SAAX,CAAqBC,KAArB,CAA2BC,KAA3B,CAAiC,IAAjC,EAAuCC,SAAvC,CAAb;IACAJ,MAAM,CAACK,KAAP,GAAeN,GAAf,CAFsD,CAItD;;IACA,IAAIO,IAAI,GAAG,KAAKR,MAAL,CAAYS,KAAZ,CAAkBC,GAAlB,EAAX;;IACA,IAAIF,IAAI,IAAI,KAAKb,OAAL,CAAagB,MAAb,KAAwB,IAApC,EAA0C;MACxC,IAAIC,IAAI,GAAGJ,IAAI,CAACK,KAAL,CAAW,CAAX,CAAX;MACAD,IAAI,CAACE,GAAL,GAAW,OAAOF,IAAI,CAACE,GAAvB;MACA,IAAIC,OAAO,GAAGH,IAAI,CAACI,MAAL,CAAYH,KAAZ,CAAkB,CAAlB,CAAd;;MACA,IAAIE,OAAO,CAACE,IAAR,KAAiB,MAArB,EAA6B;QAC3BF,OAAO,CAACG,KAAR,GAAgB,IAAhB;MACD;IACF,CAbqD,CAetD;;;IACA5B,MAAM,CAACY,MAAD,EAAS,QAAT,EAAmB,KAAKF,MAAxB,CAAN;IACA,OAAOE,MAAP;EACD,CAlBK,CAAN;EAoBA;AACF;AACA;;EAEEZ,MAAM,CAAC,IAAD,EAAO,OAAP,EAAgB,UAAS6B,GAAT,EAAcxB,OAAd,EAAuB;IAC3C,OAAO,KAAKE,UAAL,CAAgBO,KAAhB,CAAsBC,KAAtB,CAA4B,KAAKR,UAAjC,EAA6CS,SAA7C,CAAP;EACD,CAFK,CAAN;EAIA;AACF;AACA;;EAEEhB,MAAM,CAAC,IAAD,EAAO,SAAP,EAAkB,UAAS6B,GAAT,EAAcxB,OAAd,EAAuB;IAC7C,OAAO,KAAKE,UAAL,CAAgBuB,OAAhB,CAAwBf,KAAxB,CAA8B,KAAKR,UAAnC,EAA+CS,SAA/C,CAAP;EACD,CAFK,CAAN;AAID;AAED;AACA;AACA;;;AAEAe,MAAM,CAACC,OAAP,GAAiB5B,OAAjB"},"metadata":{},"sourceType":"script"}