{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\n\n\nfunction toPin(type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  };\n\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n\n  return pin;\n}\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  async function* ls() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /** @type {any[]} */\n    let paths = [];\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({ ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    });\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) {\n        // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n        }\n\n        return;\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata);\n    }\n  }\n\n  return ls;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","toPin","type","cid","metadata","pin","parse","module","exports","api","ls","options","paths","Array","isArray","res","post","signal","searchParams","arg","map","path","stream","headers","ndjson","Keys","Object","keys","Type","Metadata","Cid"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/pin/ls.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  }\n\n  if (metadata) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {any[]} */\n    let paths = []\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n  return ls\n})\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASG,KAAT,CAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,QAA3B,EAAqC;EACnC;EACA,MAAMC,GAAG,GAAG;IACVH,IADU;IAEVC,GAAG,EAAEN,GAAG,CAACS,KAAJ,CAAUH,GAAV;EAFK,CAAZ;;EAKA,IAAIC,QAAJ,EAAc;IACZC,GAAG,CAACD,QAAJ,GAAeA,QAAf;EACD;;EAED,OAAOC,GAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBT,SAAS,CAACU,GAAG,IAAI;EAChC;AACF;AACA;EACE,gBAAiBC,EAAjB,GAAmC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IACjC;IACA,IAAIC,KAAK,GAAG,EAAZ;;IAEA,IAAID,OAAO,CAACC,KAAZ,EAAmB;MACjBA,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcH,OAAO,CAACC,KAAtB,IAA+BD,OAAO,CAACC,KAAvC,GAA+C,CAACD,OAAO,CAACC,KAAT,CAAvD;IACD;;IAED,MAAMG,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAJ,CAAS,QAAT,EAAmB;MACnCC,MAAM,EAAEN,OAAO,CAACM,MADmB;MAEnCC,YAAY,EAAElB,iBAAiB,CAAC,EAC9B,GAAGW,OAD2B;QAE9BQ,GAAG,EAAEP,KAAK,CAACQ,GAAN,CAAUC,IAAI,IAAK,GAAEA,IAAK,EAA1B,CAFyB;QAG9BC,MAAM,EAAE;MAHsB,CAAD,CAFI;MAOnCC,OAAO,EAAEZ,OAAO,CAACY;IAPkB,CAAnB,CAAlB;;IAUA,WAAW,MAAMlB,GAAjB,IAAwBU,GAAG,CAACS,MAAJ,EAAxB,EAAsC;MACpC,IAAInB,GAAG,CAACoB,IAAR,EAAc;QAAE;QACd,KAAK,MAAMtB,GAAX,IAAkBuB,MAAM,CAACC,IAAP,CAAYtB,GAAG,CAACoB,IAAhB,CAAlB,EAAyC;UACvC,MAAMxB,KAAK,CAACI,GAAG,CAACoB,IAAJ,CAAStB,GAAT,EAAcyB,IAAf,EAAqBzB,GAArB,EAA0BE,GAAG,CAACoB,IAAJ,CAAStB,GAAT,EAAc0B,QAAxC,CAAX;QACD;;QACD;MACD;;MAED,MAAM5B,KAAK,CAACI,GAAG,CAACuB,IAAL,EAAWvB,GAAG,CAACyB,GAAf,EAAoBzB,GAAG,CAACwB,QAAxB,CAAX;IACD;EACF;;EACD,OAAOnB,EAAP;AACD,CAlCyB,CAA1B"},"metadata":{},"sourceType":"script"}