{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"links\"]}\n   */\n  async function links(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('object/links', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return (data.Links || []).map((\n    /** @type {any} */\n    l) => ({\n      Name: l.Name,\n      Tsize: l.Size,\n      Hash: CID.parse(l.Hash)\n    }));\n  }\n\n  return links;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","links","cid","options","res","post","signal","searchParams","arg","Uint8Array","decode","headers","data","json","Links","map","l","Name","Tsize","Size","Hash","parse"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/object/links.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const res = await api.post('object/links', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Links || []).map((/** @type {any} */ l) => ({\n      Name: l.Name,\n      Tsize: l.Size,\n      Hash: CID.parse(l.Hash)\n    }))\n  }\n  return links\n})\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,KAAf,CAAsBC,GAAtB,EAAyC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACvC,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,cAAT,EAAyB;MACzCC,MAAM,EAAEH,OAAO,CAACG,MADyB;MAEzCC,YAAY,EAAEV,iBAAiB,CAAC;QAC9BW,GAAG,EAAG,GAAEN,GAAG,YAAYO,UAAf,GAA4Bf,GAAG,CAACgB,MAAJ,CAAWR,GAAX,CAA5B,GAA8CA,GAAI,EAD5B;QAE9B,GAAGC;MAF2B,CAAD,CAFU;MAMzCQ,OAAO,EAAER,OAAO,CAACQ;IANwB,CAAzB,CAAlB;IAQA,MAAMC,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAJ,EAAnB;IAEA,OAAO,CAACD,IAAI,CAACE,KAAL,IAAc,EAAf,EAAmBC,GAAnB,CAAuB;IAAC;IAAmBC,CAApB,MAA2B;MACvDC,IAAI,EAAED,CAAC,CAACC,IAD+C;MAEvDC,KAAK,EAAEF,CAAC,CAACG,IAF8C;MAGvDC,IAAI,EAAE1B,GAAG,CAAC2B,KAAJ,CAAUL,CAAC,CAACI,IAAZ;IAHiD,CAA3B,CAAvB,CAAP;EAKD;;EACD,OAAOnB,KAAP;AACD,CAtByB,CAA1B"},"metadata":{},"sourceType":"script"}