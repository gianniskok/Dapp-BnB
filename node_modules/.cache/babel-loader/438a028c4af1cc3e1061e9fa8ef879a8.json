{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({ ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json();\n    return (res.Keys || []).map((\n    /** @type {{ '/': string }} */\n    k) => CID.parse(k['/']));\n  }\n\n  return wantlistForPeer;\n});","map":{"version":3,"names":["CID","require","configure","toUrlSearchParams","module","exports","api","wantlistForPeer","peerId","options","res","post","signal","searchParams","peer","toString","headers","json","Keys","map","k","parse"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/bitswap/wantlist-for-peer.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlistForPeer\n})\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;EAChC;AACF;AACA;EACE,eAAeC,eAAf,CAAgCC,MAAhC,EAAsD;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACpD,MAAMC,GAAG,GAAG,MAAM,CAAC,MAAMJ,GAAG,CAACK,IAAJ,CAAS,kBAAT,EAA6B;MACpDC,MAAM,EAAEH,OAAO,CAACG,MADoC;MAEpDC,YAAY,EAAEV,iBAAiB,CAAC,EAC9B,GAAGM,OAD2B;QAE9BK,IAAI,EAAEN,MAAM,CAACO,QAAP;MAFwB,CAAD,CAFqB;MAMpDC,OAAO,EAAEP,OAAO,CAACO;IANmC,CAA7B,CAAP,EAOdC,IAPc,EAAlB;IASA,OAAO,CAACP,GAAG,CAACQ,IAAJ,IAAY,EAAb,EAAiBC,GAAjB,CAAqB;IAAC;IAA+BC,CAAhC,KAAsCpB,GAAG,CAACqB,KAAJ,CAAUD,CAAC,CAAC,GAAD,CAAX,CAA3D,CAAP;EACD;;EACD,OAAOb,eAAP;AACD,CAjByB,CAA1B"},"metadata":{},"sourceType":"script"}