{"ast":null,"code":"import _isTypedArray from \"is-typedarray\";\nimport typedArrayToBuffer from \"typedarray-to-buffer\";\nconst ENC_HEX = \"hex\";\nconst ENC_UTF8 = \"utf8\";\nconst ENC_BIN = \"binary\";\nconst TYPE_BUFFER = \"buffer\";\nconst TYPE_ARRAY = \"array\";\nconst TYPE_TYPED_ARRAY = \"typed-array\";\nconst TYPE_ARRAY_BUFFER = \"array-buffer\";\nconst STRING_ZERO = \"0\";\nexport function bufferToArray(buf) {\n  return new Uint8Array(buf);\n}\nexport function bufferToHex(buf) {\n  let prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const hex = buf.toString(ENC_HEX);\n  return prefixed ? addHexPrefix(hex) : hex;\n}\nexport function bufferToUtf8(buf) {\n  return buf.toString(ENC_UTF8);\n}\nexport function bufferToNumber(buf) {\n  return buf.readUIntBE(0, buf.length);\n}\nexport function bufferToBinary(buf) {\n  return arrayToBinary(bufferToArray(buf));\n}\nexport function arrayToBuffer(arr) {\n  return typedArrayToBuffer(arr);\n}\nexport function arrayToHex(arr) {\n  let prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return bufferToHex(arrayToBuffer(arr), prefixed);\n}\nexport function arrayToUtf8(arr) {\n  return bufferToUtf8(arrayToBuffer(arr));\n}\nexport function arrayToNumber(arr) {\n  return bufferToNumber(arrayToBuffer(arr));\n}\nexport function arrayToBinary(arr) {\n  return Array.from(arr).map(numberToBinary).join(\"\");\n}\nexport function hexToBuffer(hex) {\n  return Buffer.from(removeHexPrefix(hex), ENC_HEX);\n}\nexport function hexToArray(hex) {\n  return bufferToArray(hexToBuffer(hex));\n}\nexport function hexToUtf8(hex) {\n  return bufferToUtf8(hexToBuffer(hex));\n}\nexport function hexToNumber(hex) {\n  return arrayToNumber(hexToArray(hex));\n}\nexport function hexToBinary(hex) {\n  return arrayToBinary(hexToArray(hex));\n}\nexport function utf8ToBuffer(utf8) {\n  return Buffer.from(utf8, ENC_UTF8);\n}\nexport function utf8ToArray(utf8) {\n  return bufferToArray(utf8ToBuffer(utf8));\n}\nexport function utf8ToHex(utf8) {\n  let prefixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return bufferToHex(utf8ToBuffer(utf8), prefixed);\n}\nexport function utf8ToNumber(utf8) {\n  const num = parseInt(utf8, 10);\n  assert(isDefined(num), \"Number can only safely store up to 53 bits\");\n  return num;\n}\nexport function utf8ToBinary(utf8) {\n  return arrayToBinary(utf8ToArray(utf8));\n}\nexport function numberToBuffer(num) {\n  return binaryToBuffer(numberToBinary(num));\n}\nexport function numberToArray(num) {\n  return binaryToArray(numberToBinary(num));\n}\nexport function numberToHex(num, prefixed) {\n  return binaryToHex(numberToBinary(num), prefixed);\n}\nexport function numberToUtf8(num) {\n  return `${num}`;\n}\nexport function numberToBinary(num) {\n  const bin = (num >>> 0).toString(2);\n  return sanitizeBytes(bin);\n}\nexport function binaryToBuffer(bin) {\n  return arrayToBuffer(binaryToArray(bin));\n}\nexport function binaryToArray(bin) {\n  return new Uint8Array(splitBytes(bin).map(x => parseInt(x, 2)));\n}\nexport function binaryToHex(bin, prefixed) {\n  return arrayToHex(binaryToArray(bin), prefixed);\n}\nexport function binaryToUtf8(bin) {\n  return arrayToUtf8(binaryToArray(bin));\n}\nexport function binaryToNumber(bin) {\n  return arrayToNumber(binaryToArray(bin));\n}\nexport function isBinaryString(str) {\n  if (typeof str !== \"string\" || !new RegExp(/^[01]+$/).test(str)) {\n    return false;\n  }\n\n  if (str.length % 8 !== 0) {\n    return false;\n  }\n\n  return true;\n}\nexport function isHexString(str, length) {\n  if (typeof str !== \"string\" || !str.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && str.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\nexport function isBuffer(val) {\n  return Buffer.isBuffer(val);\n}\nexport function isTypedArray(val) {\n  return _isTypedArray.strict(val) && !isBuffer(val);\n}\nexport function isArrayBuffer(val) {\n  return !isTypedArray(val) && !isBuffer(val) && typeof val.byteLength !== \"undefined\";\n}\nexport function getType(val) {\n  if (isBuffer(val)) {\n    return TYPE_BUFFER;\n  } else if (isTypedArray(val)) {\n    return TYPE_TYPED_ARRAY;\n  } else if (isArrayBuffer(val)) {\n    return TYPE_ARRAY_BUFFER;\n  } else if (Array.isArray(val)) {\n    return TYPE_ARRAY;\n  } else {\n    return typeof val;\n  }\n}\nexport function getEncoding(str) {\n  if (isBinaryString(str)) {\n    return ENC_BIN;\n  }\n\n  if (isHexString(str)) {\n    return ENC_HEX;\n  }\n\n  return ENC_UTF8;\n}\nexport function concatBuffers() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const result = Buffer.concat(args);\n  return result;\n}\nexport function concatArrays() {\n  let result = [];\n\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  args.forEach(arg => result = result.concat(Array.from(arg)));\n  return new Uint8Array([...result]);\n}\nexport function trimLeft(data, length) {\n  const diff = data.length - length;\n\n  if (diff > 0) {\n    data = data.slice(diff);\n  }\n\n  return data;\n}\nexport function trimRight(data, length) {\n  return data.slice(0, length);\n}\nexport function calcByteLength(length) {\n  let byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  const remainder = length % byteSize;\n  return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;\n}\nexport function splitBytes(str) {\n  let byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  const bytes = sanitizeBytes(str).match(new RegExp(`.{${byteSize}}`, \"gi\"));\n  return Array.from(bytes || []);\n}\nexport function swapBytes(str) {\n  return splitBytes(str).map(reverseString).join(\"\");\n}\nexport function swapHex(str) {\n  return binaryToHex(swapBytes(hexToBinary(str)));\n}\nexport function sanitizeBytes(str) {\n  let byteSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  let padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;\n  return padLeft(str, calcByteLength(str.length, byteSize), padding);\n}\nexport function padLeft(str, length) {\n  let padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;\n  return padString(str, length, true, padding);\n}\nexport function padRight(str, length) {\n  let padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STRING_ZERO;\n  return padString(str, length, false, padding);\n}\nexport function removeHexPrefix(hex) {\n  return hex.replace(/^0x/, \"\");\n}\nexport function addHexPrefix(hex) {\n  return hex.startsWith(\"0x\") ? hex : `0x${hex}`;\n}\nexport function sanitizeHex(hex) {\n  hex = removeHexPrefix(hex);\n  hex = sanitizeBytes(hex, 2);\n\n  if (hex) {\n    hex = addHexPrefix(hex);\n  }\n\n  return hex;\n}\nexport function removeHexLeadingZeros(hex) {\n  const prefixed = hex.startsWith(\"0x\");\n  hex = removeHexPrefix(hex);\n  hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;\n  return prefixed ? addHexPrefix(hex) : hex;\n}\n\nfunction isUndefined(value) {\n  return typeof value === \"undefined\";\n}\n\nfunction isDefined(value) {\n  return !isUndefined(value);\n}\n\nfunction assert(assertion, errorMessage) {\n  if (!assertion) {\n    throw new Error(errorMessage);\n  }\n}\n\nfunction reverseString(str) {\n  return str.split(\"\").reverse().join(\"\");\n}\n\nfunction padString(str, length, left) {\n  let padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : STRING_ZERO;\n  const diff = length - str.length;\n  let result = str;\n\n  if (diff > 0) {\n    const pad = padding.repeat(diff);\n    result = left ? pad + str : str + pad;\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"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","names":["_isTypedArray","typedArrayToBuffer","ENC_HEX","ENC_UTF8","ENC_BIN","TYPE_BUFFER","TYPE_ARRAY","TYPE_TYPED_ARRAY","TYPE_ARRAY_BUFFER","STRING_ZERO","bufferToArray","buf","Uint8Array","bufferToHex","prefixed","hex","toString","addHexPrefix","bufferToUtf8","bufferToNumber","readUIntBE","length","bufferToBinary","arrayToBinary","arrayToBuffer","arr","arrayToHex","arrayToUtf8","arrayToNumber","Array","from","map","numberToBinary","join","hexToBuffer","Buffer","removeHexPrefix","hexToArray","hexToUtf8","hexToNumber","hexToBinary","utf8ToBuffer","utf8","utf8ToArray","utf8ToHex","utf8ToNumber","num","parseInt","assert","isDefined","utf8ToBinary","numberToBuffer","binaryToBuffer","numberToArray","binaryToArray","numberToHex","binaryToHex","numberToUtf8","bin","sanitizeBytes","splitBytes","x","binaryToUtf8","binaryToNumber","isBinaryString","str","RegExp","test","isHexString","match","isBuffer","val","isTypedArray","strict","isArrayBuffer","byteLength","getType","isArray","getEncoding","concatBuffers","args","result","concat","concatArrays","forEach","arg","trimLeft","data","diff","slice","trimRight","calcByteLength","byteSize","remainder","bytes","swapBytes","reverseString","swapHex","padding","padLeft","padString","padRight","replace","startsWith","sanitizeHex","removeHexLeadingZeros","substring","isUndefined","value","assertion","errorMessage","Error","split","reverse","left","pad","repeat"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}