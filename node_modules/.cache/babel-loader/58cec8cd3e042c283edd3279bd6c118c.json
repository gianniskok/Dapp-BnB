{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst getPaths = require(\"./getPaths\");\n\nconst forEachBail = require(\"./forEachBail\");\n\nmodule.exports = class SymlinkPlugin {\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    const fs = resolver.fileSystem;\n    resolver.getHook(this.source).tapAsync(\"SymlinkPlugin\", (request, resolveContext, callback) => {\n      const pathsResult = getPaths(request.path);\n      const pathSeqments = pathsResult.seqments;\n      const paths = pathsResult.paths;\n      let containsSymlink = false;\n      forEachBail.withIndex(paths, (path, idx, callback) => {\n        fs.readlink(path, (err, result) => {\n          if (!err && result) {\n            pathSeqments[idx] = result;\n            containsSymlink = true; // Shortcut when absolute symlink found\n\n            if (/^(\\/|[a-zA-Z]:($|\\\\))/.test(result)) return callback(null, idx);\n          }\n\n          callback();\n        });\n      }, (err, idx) => {\n        if (!containsSymlink) return callback();\n        const resultSeqments = typeof idx === \"number\" ? pathSeqments.slice(0, idx + 1) : pathSeqments.slice();\n        const result = resultSeqments.reverse().reduce((a, b) => {\n          return resolver.join(a, b);\n        });\n        const obj = Object.assign({}, request, {\n          path: result\n        });\n        resolver.doResolve(target, obj, \"resolved symlink to \" + result, resolveContext, callback);\n      });\n    });\n  }\n\n};","map":{"version":3,"names":["getPaths","require","forEachBail","module","exports","SymlinkPlugin","constructor","source","target","apply","resolver","ensureHook","fs","fileSystem","getHook","tapAsync","request","resolveContext","callback","pathsResult","path","pathSeqments","seqments","paths","containsSymlink","withIndex","idx","readlink","err","result","test","resultSeqments","slice","reverse","reduce","a","b","join","obj","Object","assign","doResolve"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/enhanced-resolve/lib/SymlinkPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst getPaths = require(\"./getPaths\");\nconst forEachBail = require(\"./forEachBail\");\n\nmodule.exports = class SymlinkPlugin {\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst fs = resolver.fileSystem;\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"SymlinkPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst pathsResult = getPaths(request.path);\n\t\t\t\tconst pathSeqments = pathsResult.seqments;\n\t\t\t\tconst paths = pathsResult.paths;\n\n\t\t\t\tlet containsSymlink = false;\n\t\t\t\tforEachBail.withIndex(\n\t\t\t\t\tpaths,\n\t\t\t\t\t(path, idx, callback) => {\n\t\t\t\t\t\tfs.readlink(path, (err, result) => {\n\t\t\t\t\t\t\tif (!err && result) {\n\t\t\t\t\t\t\t\tpathSeqments[idx] = result;\n\t\t\t\t\t\t\t\tcontainsSymlink = true;\n\t\t\t\t\t\t\t\t// Shortcut when absolute symlink found\n\t\t\t\t\t\t\t\tif (/^(\\/|[a-zA-Z]:($|\\\\))/.test(result))\n\t\t\t\t\t\t\t\t\treturn callback(null, idx);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t(err, idx) => {\n\t\t\t\t\t\tif (!containsSymlink) return callback();\n\t\t\t\t\t\tconst resultSeqments =\n\t\t\t\t\t\t\ttypeof idx === \"number\"\n\t\t\t\t\t\t\t\t? pathSeqments.slice(0, idx + 1)\n\t\t\t\t\t\t\t\t: pathSeqments.slice();\n\t\t\t\t\t\tconst result = resultSeqments.reverse().reduce((a, b) => {\n\t\t\t\t\t\t\treturn resolver.join(a, b);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst obj = Object.assign({}, request, {\n\t\t\t\t\t\t\tpath: result\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\"resolved symlink to \" + result,\n\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAA3B;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,aAAN,CAAoB;EACpCC,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;IAC3B,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;EACA;;EAEDC,KAAK,CAACC,QAAD,EAAW;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;IACA,MAAMI,EAAE,GAAGF,QAAQ,CAACG,UAApB;IACAH,QAAQ,CACNI,OADF,CACU,KAAKP,MADf,EAEEQ,QAFF,CAEW,eAFX,EAE4B,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;MACjE,MAAMC,WAAW,GAAGnB,QAAQ,CAACgB,OAAO,CAACI,IAAT,CAA5B;MACA,MAAMC,YAAY,GAAGF,WAAW,CAACG,QAAjC;MACA,MAAMC,KAAK,GAAGJ,WAAW,CAACI,KAA1B;MAEA,IAAIC,eAAe,GAAG,KAAtB;MACAtB,WAAW,CAACuB,SAAZ,CACCF,KADD,EAEC,CAACH,IAAD,EAAOM,GAAP,EAAYR,QAAZ,KAAyB;QACxBN,EAAE,CAACe,QAAH,CAAYP,IAAZ,EAAkB,CAACQ,GAAD,EAAMC,MAAN,KAAiB;UAClC,IAAI,CAACD,GAAD,IAAQC,MAAZ,EAAoB;YACnBR,YAAY,CAACK,GAAD,CAAZ,GAAoBG,MAApB;YACAL,eAAe,GAAG,IAAlB,CAFmB,CAGnB;;YACA,IAAI,wBAAwBM,IAAxB,CAA6BD,MAA7B,CAAJ,EACC,OAAOX,QAAQ,CAAC,IAAD,EAAOQ,GAAP,CAAf;UACD;;UACDR,QAAQ;QACR,CATD;MAUA,CAbF,EAcC,CAACU,GAAD,EAAMF,GAAN,KAAc;QACb,IAAI,CAACF,eAAL,EAAsB,OAAON,QAAQ,EAAf;QACtB,MAAMa,cAAc,GACnB,OAAOL,GAAP,KAAe,QAAf,GACGL,YAAY,CAACW,KAAb,CAAmB,CAAnB,EAAsBN,GAAG,GAAG,CAA5B,CADH,GAEGL,YAAY,CAACW,KAAb,EAHJ;QAIA,MAAMH,MAAM,GAAGE,cAAc,CAACE,OAAf,GAAyBC,MAAzB,CAAgC,CAACC,CAAD,EAAIC,CAAJ,KAAU;UACxD,OAAO1B,QAAQ,CAAC2B,IAAT,CAAcF,CAAd,EAAiBC,CAAjB,CAAP;QACA,CAFc,CAAf;QAGA,MAAME,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBxB,OAAlB,EAA2B;UACtCI,IAAI,EAAES;QADgC,CAA3B,CAAZ;QAGAnB,QAAQ,CAAC+B,SAAT,CACCjC,MADD,EAEC8B,GAFD,EAGC,yBAAyBT,MAH1B,EAICZ,cAJD,EAKCC,QALD;MAOA,CAjCF;IAmCA,CA3CF;EA4CA;;AArDmC,CAArC"},"metadata":{},"sourceType":"script"}