{"ast":null,"code":"'use strict';\n/**\n * Module dependencies\n */\n\nvar util = require('util');\n\nvar toRegex = require('to-regex');\n\nvar extend = require('extend-shallow');\n/**\n * Local dependencies\n */\n\n\nvar compilers = require('./lib/compilers');\n\nvar parsers = require('./lib/parsers');\n\nvar cache = require('./lib/cache');\n\nvar utils = require('./lib/utils');\n\nvar MAX_LENGTH = 1024 * 64;\n/**\n * The main function takes a list of strings and one or more\n * glob patterns to use for matching.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm(list, patterns[, options]);\n *\n * console.log(nm(['a.js', 'a.txt'], ['*.js']));\n * //=> [ 'a.js' ]\n * ```\n * @param {Array} `list` A list of strings to match\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array} Returns an array of matches\n * @summary false\n * @api public\n */\n\nfunction nanomatch(list, patterns, options) {\n  patterns = utils.arrayify(patterns);\n  list = utils.arrayify(list);\n  var len = patterns.length;\n\n  if (list.length === 0 || len === 0) {\n    return [];\n  }\n\n  if (len === 1) {\n    return nanomatch.match(list, patterns[0], options);\n  }\n\n  var negated = false;\n  var omit = [];\n  var keep = [];\n  var idx = -1;\n\n  while (++idx < len) {\n    var pattern = patterns[idx];\n\n    if (typeof pattern === 'string' && pattern.charCodeAt(0) === 33\n    /* ! */\n    ) {\n      omit.push.apply(omit, nanomatch.match(list, pattern.slice(1), options));\n      negated = true;\n    } else {\n      keep.push.apply(keep, nanomatch.match(list, pattern, options));\n    }\n  } // minimatch.match parity\n\n\n  if (negated && keep.length === 0) {\n    if (options && options.unixify === false) {\n      keep = list.slice();\n    } else {\n      var unixify = utils.unixify(options);\n\n      for (var i = 0; i < list.length; i++) {\n        keep.push(unixify(list[i]));\n      }\n    }\n  }\n\n  var matches = utils.diff(keep, omit);\n\n  if (!options || options.nodupes !== false) {\n    return utils.unique(matches);\n  }\n\n  return matches;\n}\n/**\n * Similar to the main function, but `pattern` must be a string.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.match(list, pattern[, options]);\n *\n * console.log(nm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));\n * //=> ['a.a', 'a.aa']\n * ```\n * @param {Array} `list` Array of strings to match\n * @param {String} `pattern` Glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array} Returns an array of matches\n * @api public\n */\n\n\nnanomatch.match = function (list, pattern, options) {\n  if (Array.isArray(pattern)) {\n    throw new TypeError('expected pattern to be a string');\n  }\n\n  var unixify = utils.unixify(options);\n  var isMatch = memoize('match', pattern, options, nanomatch.matcher);\n  var matches = [];\n  list = utils.arrayify(list);\n  var len = list.length;\n  var idx = -1;\n\n  while (++idx < len) {\n    var ele = list[idx];\n\n    if (ele === pattern || isMatch(ele)) {\n      matches.push(utils.value(ele, unixify, options));\n    }\n  } // if no options were passed, uniquify results and return\n\n\n  if (typeof options === 'undefined') {\n    return utils.unique(matches);\n  }\n\n  if (matches.length === 0) {\n    if (options.failglob === true) {\n      throw new Error('no matches found for \"' + pattern + '\"');\n    }\n\n    if (options.nonull === true || options.nullglob === true) {\n      return [options.unescape ? utils.unescape(pattern) : pattern];\n    }\n  } // if `opts.ignore` was defined, diff ignored list\n\n\n  if (options.ignore) {\n    matches = nanomatch.not(matches, options.ignore, options);\n  }\n\n  return options.nodupes !== false ? utils.unique(matches) : matches;\n};\n/**\n * Returns true if the specified `string` matches the given glob `pattern`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.isMatch(string, pattern[, options]);\n *\n * console.log(nm.isMatch('a.a', '*.a'));\n * //=> true\n * console.log(nm.isMatch('a.b', '*.a'));\n * //=> false\n * ```\n * @param {String} `string` String to match\n * @param {String} `pattern` Glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if the string matches the glob pattern.\n * @api public\n */\n\n\nnanomatch.isMatch = function (str, pattern, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string: \"' + util.inspect(str) + '\"');\n  }\n\n  if (utils.isEmptyString(str) || utils.isEmptyString(pattern)) {\n    return false;\n  }\n\n  var equals = utils.equalsPattern(options);\n\n  if (equals(str)) {\n    return true;\n  }\n\n  var isMatch = memoize('isMatch', pattern, options, nanomatch.matcher);\n  return isMatch(str);\n};\n/**\n * Returns true if some of the elements in the given `list` match any of the\n * given glob `patterns`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.some(list, patterns[, options]);\n *\n * console.log(nm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // true\n * console.log(nm.some(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param  {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\n\nnanomatch.some = function (list, patterns, options) {\n  if (typeof list === 'string') {\n    list = [list];\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    if (nanomatch(list[i], patterns, options).length === 1) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Returns true if every element in the given `list` matches\n * at least one of the given glob `patterns`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.every(list, patterns[, options]);\n *\n * console.log(nm.every('foo.js', ['foo.js']));\n * // true\n * console.log(nm.every(['foo.js', 'bar.js'], ['*.js']));\n * // true\n * console.log(nm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // false\n * console.log(nm.every(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param  {String|Array} `list` The string or array of strings to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\n\nnanomatch.every = function (list, patterns, options) {\n  if (typeof list === 'string') {\n    list = [list];\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    if (nanomatch(list[i], patterns, options).length !== 1) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Returns true if **any** of the given glob `patterns`\n * match the specified `string`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.any(string, patterns[, options]);\n *\n * console.log(nm.any('a.a', ['b.*', '*.a']));\n * //=> true\n * console.log(nm.any('a.a', 'b.*'));\n * //=> false\n * ```\n * @param  {String|Array} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\n\nnanomatch.any = function (str, patterns, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string: \"' + util.inspect(str) + '\"');\n  }\n\n  if (utils.isEmptyString(str) || utils.isEmptyString(patterns)) {\n    return false;\n  }\n\n  if (typeof patterns === 'string') {\n    patterns = [patterns];\n  }\n\n  for (var i = 0; i < patterns.length; i++) {\n    if (nanomatch.isMatch(str, patterns[i], options)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Returns true if **all** of the given `patterns`\n * match the specified string.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.all(string, patterns[, options]);\n *\n * console.log(nm.all('foo.js', ['foo.js']));\n * // true\n *\n * console.log(nm.all('foo.js', ['*.js', '!foo.js']));\n * // false\n *\n * console.log(nm.all('foo.js', ['*.js', 'foo.js']));\n * // true\n *\n * console.log(nm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));\n * // true\n * ```\n * @param  {String|Array} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\n\nnanomatch.all = function (str, patterns, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string: \"' + util.inspect(str) + '\"');\n  }\n\n  if (typeof patterns === 'string') {\n    patterns = [patterns];\n  }\n\n  for (var i = 0; i < patterns.length; i++) {\n    if (!nanomatch.isMatch(str, patterns[i], options)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Returns a list of strings that _**do not match any**_ of the given `patterns`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.not(list, patterns[, options]);\n *\n * console.log(nm.not(['a.a', 'b.b', 'c.c'], '*.a'));\n * //=> ['b.b', 'c.c']\n * ```\n * @param {Array} `list` Array of strings to match.\n * @param {String|Array} `patterns` One or more glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array} Returns an array of strings that **do not match** the given patterns.\n * @api public\n */\n\n\nnanomatch.not = function (list, patterns, options) {\n  var opts = extend({}, options);\n  var ignore = opts.ignore;\n  delete opts.ignore;\n  list = utils.arrayify(list);\n  var matches = utils.diff(list, nanomatch(list, patterns, opts));\n\n  if (ignore) {\n    matches = utils.diff(matches, nanomatch(list, ignore));\n  }\n\n  return opts.nodupes !== false ? utils.unique(matches) : matches;\n};\n/**\n * Returns true if the given `string` contains the given pattern. Similar\n * to [.isMatch](#isMatch) but the pattern can match any part of the string.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.contains(string, pattern[, options]);\n *\n * console.log(nm.contains('aa/bb/cc', '*b'));\n * //=> true\n * console.log(nm.contains('aa/bb/cc', '*d'));\n * //=> false\n * ```\n * @param {String} `str` The string to match.\n * @param {String|Array} `patterns` Glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if the patter matches any part of `str`.\n * @api public\n */\n\n\nnanomatch.contains = function (str, patterns, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string: \"' + util.inspect(str) + '\"');\n  }\n\n  if (typeof patterns === 'string') {\n    if (utils.isEmptyString(str) || utils.isEmptyString(patterns)) {\n      return false;\n    }\n\n    var equals = utils.equalsPattern(patterns, options);\n\n    if (equals(str)) {\n      return true;\n    }\n\n    var contains = utils.containsPattern(patterns, options);\n\n    if (contains(str)) {\n      return true;\n    }\n  }\n\n  var opts = extend({}, options, {\n    contains: true\n  });\n  return nanomatch.any(str, patterns, opts);\n};\n/**\n * Returns true if the given pattern and options should enable\n * the `matchBase` option.\n * @return {Boolean}\n * @api private\n */\n\n\nnanomatch.matchBase = function (pattern, options) {\n  if (pattern && pattern.indexOf('/') !== -1 || !options) return false;\n  return options.basename === true || options.matchBase === true;\n};\n/**\n * Filter the keys of the given object with the given `glob` pattern\n * and `options`. Does not attempt to match nested keys. If you need this feature,\n * use [glob-object][] instead.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.matchKeys(object, patterns[, options]);\n *\n * var obj = { aa: 'a', ab: 'b', ac: 'c' };\n * console.log(nm.matchKeys(obj, '*b'));\n * //=> { ab: 'b' }\n * ```\n * @param {Object} `object` The object with keys to filter.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Object} Returns an object with only keys that match the given patterns.\n * @api public\n */\n\n\nnanomatch.matchKeys = function (obj, patterns, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('expected the first argument to be an object');\n  }\n\n  var keys = nanomatch(Object.keys(obj), patterns, options);\n  return utils.pick(obj, keys);\n};\n/**\n * Returns a memoized matcher function from the given glob `pattern` and `options`.\n * The returned function takes a string to match as its only argument and returns\n * true if the string is a match.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.matcher(pattern[, options]);\n *\n * var isMatch = nm.matcher('*.!(*a)');\n * console.log(isMatch('a.a'));\n * //=> false\n * console.log(isMatch('a.b'));\n * //=> true\n * ```\n * @param {String} `pattern` Glob pattern\n * @param {Object} `options` See available [options](#options) for changing how matches are performed.\n * @return {Function} Returns a matcher function.\n * @api public\n */\n\n\nnanomatch.matcher = function matcher(pattern, options) {\n  if (utils.isEmptyString(pattern)) {\n    return function () {\n      return false;\n    };\n  }\n\n  if (Array.isArray(pattern)) {\n    return compose(pattern, options, matcher);\n  } // if pattern is a regex\n\n\n  if (pattern instanceof RegExp) {\n    return test(pattern);\n  } // if pattern is invalid\n\n\n  if (!utils.isString(pattern)) {\n    throw new TypeError('expected pattern to be an array, string or regex');\n  } // if pattern is a non-glob string\n\n\n  if (!utils.hasSpecialChars(pattern)) {\n    if (options && options.nocase === true) {\n      pattern = pattern.toLowerCase();\n    }\n\n    return utils.matchPath(pattern, options);\n  } // if pattern is a glob string\n\n\n  var re = nanomatch.makeRe(pattern, options); // if `options.matchBase` or `options.basename` is defined\n\n  if (nanomatch.matchBase(pattern, options)) {\n    return utils.matchBasename(re, options);\n  }\n\n  function test(regex) {\n    var equals = utils.equalsPattern(options);\n    var unixify = utils.unixify(options);\n    return function (str) {\n      if (equals(str)) {\n        return true;\n      }\n\n      if (regex.test(unixify(str))) {\n        return true;\n      }\n\n      return false;\n    };\n  } // create matcher function\n\n\n  var matcherFn = test(re); // set result object from compiler on matcher function,\n  // as a non-enumerable property. useful for debugging\n\n  utils.define(matcherFn, 'result', re.result);\n  return matcherFn;\n};\n/**\n * Returns an array of matches captured by `pattern` in `string, or\n * `null` if the pattern did not match.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.capture(pattern, string[, options]);\n *\n * console.log(nm.capture('test/*.js', 'test/foo.js'));\n * //=> ['foo']\n * console.log(nm.capture('test/*.js', 'foo/bar.css'));\n * //=> null\n * ```\n * @param {String} `pattern` Glob pattern to use for matching.\n * @param {String} `string` String to match\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns an array of captures if the string matches the glob pattern, otherwise `null`.\n * @api public\n */\n\n\nnanomatch.capture = function (pattern, str, options) {\n  var re = nanomatch.makeRe(pattern, extend({\n    capture: true\n  }, options));\n  var unixify = utils.unixify(options);\n\n  function match() {\n    return function (string) {\n      var match = re.exec(unixify(string));\n\n      if (!match) {\n        return null;\n      }\n\n      return match.slice(1);\n    };\n  }\n\n  var capture = memoize('capture', pattern, options, match);\n  return capture(str);\n};\n/**\n * Create a regular expression from the given glob `pattern`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.makeRe(pattern[, options]);\n *\n * console.log(nm.makeRe('*.js'));\n * //=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/\n * ```\n * @param {String} `pattern` A glob pattern to convert to regex.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed.\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\n\nnanomatch.makeRe = function (pattern, options) {\n  if (pattern instanceof RegExp) {\n    return pattern;\n  }\n\n  if (typeof pattern !== 'string') {\n    throw new TypeError('expected pattern to be a string');\n  }\n\n  if (pattern.length > MAX_LENGTH) {\n    throw new Error('expected pattern to be less than ' + MAX_LENGTH + ' characters');\n  }\n\n  function makeRe() {\n    var opts = utils.extend({\n      wrap: false\n    }, options);\n    var result = nanomatch.create(pattern, opts);\n    var regex = toRegex(result.output, opts);\n    utils.define(regex, 'result', result);\n    return regex;\n  }\n\n  return memoize('makeRe', pattern, options, makeRe);\n};\n/**\n * Parses the given glob `pattern` and returns an object with the compiled `output`\n * and optional source `map`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.create(pattern[, options]);\n *\n * console.log(nm.create('abc/*.js'));\n * // { options: { source: 'string', sourcemap: true },\n * //   state: {},\n * //   compilers:\n * //    { ... },\n * //   output: '(\\\\.[\\\\\\\\\\\\/])?abc\\\\/(?!\\\\.)(?=.)[^\\\\/]*?\\\\.js',\n * //   ast:\n * //    { type: 'root',\n * //      errors: [],\n * //      nodes:\n * //       [ ... ],\n * //      dot: false,\n * //      input: 'abc/*.js' },\n * //   parsingErrors: [],\n * //   map:\n * //    { version: 3,\n * //      sources: [ 'string' ],\n * //      names: [],\n * //      mappings: 'AAAA,GAAG,EAAC,kBAAC,EAAC,EAAE',\n * //      sourcesContent: [ 'abc/*.js' ] },\n * //   position: { line: 1, column: 28 },\n * //   content: {},\n * //   files: {},\n * //   idx: 6 }\n * ```\n * @param {String} `pattern` Glob pattern to parse and compile.\n * @param {Object} `options` Any [options](#options) to change how parsing and compiling is performed.\n * @return {Object} Returns an object with the parsed AST, compiled string and optional source map.\n * @api public\n */\n\n\nnanomatch.create = function (pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  function create() {\n    return nanomatch.compile(nanomatch.parse(pattern, options), options);\n  }\n\n  return memoize('create', pattern, options, create);\n};\n/**\n * Parse the given `str` with the given `options`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.parse(pattern[, options]);\n *\n * var ast = nm.parse('a/{b,c}/d');\n * console.log(ast);\n * // { type: 'root',\n * //   errors: [],\n * //   input: 'a/{b,c}/d',\n * //   nodes:\n * //    [ { type: 'bos', val: '' },\n * //      { type: 'text', val: 'a/' },\n * //      { type: 'brace',\n * //        nodes:\n * //         [ { type: 'brace.open', val: '{' },\n * //           { type: 'text', val: 'b,c' },\n * //           { type: 'brace.close', val: '}' } ] },\n * //      { type: 'text', val: '/d' },\n * //      { type: 'eos', val: '' } ] }\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object} Returns an AST\n * @api public\n */\n\n\nnanomatch.parse = function (pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  function parse() {\n    var snapdragon = utils.instantiate(null, options);\n    parsers(snapdragon, options);\n    var ast = snapdragon.parse(pattern, options);\n    utils.define(ast, 'snapdragon', snapdragon);\n    ast.input = pattern;\n    return ast;\n  }\n\n  return memoize('parse', pattern, options, parse);\n};\n/**\n * Compile the given `ast` or string with the given `options`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.compile(ast[, options]);\n *\n * var ast = nm.parse('a/{b,c}/d');\n * console.log(nm.compile(ast));\n * // { options: { source: 'string' },\n * //   state: {},\n * //   compilers:\n * //    { eos: [Function],\n * //      noop: [Function],\n * //      bos: [Function],\n * //      brace: [Function],\n * //      'brace.open': [Function],\n * //      text: [Function],\n * //      'brace.close': [Function] },\n * //   output: [ 'a/(b|c)/d' ],\n * //   ast:\n * //    { ... },\n * //   parsingErrors: [] }\n * ```\n * @param {Object|String} `ast`\n * @param {Object} `options`\n * @return {Object} Returns an object that has an `output` property with the compiled string.\n * @api public\n */\n\n\nnanomatch.compile = function (ast, options) {\n  if (typeof ast === 'string') {\n    ast = nanomatch.parse(ast, options);\n  }\n\n  function compile() {\n    var snapdragon = utils.instantiate(ast, options);\n    compilers(snapdragon, options);\n    return snapdragon.compile(ast, options);\n  }\n\n  return memoize('compile', ast.input, options, compile);\n};\n/**\n * Clear the regex cache.\n *\n * ```js\n * nm.clearCache();\n * ```\n * @api public\n */\n\n\nnanomatch.clearCache = function () {\n  nanomatch.cache.__data__ = {};\n};\n/**\n * Compose a matcher function with the given patterns.\n * This allows matcher functions to be compiled once and\n * called multiple times.\n */\n\n\nfunction compose(patterns, options, matcher) {\n  var matchers;\n  return memoize('compose', String(patterns), options, function () {\n    return function (file) {\n      // delay composition until it's invoked the first time,\n      // after that it won't be called again\n      if (!matchers) {\n        matchers = [];\n\n        for (var i = 0; i < patterns.length; i++) {\n          matchers.push(matcher(patterns[i], options));\n        }\n      }\n\n      var len = matchers.length;\n\n      while (len--) {\n        if (matchers[len](file) === true) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n  });\n}\n/**\n * Memoize a generated regex or function. A unique key is generated\n * from the `type` (usually method name), the `pattern`, and\n * user-defined options.\n */\n\n\nfunction memoize(type, pattern, options, fn) {\n  var key = utils.createKey(type + '=' + pattern, options);\n\n  if (options && options.cache === false) {\n    return fn(pattern, options);\n  }\n\n  if (cache.has(type, key)) {\n    return cache.get(type, key);\n  }\n\n  var val = fn(pattern, options);\n  cache.set(type, key, val);\n  return val;\n}\n/**\n * Expose compiler, parser and cache on `nanomatch`\n */\n\n\nnanomatch.compilers = compilers;\nnanomatch.parsers = parsers;\nnanomatch.cache = cache;\n/**\n * Expose `nanomatch`\n * @type {Function}\n */\n\nmodule.exports = nanomatch;","map":{"version":3,"names":["util","require","toRegex","extend","compilers","parsers","cache","utils","MAX_LENGTH","nanomatch","list","patterns","options","arrayify","len","length","match","negated","omit","keep","idx","pattern","charCodeAt","push","apply","slice","unixify","i","matches","diff","nodupes","unique","Array","isArray","TypeError","isMatch","memoize","matcher","ele","value","failglob","Error","nonull","nullglob","unescape","ignore","not","str","inspect","isEmptyString","equals","equalsPattern","some","every","any","all","opts","contains","containsPattern","matchBase","indexOf","basename","matchKeys","obj","isObject","keys","Object","pick","compose","RegExp","test","isString","hasSpecialChars","nocase","toLowerCase","matchPath","re","makeRe","matchBasename","regex","matcherFn","define","result","capture","string","exec","wrap","create","output","compile","parse","snapdragon","instantiate","ast","input","clearCache","__data__","matchers","String","file","type","fn","key","createKey","has","get","val","set","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/nanomatch/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Module dependencies\n */\n\nvar util = require('util');\nvar toRegex = require('to-regex');\nvar extend = require('extend-shallow');\n\n/**\n * Local dependencies\n */\n\nvar compilers = require('./lib/compilers');\nvar parsers = require('./lib/parsers');\nvar cache = require('./lib/cache');\nvar utils = require('./lib/utils');\nvar MAX_LENGTH = 1024 * 64;\n\n/**\n * The main function takes a list of strings and one or more\n * glob patterns to use for matching.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm(list, patterns[, options]);\n *\n * console.log(nm(['a.js', 'a.txt'], ['*.js']));\n * //=> [ 'a.js' ]\n * ```\n * @param {Array} `list` A list of strings to match\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array} Returns an array of matches\n * @summary false\n * @api public\n */\n\nfunction nanomatch(list, patterns, options) {\n  patterns = utils.arrayify(patterns);\n  list = utils.arrayify(list);\n\n  var len = patterns.length;\n  if (list.length === 0 || len === 0) {\n    return [];\n  }\n\n  if (len === 1) {\n    return nanomatch.match(list, patterns[0], options);\n  }\n\n  var negated = false;\n  var omit = [];\n  var keep = [];\n  var idx = -1;\n\n  while (++idx < len) {\n    var pattern = patterns[idx];\n\n    if (typeof pattern === 'string' && pattern.charCodeAt(0) === 33 /* ! */) {\n      omit.push.apply(omit, nanomatch.match(list, pattern.slice(1), options));\n      negated = true;\n    } else {\n      keep.push.apply(keep, nanomatch.match(list, pattern, options));\n    }\n  }\n\n  // minimatch.match parity\n  if (negated && keep.length === 0) {\n    if (options && options.unixify === false) {\n      keep = list.slice();\n    } else {\n      var unixify = utils.unixify(options);\n      for (var i = 0; i < list.length; i++) {\n        keep.push(unixify(list[i]));\n      }\n    }\n  }\n\n  var matches = utils.diff(keep, omit);\n  if (!options || options.nodupes !== false) {\n    return utils.unique(matches);\n  }\n\n  return matches;\n}\n\n/**\n * Similar to the main function, but `pattern` must be a string.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.match(list, pattern[, options]);\n *\n * console.log(nm.match(['a.a', 'a.aa', 'a.b', 'a.c'], '*.a'));\n * //=> ['a.a', 'a.aa']\n * ```\n * @param {Array} `list` Array of strings to match\n * @param {String} `pattern` Glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array} Returns an array of matches\n * @api public\n */\n\nnanomatch.match = function(list, pattern, options) {\n  if (Array.isArray(pattern)) {\n    throw new TypeError('expected pattern to be a string');\n  }\n\n  var unixify = utils.unixify(options);\n  var isMatch = memoize('match', pattern, options, nanomatch.matcher);\n  var matches = [];\n\n  list = utils.arrayify(list);\n  var len = list.length;\n  var idx = -1;\n\n  while (++idx < len) {\n    var ele = list[idx];\n    if (ele === pattern || isMatch(ele)) {\n      matches.push(utils.value(ele, unixify, options));\n    }\n  }\n\n  // if no options were passed, uniquify results and return\n  if (typeof options === 'undefined') {\n    return utils.unique(matches);\n  }\n\n  if (matches.length === 0) {\n    if (options.failglob === true) {\n      throw new Error('no matches found for \"' + pattern + '\"');\n    }\n    if (options.nonull === true || options.nullglob === true) {\n      return [options.unescape ? utils.unescape(pattern) : pattern];\n    }\n  }\n\n  // if `opts.ignore` was defined, diff ignored list\n  if (options.ignore) {\n    matches = nanomatch.not(matches, options.ignore, options);\n  }\n\n  return options.nodupes !== false ? utils.unique(matches) : matches;\n};\n\n/**\n * Returns true if the specified `string` matches the given glob `pattern`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.isMatch(string, pattern[, options]);\n *\n * console.log(nm.isMatch('a.a', '*.a'));\n * //=> true\n * console.log(nm.isMatch('a.b', '*.a'));\n * //=> false\n * ```\n * @param {String} `string` String to match\n * @param {String} `pattern` Glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if the string matches the glob pattern.\n * @api public\n */\n\nnanomatch.isMatch = function(str, pattern, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string: \"' + util.inspect(str) + '\"');\n  }\n\n  if (utils.isEmptyString(str) || utils.isEmptyString(pattern)) {\n    return false;\n  }\n\n  var equals = utils.equalsPattern(options);\n  if (equals(str)) {\n    return true;\n  }\n\n  var isMatch = memoize('isMatch', pattern, options, nanomatch.matcher);\n  return isMatch(str);\n};\n\n/**\n * Returns true if some of the elements in the given `list` match any of the\n * given glob `patterns`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.some(list, patterns[, options]);\n *\n * console.log(nm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // true\n * console.log(nm.some(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param  {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\nnanomatch.some = function(list, patterns, options) {\n  if (typeof list === 'string') {\n    list = [list];\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    if (nanomatch(list[i], patterns, options).length === 1) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Returns true if every element in the given `list` matches\n * at least one of the given glob `patterns`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.every(list, patterns[, options]);\n *\n * console.log(nm.every('foo.js', ['foo.js']));\n * // true\n * console.log(nm.every(['foo.js', 'bar.js'], ['*.js']));\n * // true\n * console.log(nm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // false\n * console.log(nm.every(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param  {String|Array} `list` The string or array of strings to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\nnanomatch.every = function(list, patterns, options) {\n  if (typeof list === 'string') {\n    list = [list];\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    if (nanomatch(list[i], patterns, options).length !== 1) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Returns true if **any** of the given glob `patterns`\n * match the specified `string`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.any(string, patterns[, options]);\n *\n * console.log(nm.any('a.a', ['b.*', '*.a']));\n * //=> true\n * console.log(nm.any('a.a', 'b.*'));\n * //=> false\n * ```\n * @param  {String|Array} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\nnanomatch.any = function(str, patterns, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string: \"' + util.inspect(str) + '\"');\n  }\n\n  if (utils.isEmptyString(str) || utils.isEmptyString(patterns)) {\n    return false;\n  }\n\n  if (typeof patterns === 'string') {\n    patterns = [patterns];\n  }\n\n  for (var i = 0; i < patterns.length; i++) {\n    if (nanomatch.isMatch(str, patterns[i], options)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if **all** of the given `patterns`\n * match the specified string.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.all(string, patterns[, options]);\n *\n * console.log(nm.all('foo.js', ['foo.js']));\n * // true\n *\n * console.log(nm.all('foo.js', ['*.js', '!foo.js']));\n * // false\n *\n * console.log(nm.all('foo.js', ['*.js', 'foo.js']));\n * // true\n *\n * console.log(nm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));\n * // true\n * ```\n * @param  {String|Array} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\nnanomatch.all = function(str, patterns, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string: \"' + util.inspect(str) + '\"');\n  }\n\n  if (typeof patterns === 'string') {\n    patterns = [patterns];\n  }\n\n  for (var i = 0; i < patterns.length; i++) {\n    if (!nanomatch.isMatch(str, patterns[i], options)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns a list of strings that _**do not match any**_ of the given `patterns`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.not(list, patterns[, options]);\n *\n * console.log(nm.not(['a.a', 'b.b', 'c.c'], '*.a'));\n * //=> ['b.b', 'c.c']\n * ```\n * @param {Array} `list` Array of strings to match.\n * @param {String|Array} `patterns` One or more glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array} Returns an array of strings that **do not match** the given patterns.\n * @api public\n */\n\nnanomatch.not = function(list, patterns, options) {\n  var opts = extend({}, options);\n  var ignore = opts.ignore;\n  delete opts.ignore;\n\n  list = utils.arrayify(list);\n\n  var matches = utils.diff(list, nanomatch(list, patterns, opts));\n  if (ignore) {\n    matches = utils.diff(matches, nanomatch(list, ignore));\n  }\n\n  return opts.nodupes !== false ? utils.unique(matches) : matches;\n};\n\n/**\n * Returns true if the given `string` contains the given pattern. Similar\n * to [.isMatch](#isMatch) but the pattern can match any part of the string.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.contains(string, pattern[, options]);\n *\n * console.log(nm.contains('aa/bb/cc', '*b'));\n * //=> true\n * console.log(nm.contains('aa/bb/cc', '*d'));\n * //=> false\n * ```\n * @param {String} `str` The string to match.\n * @param {String|Array} `patterns` Glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if the patter matches any part of `str`.\n * @api public\n */\n\nnanomatch.contains = function(str, patterns, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string: \"' + util.inspect(str) + '\"');\n  }\n\n  if (typeof patterns === 'string') {\n    if (utils.isEmptyString(str) || utils.isEmptyString(patterns)) {\n      return false;\n    }\n\n    var equals = utils.equalsPattern(patterns, options);\n    if (equals(str)) {\n      return true;\n    }\n    var contains = utils.containsPattern(patterns, options);\n    if (contains(str)) {\n      return true;\n    }\n  }\n\n  var opts = extend({}, options, {contains: true});\n  return nanomatch.any(str, patterns, opts);\n};\n\n/**\n * Returns true if the given pattern and options should enable\n * the `matchBase` option.\n * @return {Boolean}\n * @api private\n */\n\nnanomatch.matchBase = function(pattern, options) {\n  if (pattern && pattern.indexOf('/') !== -1 || !options) return false;\n  return options.basename === true || options.matchBase === true;\n};\n\n/**\n * Filter the keys of the given object with the given `glob` pattern\n * and `options`. Does not attempt to match nested keys. If you need this feature,\n * use [glob-object][] instead.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.matchKeys(object, patterns[, options]);\n *\n * var obj = { aa: 'a', ab: 'b', ac: 'c' };\n * console.log(nm.matchKeys(obj, '*b'));\n * //=> { ab: 'b' }\n * ```\n * @param {Object} `object` The object with keys to filter.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Object} Returns an object with only keys that match the given patterns.\n * @api public\n */\n\nnanomatch.matchKeys = function(obj, patterns, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('expected the first argument to be an object');\n  }\n  var keys = nanomatch(Object.keys(obj), patterns, options);\n  return utils.pick(obj, keys);\n};\n\n/**\n * Returns a memoized matcher function from the given glob `pattern` and `options`.\n * The returned function takes a string to match as its only argument and returns\n * true if the string is a match.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.matcher(pattern[, options]);\n *\n * var isMatch = nm.matcher('*.!(*a)');\n * console.log(isMatch('a.a'));\n * //=> false\n * console.log(isMatch('a.b'));\n * //=> true\n * ```\n * @param {String} `pattern` Glob pattern\n * @param {Object} `options` See available [options](#options) for changing how matches are performed.\n * @return {Function} Returns a matcher function.\n * @api public\n */\n\nnanomatch.matcher = function matcher(pattern, options) {\n  if (utils.isEmptyString(pattern)) {\n    return function() {\n      return false;\n    };\n  }\n\n  if (Array.isArray(pattern)) {\n    return compose(pattern, options, matcher);\n  }\n\n  // if pattern is a regex\n  if (pattern instanceof RegExp) {\n    return test(pattern);\n  }\n\n  // if pattern is invalid\n  if (!utils.isString(pattern)) {\n    throw new TypeError('expected pattern to be an array, string or regex');\n  }\n\n  // if pattern is a non-glob string\n  if (!utils.hasSpecialChars(pattern)) {\n    if (options && options.nocase === true) {\n      pattern = pattern.toLowerCase();\n    }\n    return utils.matchPath(pattern, options);\n  }\n\n  // if pattern is a glob string\n  var re = nanomatch.makeRe(pattern, options);\n\n  // if `options.matchBase` or `options.basename` is defined\n  if (nanomatch.matchBase(pattern, options)) {\n    return utils.matchBasename(re, options);\n  }\n\n  function test(regex) {\n    var equals = utils.equalsPattern(options);\n    var unixify = utils.unixify(options);\n\n    return function(str) {\n      if (equals(str)) {\n        return true;\n      }\n\n      if (regex.test(unixify(str))) {\n        return true;\n      }\n      return false;\n    };\n  }\n\n  // create matcher function\n  var matcherFn = test(re);\n  // set result object from compiler on matcher function,\n  // as a non-enumerable property. useful for debugging\n  utils.define(matcherFn, 'result', re.result);\n  return matcherFn;\n};\n\n/**\n * Returns an array of matches captured by `pattern` in `string, or\n * `null` if the pattern did not match.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.capture(pattern, string[, options]);\n *\n * console.log(nm.capture('test/*.js', 'test/foo.js'));\n * //=> ['foo']\n * console.log(nm.capture('test/*.js', 'foo/bar.css'));\n * //=> null\n * ```\n * @param {String} `pattern` Glob pattern to use for matching.\n * @param {String} `string` String to match\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns an array of captures if the string matches the glob pattern, otherwise `null`.\n * @api public\n */\n\nnanomatch.capture = function(pattern, str, options) {\n  var re = nanomatch.makeRe(pattern, extend({capture: true}, options));\n  var unixify = utils.unixify(options);\n\n  function match() {\n    return function(string) {\n      var match = re.exec(unixify(string));\n      if (!match) {\n        return null;\n      }\n\n      return match.slice(1);\n    };\n  }\n\n  var capture = memoize('capture', pattern, options, match);\n  return capture(str);\n};\n\n/**\n * Create a regular expression from the given glob `pattern`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.makeRe(pattern[, options]);\n *\n * console.log(nm.makeRe('*.js'));\n * //=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/\n * ```\n * @param {String} `pattern` A glob pattern to convert to regex.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed.\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\nnanomatch.makeRe = function(pattern, options) {\n  if (pattern instanceof RegExp) {\n    return pattern;\n  }\n\n  if (typeof pattern !== 'string') {\n    throw new TypeError('expected pattern to be a string');\n  }\n\n  if (pattern.length > MAX_LENGTH) {\n    throw new Error('expected pattern to be less than ' + MAX_LENGTH + ' characters');\n  }\n\n  function makeRe() {\n    var opts = utils.extend({wrap: false}, options);\n    var result = nanomatch.create(pattern, opts);\n    var regex = toRegex(result.output, opts);\n    utils.define(regex, 'result', result);\n    return regex;\n  }\n\n  return memoize('makeRe', pattern, options, makeRe);\n};\n\n/**\n * Parses the given glob `pattern` and returns an object with the compiled `output`\n * and optional source `map`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.create(pattern[, options]);\n *\n * console.log(nm.create('abc/*.js'));\n * // { options: { source: 'string', sourcemap: true },\n * //   state: {},\n * //   compilers:\n * //    { ... },\n * //   output: '(\\\\.[\\\\\\\\\\\\/])?abc\\\\/(?!\\\\.)(?=.)[^\\\\/]*?\\\\.js',\n * //   ast:\n * //    { type: 'root',\n * //      errors: [],\n * //      nodes:\n * //       [ ... ],\n * //      dot: false,\n * //      input: 'abc/*.js' },\n * //   parsingErrors: [],\n * //   map:\n * //    { version: 3,\n * //      sources: [ 'string' ],\n * //      names: [],\n * //      mappings: 'AAAA,GAAG,EAAC,kBAAC,EAAC,EAAE',\n * //      sourcesContent: [ 'abc/*.js' ] },\n * //   position: { line: 1, column: 28 },\n * //   content: {},\n * //   files: {},\n * //   idx: 6 }\n * ```\n * @param {String} `pattern` Glob pattern to parse and compile.\n * @param {Object} `options` Any [options](#options) to change how parsing and compiling is performed.\n * @return {Object} Returns an object with the parsed AST, compiled string and optional source map.\n * @api public\n */\n\nnanomatch.create = function(pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('expected a string');\n  }\n  function create() {\n    return nanomatch.compile(nanomatch.parse(pattern, options), options);\n  }\n  return memoize('create', pattern, options, create);\n};\n\n/**\n * Parse the given `str` with the given `options`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.parse(pattern[, options]);\n *\n * var ast = nm.parse('a/{b,c}/d');\n * console.log(ast);\n * // { type: 'root',\n * //   errors: [],\n * //   input: 'a/{b,c}/d',\n * //   nodes:\n * //    [ { type: 'bos', val: '' },\n * //      { type: 'text', val: 'a/' },\n * //      { type: 'brace',\n * //        nodes:\n * //         [ { type: 'brace.open', val: '{' },\n * //           { type: 'text', val: 'b,c' },\n * //           { type: 'brace.close', val: '}' } ] },\n * //      { type: 'text', val: '/d' },\n * //      { type: 'eos', val: '' } ] }\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object} Returns an AST\n * @api public\n */\n\nnanomatch.parse = function(pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  function parse() {\n    var snapdragon = utils.instantiate(null, options);\n    parsers(snapdragon, options);\n\n    var ast = snapdragon.parse(pattern, options);\n    utils.define(ast, 'snapdragon', snapdragon);\n    ast.input = pattern;\n    return ast;\n  }\n\n  return memoize('parse', pattern, options, parse);\n};\n\n/**\n * Compile the given `ast` or string with the given `options`.\n *\n * ```js\n * var nm = require('nanomatch');\n * nm.compile(ast[, options]);\n *\n * var ast = nm.parse('a/{b,c}/d');\n * console.log(nm.compile(ast));\n * // { options: { source: 'string' },\n * //   state: {},\n * //   compilers:\n * //    { eos: [Function],\n * //      noop: [Function],\n * //      bos: [Function],\n * //      brace: [Function],\n * //      'brace.open': [Function],\n * //      text: [Function],\n * //      'brace.close': [Function] },\n * //   output: [ 'a/(b|c)/d' ],\n * //   ast:\n * //    { ... },\n * //   parsingErrors: [] }\n * ```\n * @param {Object|String} `ast`\n * @param {Object} `options`\n * @return {Object} Returns an object that has an `output` property with the compiled string.\n * @api public\n */\n\nnanomatch.compile = function(ast, options) {\n  if (typeof ast === 'string') {\n    ast = nanomatch.parse(ast, options);\n  }\n\n  function compile() {\n    var snapdragon = utils.instantiate(ast, options);\n    compilers(snapdragon, options);\n    return snapdragon.compile(ast, options);\n  }\n\n  return memoize('compile', ast.input, options, compile);\n};\n\n/**\n * Clear the regex cache.\n *\n * ```js\n * nm.clearCache();\n * ```\n * @api public\n */\n\nnanomatch.clearCache = function() {\n  nanomatch.cache.__data__ = {};\n};\n\n/**\n * Compose a matcher function with the given patterns.\n * This allows matcher functions to be compiled once and\n * called multiple times.\n */\n\nfunction compose(patterns, options, matcher) {\n  var matchers;\n\n  return memoize('compose', String(patterns), options, function() {\n    return function(file) {\n      // delay composition until it's invoked the first time,\n      // after that it won't be called again\n      if (!matchers) {\n        matchers = [];\n        for (var i = 0; i < patterns.length; i++) {\n          matchers.push(matcher(patterns[i], options));\n        }\n      }\n\n      var len = matchers.length;\n      while (len--) {\n        if (matchers[len](file) === true) {\n          return true;\n        }\n      }\n      return false;\n    };\n  });\n}\n\n/**\n * Memoize a generated regex or function. A unique key is generated\n * from the `type` (usually method name), the `pattern`, and\n * user-defined options.\n */\n\nfunction memoize(type, pattern, options, fn) {\n  var key = utils.createKey(type + '=' + pattern, options);\n\n  if (options && options.cache === false) {\n    return fn(pattern, options);\n  }\n\n  if (cache.has(type, key)) {\n    return cache.get(type, key);\n  }\n\n  var val = fn(pattern, options);\n  cache.set(type, key, val);\n  return val;\n}\n\n/**\n * Expose compiler, parser and cache on `nanomatch`\n */\n\nnanomatch.compilers = compilers;\nnanomatch.parsers = parsers;\nnanomatch.cache = cache;\n\n/**\n * Expose `nanomatch`\n * @type {Function}\n */\n\nmodule.exports = nanomatch;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}