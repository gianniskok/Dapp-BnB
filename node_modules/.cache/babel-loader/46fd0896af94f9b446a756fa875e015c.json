{"ast":null,"code":"import leb from \"./leb\";\n/**\n * According to https://webassembly.github.io/spec/core/binary/values.html#binary-int\n * max = ceil(32/7)\n */\n\nexport var MAX_NUMBER_OF_BYTE_U32 = 5;\n/**\n * According to https://webassembly.github.io/spec/core/binary/values.html#binary-int\n * max = ceil(64/7)\n */\n\nexport var MAX_NUMBER_OF_BYTE_U64 = 10;\nexport function decodeInt64(encodedBuffer, index) {\n  return leb.decodeInt64(encodedBuffer, index);\n}\nexport function decodeUInt64(encodedBuffer, index) {\n  return leb.decodeUInt64(encodedBuffer, index);\n}\nexport function decodeInt32(encodedBuffer, index) {\n  return leb.decodeInt32(encodedBuffer, index);\n}\nexport function decodeUInt32(encodedBuffer, index) {\n  return leb.decodeUInt32(encodedBuffer, index);\n}\nexport function encodeU32(v) {\n  return leb.encodeUInt32(v);\n}\nexport function encodeI32(v) {\n  return leb.encodeInt32(v);\n}\nexport function encodeI64(v) {\n  return leb.encodeInt64(v);\n}","map":{"version":3,"names":["leb","MAX_NUMBER_OF_BYTE_U32","MAX_NUMBER_OF_BYTE_U64","decodeInt64","encodedBuffer","index","decodeUInt64","decodeInt32","decodeUInt32","encodeU32","v","encodeUInt32","encodeI32","encodeInt32","encodeI64","encodeInt64"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/@webassemblyjs/leb128/esm/index.js"],"sourcesContent":["import leb from \"./leb\";\n/**\n * According to https://webassembly.github.io/spec/core/binary/values.html#binary-int\n * max = ceil(32/7)\n */\n\nexport var MAX_NUMBER_OF_BYTE_U32 = 5;\n/**\n * According to https://webassembly.github.io/spec/core/binary/values.html#binary-int\n * max = ceil(64/7)\n */\n\nexport var MAX_NUMBER_OF_BYTE_U64 = 10;\nexport function decodeInt64(encodedBuffer, index) {\n  return leb.decodeInt64(encodedBuffer, index);\n}\nexport function decodeUInt64(encodedBuffer, index) {\n  return leb.decodeUInt64(encodedBuffer, index);\n}\nexport function decodeInt32(encodedBuffer, index) {\n  return leb.decodeInt32(encodedBuffer, index);\n}\nexport function decodeUInt32(encodedBuffer, index) {\n  return leb.decodeUInt32(encodedBuffer, index);\n}\nexport function encodeU32(v) {\n  return leb.encodeUInt32(v);\n}\nexport function encodeI32(v) {\n  return leb.encodeInt32(v);\n}\nexport function encodeI64(v) {\n  return leb.encodeInt64(v);\n}"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,sBAAsB,GAAG,CAA7B;AACP;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,sBAAsB,GAAG,EAA7B;AACP,OAAO,SAASC,WAAT,CAAqBC,aAArB,EAAoCC,KAApC,EAA2C;EAChD,OAAOL,GAAG,CAACG,WAAJ,CAAgBC,aAAhB,EAA+BC,KAA/B,CAAP;AACD;AACD,OAAO,SAASC,YAAT,CAAsBF,aAAtB,EAAqCC,KAArC,EAA4C;EACjD,OAAOL,GAAG,CAACM,YAAJ,CAAiBF,aAAjB,EAAgCC,KAAhC,CAAP;AACD;AACD,OAAO,SAASE,WAAT,CAAqBH,aAArB,EAAoCC,KAApC,EAA2C;EAChD,OAAOL,GAAG,CAACO,WAAJ,CAAgBH,aAAhB,EAA+BC,KAA/B,CAAP;AACD;AACD,OAAO,SAASG,YAAT,CAAsBJ,aAAtB,EAAqCC,KAArC,EAA4C;EACjD,OAAOL,GAAG,CAACQ,YAAJ,CAAiBJ,aAAjB,EAAgCC,KAAhC,CAAP;AACD;AACD,OAAO,SAASI,SAAT,CAAmBC,CAAnB,EAAsB;EAC3B,OAAOV,GAAG,CAACW,YAAJ,CAAiBD,CAAjB,CAAP;AACD;AACD,OAAO,SAASE,SAAT,CAAmBF,CAAnB,EAAsB;EAC3B,OAAOV,GAAG,CAACa,WAAJ,CAAgBH,CAAhB,CAAP;AACD;AACD,OAAO,SAASI,SAAT,CAAmBJ,CAAnB,EAAsB;EAC3B,OAAOV,GAAG,CAACe,WAAJ,CAAgBL,CAAhB,CAAP;AACD"},"metadata":{},"sourceType":"module"}