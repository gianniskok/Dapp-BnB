{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst errCode = require('err-code');\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {(cid: CID, options?: AbortOptions) => Promise<Uint8Array>} getBlock\n * @param {AbortOptions} [options]\n */\n\n\nconst resolve = async function* (cid, path, codecs, getBlock, options) {\n  /**\n   * @param {CID} cid\n   */\n  const load = async cid => {\n    const codec = await codecs.getCodec(cid.code);\n    const block = await getBlock(cid, options);\n    return codec.decode(block);\n  };\n\n  const parts = path.split('/').filter(Boolean);\n  let value = await load(cid);\n  let lastCid = cid;\n\n  if (!parts.length) {\n    yield {\n      value,\n      remainderPath: ''\n    };\n  } // End iteration if there isn't a CID to follow any more\n\n\n  while (parts.length) {\n    const key = parts.shift();\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH');\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key];\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      };\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK');\n    }\n\n    const cid = CID.asCID(value);\n\n    if (cid) {\n      lastCid = cid;\n      value = await load(value);\n    }\n  }\n};\n\nmodule.exports = resolve;","map":{"version":3,"names":["CID","require","errCode","resolve","cid","path","codecs","getBlock","options","load","codec","getCodec","code","block","decode","parts","split","filter","Boolean","value","lastCid","length","remainderPath","key","shift","Error","Object","prototype","hasOwnProperty","call","join","asCID","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/ipfs-http-client/src/lib/resolve.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst errCode = require('err-code')\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/src/multicodecs')} codecs\n * @param {(cid: CID, options?: AbortOptions) => Promise<Uint8Array>} getBlock\n * @param {AbortOptions} [options]\n */\nconst resolve = async function * (cid, path, codecs, getBlock, options) {\n  /**\n   * @param {CID} cid\n   */\n  const load = async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await getBlock(cid, options)\n\n    return codec.decode(block)\n  }\n\n  const parts = path.split('/').filter(Boolean)\n  let value = await load(cid)\n  let lastCid = cid\n\n  if (!parts.length) {\n    yield {\n      value,\n      remainderPath: ''\n    }\n  }\n\n  // End iteration if there isn't a CID to follow any more\n  while (parts.length) {\n    const key = parts.shift()\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH')\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key]\n\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      }\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK')\n    }\n\n    const cid = CID.asCID(value)\n\n    if (cid) {\n      lastCid = cid\n      value = await load(value)\n    }\n  }\n}\n\nmodule.exports = resolve\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,OAAO,GAAG,iBAAkBC,GAAlB,EAAuBC,IAAvB,EAA6BC,MAA7B,EAAqCC,QAArC,EAA+CC,OAA/C,EAAwD;EACtE;AACF;AACA;EACE,MAAMC,IAAI,GAAG,MAAOL,GAAP,IAAe;IAC1B,MAAMM,KAAK,GAAG,MAAMJ,MAAM,CAACK,QAAP,CAAgBP,GAAG,CAACQ,IAApB,CAApB;IACA,MAAMC,KAAK,GAAG,MAAMN,QAAQ,CAACH,GAAD,EAAMI,OAAN,CAA5B;IAEA,OAAOE,KAAK,CAACI,MAAN,CAAaD,KAAb,CAAP;EACD,CALD;;EAOA,MAAME,KAAK,GAAGV,IAAI,CAACW,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuBC,OAAvB,CAAd;EACA,IAAIC,KAAK,GAAG,MAAMV,IAAI,CAACL,GAAD,CAAtB;EACA,IAAIgB,OAAO,GAAGhB,GAAd;;EAEA,IAAI,CAACW,KAAK,CAACM,MAAX,EAAmB;IACjB,MAAM;MACJF,KADI;MAEJG,aAAa,EAAE;IAFX,CAAN;EAID,CApBqE,CAsBtE;;;EACA,OAAOP,KAAK,CAACM,MAAb,EAAqB;IACnB,MAAME,GAAG,GAAGR,KAAK,CAACS,KAAN,EAAZ;;IAEA,IAAI,CAACD,GAAL,EAAU;MACR,MAAMrB,OAAO,CAAC,IAAIuB,KAAJ,CAAW,2BAA0BpB,IAAK,GAA1C,CAAD,EAAgD,kBAAhD,CAAb;IACD;;IAED,IAAIqB,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCV,KAArC,EAA4CI,GAA5C,CAAJ,EAAsD;MACpDJ,KAAK,GAAGA,KAAK,CAACI,GAAD,CAAb;MAEA,MAAM;QACJJ,KADI;QAEJG,aAAa,EAAEP,KAAK,CAACe,IAAN,CAAW,GAAX;MAFX,CAAN;IAID,CAPD,MAOO;MACL,MAAM5B,OAAO,CAAC,IAAIuB,KAAJ,CAAW,kBAAiBF,GAAI,WAAUH,OAAQ,EAAlD,CAAD,EAAuD,aAAvD,CAAb;IACD;;IAED,MAAMhB,GAAG,GAAGJ,GAAG,CAAC+B,KAAJ,CAAUZ,KAAV,CAAZ;;IAEA,IAAIf,GAAJ,EAAS;MACPgB,OAAO,GAAGhB,GAAV;MACAe,KAAK,GAAG,MAAMV,IAAI,CAACU,KAAD,CAAlB;IACD;EACF;AACF,CAhDD;;AAkDAa,MAAM,CAACC,OAAP,GAAiB9B,OAAjB"},"metadata":{},"sourceType":"script"}