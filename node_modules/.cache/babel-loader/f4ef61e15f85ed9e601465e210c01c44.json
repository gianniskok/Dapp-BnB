{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\n\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\nconst WebAssemblyInInitialChunkError = require(\"./WebAssemblyInInitialChunkError\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nlet WebAssemblyGenerator;\nlet WebAssemblyJavascriptGenerator;\nlet WebAssemblyParser;\n\nclass WebAssemblyModulesPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  /**\n   * @param {Compiler} compiler compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"WebAssemblyModulesPlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyFactories.set(WebAssemblyImportDependency, normalModuleFactory);\n      compilation.dependencyFactories.set(WebAssemblyExportImportedDependency, normalModuleFactory);\n      normalModuleFactory.hooks.createParser.for(\"webassembly/experimental\").tap(\"WebAssemblyModulesPlugin\", () => {\n        if (WebAssemblyParser === undefined) {\n          WebAssemblyParser = require(\"./WebAssemblyParser\");\n        }\n\n        return new WebAssemblyParser();\n      });\n      normalModuleFactory.hooks.createGenerator.for(\"webassembly/experimental\").tap(\"WebAssemblyModulesPlugin\", () => {\n        if (WebAssemblyGenerator === undefined) {\n          WebAssemblyGenerator = require(\"./WebAssemblyGenerator\");\n        }\n\n        if (WebAssemblyJavascriptGenerator === undefined) {\n          WebAssemblyJavascriptGenerator = require(\"./WebAssemblyJavascriptGenerator\");\n        }\n\n        return Generator.byType({\n          javascript: new WebAssemblyJavascriptGenerator(),\n          webassembly: new WebAssemblyGenerator(this.options)\n        });\n      });\n      compilation.chunkTemplate.hooks.renderManifest.tap(\"WebAssemblyModulesPlugin\", (result, options) => {\n        const chunk = options.chunk;\n        const outputOptions = options.outputOptions;\n        const moduleTemplates = options.moduleTemplates;\n        const dependencyTemplates = options.dependencyTemplates;\n\n        for (const module of chunk.modulesIterable) {\n          if (module.type && module.type.startsWith(\"webassembly\")) {\n            const filenameTemplate = outputOptions.webassemblyModuleFilename;\n            result.push({\n              render: () => this.renderWebAssembly(module, moduleTemplates.webassembly, dependencyTemplates),\n              filenameTemplate,\n              pathOptions: {\n                module\n              },\n              identifier: `webassemblyModule${module.id}`,\n              hash: module.hash\n            });\n          }\n        }\n\n        return result;\n      });\n      compilation.hooks.afterChunks.tap(\"WebAssemblyModulesPlugin\", () => {\n        const initialWasmModules = new Set();\n\n        for (const chunk of compilation.chunks) {\n          if (chunk.canBeInitial()) {\n            for (const module of chunk.modulesIterable) {\n              if (module.type.startsWith(\"webassembly\")) {\n                initialWasmModules.add(module);\n              }\n            }\n          }\n        }\n\n        for (const module of initialWasmModules) {\n          compilation.errors.push(new WebAssemblyInInitialChunkError(module, compilation.requestShortener));\n        }\n      });\n    });\n  }\n\n  renderWebAssembly(module, moduleTemplate, dependencyTemplates) {\n    return moduleTemplate.render(module, dependencyTemplates, {});\n  }\n\n}\n\nmodule.exports = WebAssemblyModulesPlugin;","map":{"version":3,"names":["Generator","require","WebAssemblyExportImportedDependency","WebAssemblyImportDependency","WebAssemblyInInitialChunkError","WebAssemblyGenerator","WebAssemblyJavascriptGenerator","WebAssemblyParser","WebAssemblyModulesPlugin","constructor","options","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","createParser","for","undefined","createGenerator","byType","javascript","webassembly","chunkTemplate","renderManifest","result","chunk","outputOptions","moduleTemplates","dependencyTemplates","module","modulesIterable","type","startsWith","filenameTemplate","webassemblyModuleFilename","push","render","renderWebAssembly","pathOptions","identifier","id","hash","afterChunks","initialWasmModules","Set","chunks","canBeInitial","add","errors","requestShortener","moduleTemplate","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/webpack/lib/wasm/WebAssemblyModulesPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst WebAssemblyInInitialChunkError = require(\"./WebAssemblyInInitialChunkError\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nlet WebAssemblyGenerator;\nlet WebAssemblyJavascriptGenerator;\nlet WebAssemblyParser;\n\nclass WebAssemblyModulesPlugin {\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"WebAssemblyModulesPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyImportDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyExportImportedDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"webassembly/experimental\")\n\t\t\t\t\t.tap(\"WebAssemblyModulesPlugin\", () => {\n\t\t\t\t\t\tif (WebAssemblyParser === undefined) {\n\t\t\t\t\t\t\tWebAssemblyParser = require(\"./WebAssemblyParser\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn new WebAssemblyParser();\n\t\t\t\t\t});\n\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(\"webassembly/experimental\")\n\t\t\t\t\t.tap(\"WebAssemblyModulesPlugin\", () => {\n\t\t\t\t\t\tif (WebAssemblyGenerator === undefined) {\n\t\t\t\t\t\t\tWebAssemblyGenerator = require(\"./WebAssemblyGenerator\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (WebAssemblyJavascriptGenerator === undefined) {\n\t\t\t\t\t\t\tWebAssemblyJavascriptGenerator = require(\"./WebAssemblyJavascriptGenerator\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Generator.byType({\n\t\t\t\t\t\t\tjavascript: new WebAssemblyJavascriptGenerator(),\n\t\t\t\t\t\t\twebassembly: new WebAssemblyGenerator(this.options)\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.chunkTemplate.hooks.renderManifest.tap(\n\t\t\t\t\t\"WebAssemblyModulesPlugin\",\n\t\t\t\t\t(result, options) => {\n\t\t\t\t\t\tconst chunk = options.chunk;\n\t\t\t\t\t\tconst outputOptions = options.outputOptions;\n\t\t\t\t\t\tconst moduleTemplates = options.moduleTemplates;\n\t\t\t\t\t\tconst dependencyTemplates = options.dependencyTemplates;\n\n\t\t\t\t\t\tfor (const module of chunk.modulesIterable) {\n\t\t\t\t\t\t\tif (module.type && module.type.startsWith(\"webassembly\")) {\n\t\t\t\t\t\t\t\tconst filenameTemplate =\n\t\t\t\t\t\t\t\t\toutputOptions.webassemblyModuleFilename;\n\n\t\t\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t\t\trender: () =>\n\t\t\t\t\t\t\t\t\t\tthis.renderWebAssembly(\n\t\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\t\tmoduleTemplates.webassembly,\n\t\t\t\t\t\t\t\t\t\t\tdependencyTemplates\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tfilenameTemplate,\n\t\t\t\t\t\t\t\t\tpathOptions: {\n\t\t\t\t\t\t\t\t\t\tmodule\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tidentifier: `webassemblyModule${module.id}`,\n\t\t\t\t\t\t\t\t\thash: module.hash\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tcompilation.hooks.afterChunks.tap(\"WebAssemblyModulesPlugin\", () => {\n\t\t\t\t\tconst initialWasmModules = new Set();\n\t\t\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\t\t\tif (chunk.canBeInitial()) {\n\t\t\t\t\t\t\tfor (const module of chunk.modulesIterable) {\n\t\t\t\t\t\t\t\tif (module.type.startsWith(\"webassembly\")) {\n\t\t\t\t\t\t\t\t\tinitialWasmModules.add(module);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const module of initialWasmModules) {\n\t\t\t\t\t\tcompilation.errors.push(\n\t\t\t\t\t\t\tnew WebAssemblyInInitialChunkError(\n\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\tcompilation.requestShortener\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n\n\trenderWebAssembly(module, moduleTemplate, dependencyTemplates) {\n\t\treturn moduleTemplate.render(module, dependencyTemplates, {});\n\t}\n}\n\nmodule.exports = WebAssemblyModulesPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}