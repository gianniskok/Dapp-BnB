{"ast":null,"code":"'use strict';\n\nvar brackets = require('expand-brackets');\n\nvar define = require('define-property');\n\nvar utils = require('./utils');\n/**\n * Characters to use in text regex (we want to \"not\" match\n * characters that are matched by other parsers)\n */\n\n\nvar TEXT_REGEX = '([!@*?+]?\\\\(|\\\\)|[*?.+\\\\\\\\]|\\\\[:?(?=.*\\\\])|:?\\\\])+';\nvar not = utils.createRegex(TEXT_REGEX);\n/**\n * Extglob parsers\n */\n\nfunction parsers(extglob) {\n  extglob.state = extglob.state || {};\n  /**\n   * Use `expand-brackets` parsers\n   */\n\n  extglob.use(brackets.parsers);\n  extglob.parser.sets.paren = extglob.parser.sets.paren || [];\n  extglob.parser\n  /**\n   * Extglob open: \"*(\"\n   */\n  .capture('paren.open', function () {\n    var parsed = this.parsed;\n    var pos = this.position();\n    var m = this.match(/^([!@*?+])?\\(/);\n    if (!m) return;\n    var prev = this.prev();\n    var prefix = m[1];\n    var val = m[0];\n    var open = pos({\n      type: 'paren.open',\n      parsed: parsed,\n      val: val\n    });\n    var node = pos({\n      type: 'paren',\n      prefix: prefix,\n      nodes: [open]\n    }); // if nested negation extglobs, just cancel them out to simplify\n\n    if (prefix === '!' && prev.type === 'paren' && prev.prefix === '!') {\n      prev.prefix = '@';\n      node.prefix = '@';\n    }\n\n    define(node, 'rest', this.input);\n    define(node, 'parsed', parsed);\n    define(node, 'parent', prev);\n    define(open, 'parent', node);\n    this.push('paren', node);\n    prev.nodes.push(node);\n  })\n  /**\n   * Extglob close: \")\"\n   */\n  .capture('paren.close', function () {\n    var parsed = this.parsed;\n    var pos = this.position();\n    var m = this.match(/^\\)/);\n    if (!m) return;\n    var parent = this.pop('paren');\n    var node = pos({\n      type: 'paren.close',\n      rest: this.input,\n      parsed: parsed,\n      val: m[0]\n    });\n\n    if (!this.isType(parent, 'paren')) {\n      if (this.options.strict) {\n        throw new Error('missing opening paren: \"(\"');\n      }\n\n      node.escaped = true;\n      return node;\n    }\n\n    node.prefix = parent.prefix;\n    parent.nodes.push(node);\n    define(node, 'parent', parent);\n  })\n  /**\n   * Escape: \"\\\\.\"\n   */\n  .capture('escape', function () {\n    var pos = this.position();\n    var m = this.match(/^\\\\(.)/);\n    if (!m) return;\n    return pos({\n      type: 'escape',\n      val: m[0],\n      ch: m[1]\n    });\n  })\n  /**\n   * Question marks: \"?\"\n   */\n  .capture('qmark', function () {\n    var parsed = this.parsed;\n    var pos = this.position();\n    var m = this.match(/^\\?+(?!\\()/);\n    if (!m) return;\n    extglob.state.metachar = true;\n    return pos({\n      type: 'qmark',\n      rest: this.input,\n      parsed: parsed,\n      val: m[0]\n    });\n  })\n  /**\n   * Character parsers\n   */\n  .capture('star', /^\\*(?!\\()/).capture('plus', /^\\+(?!\\()/).capture('dot', /^\\./).capture('text', not);\n}\n\n;\n/**\n * Expose text regex string\n */\n\nmodule.exports.TEXT_REGEX = TEXT_REGEX;\n/**\n * Extglob parsers\n */\n\nmodule.exports = parsers;","map":{"version":3,"names":["brackets","require","define","utils","TEXT_REGEX","not","createRegex","parsers","extglob","state","use","parser","sets","paren","capture","parsed","pos","position","m","match","prev","prefix","val","open","type","node","nodes","input","push","parent","pop","rest","isType","options","strict","Error","escaped","ch","metachar","module","exports"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/extglob/lib/parsers.js"],"sourcesContent":["'use strict';\n\nvar brackets = require('expand-brackets');\nvar define = require('define-property');\nvar utils = require('./utils');\n\n/**\n * Characters to use in text regex (we want to \"not\" match\n * characters that are matched by other parsers)\n */\n\nvar TEXT_REGEX = '([!@*?+]?\\\\(|\\\\)|[*?.+\\\\\\\\]|\\\\[:?(?=.*\\\\])|:?\\\\])+';\nvar not = utils.createRegex(TEXT_REGEX);\n\n/**\n * Extglob parsers\n */\n\nfunction parsers(extglob) {\n  extglob.state = extglob.state || {};\n\n  /**\n   * Use `expand-brackets` parsers\n   */\n\n  extglob.use(brackets.parsers);\n  extglob.parser.sets.paren = extglob.parser.sets.paren || [];\n  extglob.parser\n\n    /**\n     * Extglob open: \"*(\"\n     */\n\n    .capture('paren.open', function() {\n      var parsed = this.parsed;\n      var pos = this.position();\n      var m = this.match(/^([!@*?+])?\\(/);\n      if (!m) return;\n\n      var prev = this.prev();\n      var prefix = m[1];\n      var val = m[0];\n\n      var open = pos({\n        type: 'paren.open',\n        parsed: parsed,\n        val: val\n      });\n\n      var node = pos({\n        type: 'paren',\n        prefix: prefix,\n        nodes: [open]\n      });\n\n      // if nested negation extglobs, just cancel them out to simplify\n      if (prefix === '!' && prev.type === 'paren' && prev.prefix === '!') {\n        prev.prefix = '@';\n        node.prefix = '@';\n      }\n\n      define(node, 'rest', this.input);\n      define(node, 'parsed', parsed);\n      define(node, 'parent', prev);\n      define(open, 'parent', node);\n\n      this.push('paren', node);\n      prev.nodes.push(node);\n    })\n\n    /**\n     * Extglob close: \")\"\n     */\n\n    .capture('paren.close', function() {\n      var parsed = this.parsed;\n      var pos = this.position();\n      var m = this.match(/^\\)/);\n      if (!m) return;\n\n      var parent = this.pop('paren');\n      var node = pos({\n        type: 'paren.close',\n        rest: this.input,\n        parsed: parsed,\n        val: m[0]\n      });\n\n      if (!this.isType(parent, 'paren')) {\n        if (this.options.strict) {\n          throw new Error('missing opening paren: \"(\"');\n        }\n        node.escaped = true;\n        return node;\n      }\n\n      node.prefix = parent.prefix;\n      parent.nodes.push(node);\n      define(node, 'parent', parent);\n    })\n\n    /**\n     * Escape: \"\\\\.\"\n     */\n\n    .capture('escape', function() {\n      var pos = this.position();\n      var m = this.match(/^\\\\(.)/);\n      if (!m) return;\n\n      return pos({\n        type: 'escape',\n        val: m[0],\n        ch: m[1]\n      });\n    })\n\n    /**\n     * Question marks: \"?\"\n     */\n\n    .capture('qmark', function() {\n      var parsed = this.parsed;\n      var pos = this.position();\n      var m = this.match(/^\\?+(?!\\()/);\n      if (!m) return;\n      extglob.state.metachar = true;\n      return pos({\n        type: 'qmark',\n        rest: this.input,\n        parsed: parsed,\n        val: m[0]\n      });\n    })\n\n    /**\n     * Character parsers\n     */\n\n    .capture('star', /^\\*(?!\\()/)\n    .capture('plus', /^\\+(?!\\()/)\n    .capture('dot', /^\\./)\n    .capture('text', not);\n};\n\n/**\n * Expose text regex string\n */\n\nmodule.exports.TEXT_REGEX = TEXT_REGEX;\n\n/**\n * Extglob parsers\n */\n\nmodule.exports = parsers;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}