{"ast":null,"code":"import { parse32F, parse64F, parse32I, parse64I, parseU32, isNanLiteral, isInfLiteral } from \"@webassemblyjs/wast-parser\";\nimport { longNumberLiteral, floatLiteral, numberLiteral, instr } from \"./nodes\";\nexport function numberLiteralFromRaw(rawValue) {\n  var instructionType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"i32\";\n  var original = rawValue; // Remove numeric separators _\n\n  if (typeof rawValue === \"string\") {\n    rawValue = rawValue.replace(/_/g, \"\");\n  }\n\n  if (typeof rawValue === \"number\") {\n    return numberLiteral(rawValue, String(original));\n  } else {\n    switch (instructionType) {\n      case \"i32\":\n        {\n          return numberLiteral(parse32I(rawValue), String(original));\n        }\n\n      case \"u32\":\n        {\n          return numberLiteral(parseU32(rawValue), String(original));\n        }\n\n      case \"i64\":\n        {\n          return longNumberLiteral(parse64I(rawValue), String(original));\n        }\n\n      case \"f32\":\n        {\n          return floatLiteral(parse32F(rawValue), isNanLiteral(rawValue), isInfLiteral(rawValue), String(original));\n        }\n      // f64\n\n      default:\n        {\n          return floatLiteral(parse64F(rawValue), isNanLiteral(rawValue), isInfLiteral(rawValue), String(original));\n        }\n    }\n  }\n}\nexport function instruction(id) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var namedArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return instr(id, undefined, args, namedArgs);\n}\nexport function objectInstruction(id, object) {\n  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var namedArgs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return instr(id, object, args, namedArgs);\n}\n/**\n * Decorators\n */\n\nexport function withLoc(n, end, start) {\n  var loc = {\n    start: start,\n    end: end\n  };\n  n.loc = loc;\n  return n;\n}\nexport function withRaw(n, raw) {\n  n.raw = raw;\n  return n;\n}\nexport function funcParam(valtype, id) {\n  return {\n    id: id,\n    valtype: valtype\n  };\n}\nexport function indexLiteral(value) {\n  // $FlowIgnore\n  var x = numberLiteralFromRaw(value, \"u32\");\n  return x;\n}\nexport function memIndexLiteral(value) {\n  // $FlowIgnore\n  var x = numberLiteralFromRaw(value, \"u32\");\n  return x;\n}","map":{"version":3,"names":["parse32F","parse64F","parse32I","parse64I","parseU32","isNanLiteral","isInfLiteral","longNumberLiteral","floatLiteral","numberLiteral","instr","numberLiteralFromRaw","rawValue","instructionType","arguments","length","undefined","original","replace","String","instruction","id","args","namedArgs","objectInstruction","object","withLoc","n","end","start","loc","withRaw","raw","funcParam","valtype","indexLiteral","value","x","memIndexLiteral"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/@webassemblyjs/ast/esm/node-helpers.js"],"sourcesContent":["import { parse32F, parse64F, parse32I, parse64I, parseU32, isNanLiteral, isInfLiteral } from \"@webassemblyjs/wast-parser\";\nimport { longNumberLiteral, floatLiteral, numberLiteral, instr } from \"./nodes\";\nexport function numberLiteralFromRaw(rawValue) {\n  var instructionType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"i32\";\n  var original = rawValue; // Remove numeric separators _\n\n  if (typeof rawValue === \"string\") {\n    rawValue = rawValue.replace(/_/g, \"\");\n  }\n\n  if (typeof rawValue === \"number\") {\n    return numberLiteral(rawValue, String(original));\n  } else {\n    switch (instructionType) {\n      case \"i32\":\n        {\n          return numberLiteral(parse32I(rawValue), String(original));\n        }\n\n      case \"u32\":\n        {\n          return numberLiteral(parseU32(rawValue), String(original));\n        }\n\n      case \"i64\":\n        {\n          return longNumberLiteral(parse64I(rawValue), String(original));\n        }\n\n      case \"f32\":\n        {\n          return floatLiteral(parse32F(rawValue), isNanLiteral(rawValue), isInfLiteral(rawValue), String(original));\n        }\n      // f64\n\n      default:\n        {\n          return floatLiteral(parse64F(rawValue), isNanLiteral(rawValue), isInfLiteral(rawValue), String(original));\n        }\n    }\n  }\n}\nexport function instruction(id) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var namedArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return instr(id, undefined, args, namedArgs);\n}\nexport function objectInstruction(id, object) {\n  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var namedArgs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return instr(id, object, args, namedArgs);\n}\n/**\n * Decorators\n */\n\nexport function withLoc(n, end, start) {\n  var loc = {\n    start: start,\n    end: end\n  };\n  n.loc = loc;\n  return n;\n}\nexport function withRaw(n, raw) {\n  n.raw = raw;\n  return n;\n}\nexport function funcParam(valtype, id) {\n  return {\n    id: id,\n    valtype: valtype\n  };\n}\nexport function indexLiteral(value) {\n  // $FlowIgnore\n  var x = numberLiteralFromRaw(value, \"u32\");\n  return x;\n}\nexport function memIndexLiteral(value) {\n  // $FlowIgnore\n  var x = numberLiteralFromRaw(value, \"u32\");\n  return x;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}