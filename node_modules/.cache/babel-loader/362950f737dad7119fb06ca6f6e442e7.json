{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nmodule.exports = class FileExistsPlugin {\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    const fs = resolver.fileSystem;\n    resolver.getHook(this.source).tapAsync(\"FileExistsPlugin\", (request, resolveContext, callback) => {\n      const file = request.path;\n      fs.stat(file, (err, stat) => {\n        if (err || !stat) {\n          if (resolveContext.missing) resolveContext.missing.add(file);\n          if (resolveContext.log) resolveContext.log(file + \" doesn't exist\");\n          return callback();\n        }\n\n        if (!stat.isFile()) {\n          if (resolveContext.missing) resolveContext.missing.add(file);\n          if (resolveContext.log) resolveContext.log(file + \" is not a file\");\n          return callback();\n        }\n\n        resolver.doResolve(target, request, \"existing file: \" + file, resolveContext, callback);\n      });\n    });\n  }\n\n};","map":{"version":3,"names":["module","exports","FileExistsPlugin","constructor","source","target","apply","resolver","ensureHook","fs","fileSystem","getHook","tapAsync","request","resolveContext","callback","file","path","stat","err","missing","add","log","isFile","doResolve"],"sources":["/Users/iaonniskokkoros/Documents/OG BrokeBoiz/node_modules/enhanced-resolve/lib/FileExistsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nmodule.exports = class FileExistsPlugin {\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst fs = resolver.fileSystem;\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"FileExistsPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst file = request.path;\n\t\t\t\tfs.stat(file, (err, stat) => {\n\t\t\t\t\tif (err || !stat) {\n\t\t\t\t\t\tif (resolveContext.missing) resolveContext.missing.add(file);\n\t\t\t\t\t\tif (resolveContext.log) resolveContext.log(file + \" doesn't exist\");\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\tif (!stat.isFile()) {\n\t\t\t\t\t\tif (resolveContext.missing) resolveContext.missing.add(file);\n\t\t\t\t\t\tif (resolveContext.log) resolveContext.log(file + \" is not a file\");\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\"existing file: \" + file,\n\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\tcallback\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,gBAAN,CAAuB;EACvCC,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;IAC3B,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;EACA;;EAEDC,KAAK,CAACC,QAAD,EAAW;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;IACA,MAAMI,EAAE,GAAGF,QAAQ,CAACG,UAApB;IACAH,QAAQ,CACNI,OADF,CACU,KAAKP,MADf,EAEEQ,QAFF,CAEW,kBAFX,EAE+B,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;MACpE,MAAMC,IAAI,GAAGH,OAAO,CAACI,IAArB;MACAR,EAAE,CAACS,IAAH,CAAQF,IAAR,EAAc,CAACG,GAAD,EAAMD,IAAN,KAAe;QAC5B,IAAIC,GAAG,IAAI,CAACD,IAAZ,EAAkB;UACjB,IAAIJ,cAAc,CAACM,OAAnB,EAA4BN,cAAc,CAACM,OAAf,CAAuBC,GAAvB,CAA2BL,IAA3B;UAC5B,IAAIF,cAAc,CAACQ,GAAnB,EAAwBR,cAAc,CAACQ,GAAf,CAAmBN,IAAI,GAAG,gBAA1B;UACxB,OAAOD,QAAQ,EAAf;QACA;;QACD,IAAI,CAACG,IAAI,CAACK,MAAL,EAAL,EAAoB;UACnB,IAAIT,cAAc,CAACM,OAAnB,EAA4BN,cAAc,CAACM,OAAf,CAAuBC,GAAvB,CAA2BL,IAA3B;UAC5B,IAAIF,cAAc,CAACQ,GAAnB,EAAwBR,cAAc,CAACQ,GAAf,CAAmBN,IAAI,GAAG,gBAA1B;UACxB,OAAOD,QAAQ,EAAf;QACA;;QACDR,QAAQ,CAACiB,SAAT,CACCnB,MADD,EAECQ,OAFD,EAGC,oBAAoBG,IAHrB,EAICF,cAJD,EAKCC,QALD;MAOA,CAlBD;IAmBA,CAvBF;EAwBA;;AAjCsC,CAAxC"},"metadata":{},"sourceType":"script"}